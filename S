if IY_LOADED and not _G.IY_DEBUG == true then
    -- error("Infinite Yield is already running!", 0)
    return
end

pcall(function() getgenv().IY_LOADED = true end)

local cloneref = cloneref or function(o) return o end
COREGUI = cloneref(game:GetService("CoreGui"))
Players = cloneref(game:GetService("Players"))

if not game:IsLoaded() then
    local notLoaded = Instance.new("Message")
    notLoaded.Parent = COREGUI
    notLoaded.Text = "Infinite Yield is waiting for the game to load"
    game.Loaded:Wait()
    notLoaded:Destroy()
end

currentVersion = "6.3.1"

ScaledHolder = Instance.new("Frame")
Scale = Instance.new("UIScale")
Holder = Instance.new("Frame")
Title = Instance.new("TextLabel")
Dark = Instance.new("Frame")
Cmdbar = Instance.new("TextBox")
CMDsF = Instance.new("ScrollingFrame")
cmdListLayout = Instance.new("UIListLayout")
SettingsButton = Instance.new("ImageButton")
ColorsButton = Instance.new("ImageButton")
Settings = Instance.new("Frame")
Prefix = Instance.new("TextLabel")
PrefixBox = Instance.new("TextBox")
Keybinds = Instance.new("TextLabel")
StayOpen = Instance.new("TextLabel")
Button = Instance.new("Frame")
On = Instance.new("TextButton")
Positions = Instance.new("TextLabel")
EventBind = Instance.new("TextLabel")
Plugins = Instance.new("TextLabel")
Example = Instance.new("TextButton")
Notification = Instance.new("Frame")
Title_2 = Instance.new("TextLabel")
Text_2 = Instance.new("TextLabel")
CloseButton = Instance.new("TextButton")
CloseImage = Instance.new("ImageLabel")
PinButton = Instance.new("TextButton")
PinImage = Instance.new("ImageLabel")
Tooltip = Instance.new("Frame")
Title_3 = Instance.new("TextLabel")
Description = Instance.new("TextLabel")
IntroBackground = Instance.new("Frame")
Logo = Instance.new("ImageLabel")
Credits = Instance.new("TextBox")
KeybindsFrame = Instance.new("Frame")
Close = Instance.new("TextButton")
Add = Instance.new("TextButton")
Delete = Instance.new("TextButton")
Holder_2 = Instance.new("ScrollingFrame")
Example_2 = Instance.new("Frame")
Text_3 = Instance.new("TextLabel")
Delete_2 = Instance.new("TextButton")
KeybindEditor = Instance.new("Frame")
background_2 = Instance.new("Frame")
Dark_3 = Instance.new("Frame")
Directions = Instance.new("TextLabel")
BindTo = Instance.new("TextButton")
TriggerLabel = Instance.new("TextLabel")
BindTriggerSelect = Instance.new("TextButton")
Add_2 = Instance.new("TextButton")
Toggles = Instance.new("ScrollingFrame")
ClickTP  = Instance.new("TextLabel")
Select = Instance.new("TextButton")
ClickDelete = Instance.new("TextLabel")
Select_2 = Instance.new("TextButton")
Cmdbar_2 = Instance.new("TextBox")
Cmdbar_3 = Instance.new("TextBox")
CreateToggle = Instance.new("TextLabel")
Button_2 = Instance.new("Frame")
On_2 = Instance.new("TextButton")
shadow_2 = Instance.new("Frame")
PopupText_2 = Instance.new("TextLabel")
Exit_2 = Instance.new("TextButton")
ExitImage_2 = Instance.new("ImageLabel")
PositionsFrame = Instance.new("Frame")
Close_3 = Instance.new("TextButton")
Delete_5 = Instance.new("TextButton")
Part = Instance.new("TextButton")
Holder_4 = Instance.new("ScrollingFrame")
Example_4 = Instance.new("Frame")
Text_5 = Instance.new("TextLabel")
Delete_6 = Instance.new("TextButton")
TP = Instance.new("TextButton")
AliasesFrame = Instance.new("Frame")
Close_2 = Instance.new("TextButton")
Delete_3 = Instance.new("TextButton")
Holder_3 = Instance.new("ScrollingFrame")
Example_3 = Instance.new("Frame")
Text_4 = Instance.new("TextLabel")
Delete_4 = Instance.new("TextButton")
Aliases = Instance.new("TextLabel")
PluginsFrame = Instance.new("Frame")
Close_4 = Instance.new("TextButton")
Add_3 = Instance.new("TextButton")
Holder_5 = Instance.new("ScrollingFrame")
Example_5 = Instance.new("Frame")
Text_6 = Instance.new("TextLabel")
Delete_7 = Instance.new("TextButton")
PluginEditor = Instance.new("Frame")
background_3 = Instance.new("Frame")
Dark_2 = Instance.new("Frame")
Img = Instance.new("ImageButton")
AddPlugin = Instance.new("TextButton")
FileName = Instance.new("TextBox")
About = Instance.new("TextLabel")
Directions_2 = Instance.new("TextLabel")
shadow_3 = Instance.new("Frame")
PopupText_3 = Instance.new("TextLabel")
Exit_3 = Instance.new("TextButton")
ExitImage_3 = Instance.new("ImageLabel")
AliasHint = Instance.new("TextLabel")
PluginsHint = Instance.new("TextLabel")
PositionsHint = Instance.new("TextLabel")
ToPartFrame = Instance.new("Frame")
background_4 = Instance.new("Frame")
ChoosePart = Instance.new("TextButton")
CopyPath = Instance.new("TextButton")
Directions_3 = Instance.new("TextLabel")
Path = Instance.new("TextLabel")
shadow_4 = Instance.new("Frame")
PopupText_5 = Instance.new("TextLabel")
Exit_4 = Instance.new("TextButton")
ExitImage_5 = Instance.new("ImageLabel")
logs = Instance.new("Frame")
shadow = Instance.new("Frame")
Hide = Instance.new("TextButton")
ImageLabel = Instance.new("ImageLabel")
PopupText = Instance.new("TextLabel")
Exit = Instance.new("TextButton")
ImageLabel_2 = Instance.new("ImageLabel")
background = Instance.new("Frame")
chat = Instance.new("Frame")
Clear = Instance.new("TextButton")
SaveChatlogs = Instance.new("TextButton")
Toggle = Instance.new("TextButton")
scroll_2 = Instance.new("ScrollingFrame")
join = Instance.new("Frame")
Toggle_2 = Instance.new("TextButton")
Clear_2 = Instance.new("TextButton")
scroll_3 = Instance.new("ScrollingFrame")
listlayout = Instance.new("UIListLayout",scroll_3)
selectChat = Instance.new("TextButton")
selectJoin = Instance.new("TextButton")

function randomString()
	local length = math.random(10,20)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

PARENT = nil
if get_hidden_gui or gethui then
    local hiddenUI = get_hidden_gui or gethui
    local Main = Instance.new("ScreenGui")
    Main.Name = randomString()
    Main.Parent = hiddenUI()
    PARENT = Main
elseif (not is_sirhurt_closure) and (syn and syn.protect_gui) then
    local Main = Instance.new("ScreenGui")
    Main.Name = randomString()
    syn.protect_gui(Main)
    Main.Parent = COREGUI
    PARENT = Main
elseif COREGUI:FindFirstChild("RobloxGui") then
    PARENT = COREGUI.RobloxGui
else
    local Main = Instance.new("ScreenGui")
    Main.Name = randomString()
    Main.Parent = COREGUI
    PARENT = Main
end

shade1 = {}
shade2 = {}
shade3 = {}
text1 = {}
text2 = {}
scroll = {}

ScaledHolder.Name = randomString()
ScaledHolder.Size = UDim2.fromScale(1, 1)
ScaledHolder.BackgroundTransparency = 1
ScaledHolder.Parent = PARENT
Scale.Name = randomString()

Holder.Name = randomString()
Holder.Parent = ScaledHolder
Holder.Active = true
Holder.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Holder.BorderSizePixel = 0
Holder.Position = UDim2.new(1, -250, 1, -220)
Holder.Size = UDim2.new(0, 250, 0, 220)
Holder.ZIndex = 10
table.insert(shade2,Holder)

Title.Name = "Title"
Title.Parent = Holder
Title.Active = true
Title.BackgroundColor3 = Color3.fromRGB(36,36,37)
Title.BorderSizePixel = 0
Title.Size = UDim2.new(0, 250, 0, 20)
Title.Font = Enum.Font.SourceSans
Title.TextSize = 18
Title.Text = "Infinite Yield FE v" .. currentVersion

do
	local emoji = ({
		["01 01"] = "🎆",
		[(function(Year)
			local A = math.floor(Year/100)
			local B = math.floor((13+8*A)/25)
			local C = (15-B+A-math.floor(A/4))%30
			local D = (4+A-math.floor(A/4))%7
			local E = (19*(Year%19)+C)%30
			local F = (2*(Year%4)+4*(Year%7)+6*E+D)%7
			local G = (22+E+F)
			if E == 29 and F == 6 then
				return "04 19"
			elseif E == 28 and F == 6 then
				return "04 18"
			elseif 31 < G then
				return ("04 %02d"):format(G-31)
			end
			return ("03 %02d"):format(G)
		end)(tonumber(os.date"%Y"))] = "🥚",
		["10 31"] = "🎃",
		["12 25"] = "🎄"
	})[os.date("%m %d")]
	if emoji then
		Title.Text = ("%s %s %s"):format(emoji, Title.Text, emoji)
	end
end

Title.TextColor3 = Color3.new(1, 1, 1)
Title.ZIndex = 10
table.insert(shade1,Title)
table.insert(text1,Title)

Dark.Name = "Dark"
Dark.Parent = Holder
Dark.Active = true
Dark.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Dark.BorderSizePixel = 0
Dark.Position = UDim2.new(0, 0, 0, 45)
Dark.Size = UDim2.new(0, 250, 0, 175)
Dark.ZIndex = 10
table.insert(shade1,Dark)

Cmdbar.Name = "Cmdbar"
Cmdbar.Parent = Holder
Cmdbar.BackgroundTransparency = 1
Cmdbar.BorderSizePixel = 0
Cmdbar.Position = UDim2.new(0, 5, 0, 20)
Cmdbar.Size = UDim2.new(0, 240, 0, 25)
Cmdbar.Font = Enum.Font.SourceSans
Cmdbar.TextSize = 18
Cmdbar.TextXAlignment = Enum.TextXAlignment.Left
Cmdbar.TextColor3 = Color3.new(1, 1, 1)
Cmdbar.Text = ""
Cmdbar.ZIndex = 10
Cmdbar.PlaceholderText = "Command Bar"

CMDsF.Name = "CMDs"
CMDsF.Parent = Holder
CMDsF.BackgroundTransparency = 1
CMDsF.BorderSizePixel = 0
CMDsF.Position = UDim2.new(0, 5, 0, 45)
CMDsF.Size = UDim2.new(0, 245, 0, 175)
CMDsF.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
CMDsF.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CMDsF.CanvasSize = UDim2.new(0, 0, 0, 0)
CMDsF.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CMDsF.ScrollBarThickness = 8
CMDsF.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CMDsF.VerticalScrollBarInset = 'Always'
CMDsF.ZIndex = 10
table.insert(scroll,CMDsF)

cmdListLayout.Parent = CMDsF

SettingsButton.Name = "SettingsButton"
SettingsButton.Parent = Holder
SettingsButton.BackgroundTransparency = 1
SettingsButton.Position = UDim2.new(0, 230, 0, 0)
SettingsButton.Size = UDim2.new(0, 20, 0, 20)
SettingsButton.Image = "rbxassetid://1204397029"
SettingsButton.ZIndex = 10

ReferenceButton = Instance.new("ImageButton")
ReferenceButton.Name = "ReferenceButton"
ReferenceButton.Parent = Holder
ReferenceButton.BackgroundTransparency = 1
ReferenceButton.Position = UDim2.new(0, 212, 0, 2)
ReferenceButton.Size = UDim2.new(0, 16, 0, 16)
ReferenceButton.Image = "rbxassetid://3523243755"
ReferenceButton.ZIndex = 10

Settings.Name = "Settings"
Settings.Parent = Holder
Settings.Active = true
Settings.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Settings.BorderSizePixel = 0
Settings.Position = UDim2.new(0, 0, 0, 220)
Settings.Size = UDim2.new(0, 250, 0, 175)
Settings.ZIndex = 10
table.insert(shade1,Settings)

SettingsHolder = Instance.new("ScrollingFrame")
SettingsHolder.Name = "Holder"
SettingsHolder.Parent = Settings
SettingsHolder.BackgroundTransparency = 1
SettingsHolder.BorderSizePixel = 0
SettingsHolder.Size = UDim2.new(1,0,1,0)
SettingsHolder.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
SettingsHolder.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
SettingsHolder.CanvasSize = UDim2.new(0, 0, 0, 235)
SettingsHolder.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
SettingsHolder.ScrollBarThickness = 8
SettingsHolder.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
SettingsHolder.VerticalScrollBarInset = 'Always'
SettingsHolder.ZIndex = 10
table.insert(scroll,SettingsHolder)

Prefix.Name = "Prefix"
Prefix.Parent = SettingsHolder
Prefix.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Prefix.BorderSizePixel = 0
Prefix.BackgroundTransparency = 1
Prefix.Position = UDim2.new(0, 5, 0, 5)
Prefix.Size = UDim2.new(1, -10, 0, 20)
Prefix.Font = Enum.Font.SourceSans
Prefix.TextSize = 14
Prefix.Text = "Prefix"
Prefix.TextColor3 = Color3.new(1, 1, 1)
Prefix.TextXAlignment = Enum.TextXAlignment.Left
Prefix.ZIndex = 10
table.insert(shade2,Prefix)
table.insert(text1,Prefix)

PrefixBox.Name = "PrefixBox"
PrefixBox.Parent = Prefix
PrefixBox.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
PrefixBox.BorderSizePixel = 0
PrefixBox.Position = UDim2.new(1, -20, 0, 0)
PrefixBox.Size = UDim2.new(0, 20, 0, 20)
PrefixBox.Font = Enum.Font.SourceSansBold
PrefixBox.TextSize = 14
PrefixBox.Text = ''
PrefixBox.TextColor3 = Color3.new(0, 0, 0)
PrefixBox.ZIndex = 10
table.insert(shade3,PrefixBox)
table.insert(text2,PrefixBox)

function makeSettingsButton(name,iconID,off)
	local button = Instance.new("TextButton")
	button.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
	button.BorderSizePixel = 0
	button.Position = UDim2.new(0,0,0,0)
	button.Size = UDim2.new(1,0,0,25)
	button.Text = ""
	button.ZIndex = 10
	local icon = Instance.new("ImageLabel")
	icon.Name = "Icon"
	icon.Parent = button
	icon.Position = UDim2.new(0,5,0,5)
	icon.Size = UDim2.new(0,16,0,16)
	icon.BackgroundTransparency = 1
	icon.Image = iconID
	icon.ZIndex = 10
	if off then
		icon.ScaleType = Enum.ScaleType.Crop
		icon.ImageRectSize = Vector2.new(16,16)
		icon.ImageRectOffset = Vector2.new(off,0)
	end
	local label = Instance.new("TextLabel")
	label.Name = "ButtonLabel"
	label.Parent = button
	label.BackgroundTransparency = 1
	label.Text = name
	label.Position = UDim2.new(0,28,0,0)
	label.Size = UDim2.new(1,-28,1,0)
	label.Font = Enum.Font.SourceSans
	label.TextColor3 = Color3.new(1, 1, 1)
	label.TextSize = 14
	label.ZIndex = 10
	label.TextXAlignment = Enum.TextXAlignment.Left
	table.insert(shade2,button)
	table.insert(text1,label)
	return button
end

ColorsButton = makeSettingsButton("Edit Theme","rbxassetid://4911962991")
ColorsButton.Position = UDim2.new(0, 5, 0, 55)
ColorsButton.Size = UDim2.new(1, -10, 0, 25)
ColorsButton.Name = "Colors"
ColorsButton.Parent = SettingsHolder

Keybinds = makeSettingsButton("Edit Keybinds","rbxassetid://129697930")
Keybinds.Position = UDim2.new(0, 5, 0, 85)
Keybinds.Size = UDim2.new(1, -10, 0, 25)
Keybinds.Name = "Keybinds"
Keybinds.Parent = SettingsHolder

Aliases = makeSettingsButton("Edit Aliases","rbxassetid://5147488658")
Aliases.Position = UDim2.new(0, 5, 0, 115)
Aliases.Size = UDim2.new(1, -10, 0, 25)
Aliases.Name = "Aliases"
Aliases.Parent = SettingsHolder

StayOpen.Name = "StayOpen"
StayOpen.Parent = SettingsHolder
StayOpen.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
StayOpen.BorderSizePixel = 0
StayOpen.BackgroundTransparency = 1
StayOpen.Position = UDim2.new(0, 5, 0, 30)
StayOpen.Size = UDim2.new(1, -10, 0, 20)
StayOpen.Font = Enum.Font.SourceSans
StayOpen.TextSize = 14
StayOpen.Text = "Keep Menu Open"
StayOpen.TextColor3 = Color3.new(1, 1, 1)
StayOpen.TextXAlignment = Enum.TextXAlignment.Left
StayOpen.ZIndex = 10
table.insert(shade2,StayOpen)
table.insert(text1,StayOpen)

Button.Name = "Button"
Button.Parent = StayOpen
Button.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Button.BorderSizePixel = 0
Button.Position = UDim2.new(1, -20, 0, 0)
Button.Size = UDim2.new(0, 20, 0, 20)
Button.ZIndex = 10
table.insert(shade3,Button)

On.Name = "On"
On.Parent = Button
On.BackgroundColor3 = Color3.fromRGB(150, 150, 151)
On.BackgroundTransparency = 1
On.BorderSizePixel = 0
On.Position = UDim2.new(0, 2, 0, 2)
On.Size = UDim2.new(0, 16, 0, 16)
On.Font = Enum.Font.SourceSans
On.FontSize = Enum.FontSize.Size14
On.Text = ""
On.TextColor3 = Color3.new(0, 0, 0)
On.ZIndex = 10

Positions = makeSettingsButton("Edit/Goto Waypoints","rbxassetid://5147488592")
Positions.Position = UDim2.new(0, 5, 0, 145)
Positions.Size = UDim2.new(1, -10, 0, 25)
Positions.Name = "Waypoints"
Positions.Parent = SettingsHolder

EventBind = makeSettingsButton("Edit Event Binds","rbxassetid://5147695474",759)
EventBind.Position = UDim2.new(0, 5, 0, 205)
EventBind.Size = UDim2.new(1, -10, 0, 25)
EventBind.Name = "EventBinds"
EventBind.Parent = SettingsHolder

Plugins = makeSettingsButton("Manage Plugins","rbxassetid://5147695474",743)
Plugins.Position = UDim2.new(0, 5, 0, 175)
Plugins.Size = UDim2.new(1, -10, 0, 25)
Plugins.Name = "Plugins"
Plugins.Parent = SettingsHolder

Example.Name = "Example"
Example.Parent = Holder
Example.BackgroundTransparency = 1
Example.BorderSizePixel = 0
Example.Size = UDim2.new(0, 190, 0, 20)
Example.Visible = false
Example.Font = Enum.Font.SourceSans
Example.TextSize = 18
Example.Text = "Example"
Example.TextColor3 = Color3.new(1, 1, 1)
Example.TextXAlignment = Enum.TextXAlignment.Left
Example.ZIndex = 10
table.insert(text1,Example)

Notification.Name = randomString()
Notification.Parent = ScaledHolder
Notification.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Notification.BorderSizePixel = 0
Notification.Position = UDim2.new(1, -500, 1, 20)
Notification.Size = UDim2.new(0, 250, 0, 100)
Notification.ZIndex = 10
table.insert(shade1,Notification)

Title_2.Name = "Title"
Title_2.Parent = Notification
Title_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Title_2.BorderSizePixel = 0
Title_2.Size = UDim2.new(0, 250, 0, 20)
Title_2.Font = Enum.Font.SourceSans
Title_2.TextSize = 14
Title_2.Text = "Notification Title"
Title_2.TextColor3 = Color3.new(1, 1, 1)
Title_2.ZIndex = 10
table.insert(shade2,Title_2)
table.insert(text1,Title_2)

Text_2.Name = "Text"
Text_2.Parent = Notification
Text_2.BackgroundTransparency = 1
Text_2.BorderSizePixel = 0
Text_2.Position = UDim2.new(0, 5, 0, 25)
Text_2.Size = UDim2.new(0, 240, 0, 75)
Text_2.Font = Enum.Font.SourceSans
Text_2.TextSize = 16
Text_2.Text = "Notification Text"
Text_2.TextColor3 = Color3.new(1, 1, 1)
Text_2.TextWrapped = true
Text_2.ZIndex = 10
table.insert(text1,Text_2)

CloseButton.Name = "CloseButton"
CloseButton.Parent = Notification
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(1, -20, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Text = ""
CloseButton.ZIndex = 10

CloseImage.Parent = CloseButton
CloseImage.BackgroundColor3 = Color3.new(1, 1, 1)
CloseImage.BackgroundTransparency = 1
CloseImage.Position = UDim2.new(0, 5, 0, 5)
CloseImage.Size = UDim2.new(0, 10, 0, 10)
CloseImage.Image = "rbxassetid://5054663650"
CloseImage.ZIndex = 10

PinButton.Name = "PinButton"
PinButton.Parent = Notification
PinButton.BackgroundTransparency = 1
PinButton.Size = UDim2.new(0, 20, 0, 20)
PinButton.ZIndex = 10
PinButton.Text = ""

PinImage.Parent = PinButton
PinImage.BackgroundColor3 = Color3.new(1, 1, 1)
PinImage.BackgroundTransparency = 1
PinImage.Position = UDim2.new(0, 3, 0, 3)
PinImage.Size = UDim2.new(0, 14, 0, 14)
PinImage.ZIndex = 10
PinImage.Image = "rbxassetid://6234691350"

Tooltip.Name = randomString()
Tooltip.Parent = ScaledHolder
Tooltip.Active = true
Tooltip.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Tooltip.BackgroundTransparency = 0.1
Tooltip.BorderSizePixel = 0
Tooltip.Size = UDim2.new(0, 200, 0, 96)
Tooltip.Visible = false
Tooltip.ZIndex = 10
table.insert(shade1,Tooltip)

Title_3.Name = "Title"
Title_3.Parent = Tooltip
Title_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Title_3.BackgroundTransparency = 0.1
Title_3.BorderSizePixel = 0
Title_3.Size = UDim2.new(0, 200, 0, 20)
Title_3.Font = Enum.Font.SourceSans
Title_3.TextSize = 14
Title_3.Text = ""
Title_3.TextColor3 = Color3.new(1, 1, 1)
Title_3.TextTransparency = 0.1
Title_3.ZIndex = 10
table.insert(shade2,Title_3)
table.insert(text1,Title_3)

Description.Name = "Description"
Description.Parent = Tooltip
Description.BackgroundTransparency = 1
Description.BorderSizePixel = 0
Description.Size = UDim2.new(0,180,0,72)
Description.Position = UDim2.new(0,10,0,18)
Description.Font = Enum.Font.SourceSans
Description.TextSize = 16
Description.Text = ""
Description.TextColor3 = Color3.new(1, 1, 1)
Description.TextTransparency = 0.1
Description.TextWrapped = true
Description.ZIndex = 10
table.insert(text1,Description)

IntroBackground.Name = "IntroBackground"
IntroBackground.Parent = Holder
IntroBackground.Active = true
IntroBackground.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
IntroBackground.BorderSizePixel = 0
IntroBackground.Position = UDim2.new(0, 0, 0, 45)
IntroBackground.Size = UDim2.new(0, 250, 0, 175)
IntroBackground.ZIndex = 10

Logo.Name = "Logo"
Logo.Parent = Holder
Logo.BackgroundTransparency = 1
Logo.BorderSizePixel = 0
Logo.Position = UDim2.new(0, 125, 0, 127)
Logo.Size = UDim2.new(0, 10, 0, 10)
Logo.Image = "rbxassetid://1352543873"
Logo.ImageTransparency = 0
Logo.ZIndex = 10

Credits.Name = "Credits"
Credits.Parent = Holder
Credits.BackgroundTransparency = 1
Credits.BorderSizePixel = 0
Credits.Position = UDim2.new(0, 0, 0.9, 30)
Credits.Size = UDim2.new(0, 250, 0, 20)
Credits.Font = Enum.Font.SourceSansLight
Credits.FontSize = Enum.FontSize.Size18
Credits.Text = "Edge // Zwolf // Moon // Toon"
Credits.TextColor3 = Color3.new(1, 1, 1)
Credits.ZIndex = 10

KeybindsFrame.Name = "KeybindsFrame"
KeybindsFrame.Parent = Settings
KeybindsFrame.Active = true
KeybindsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
KeybindsFrame.BorderSizePixel = 0
KeybindsFrame.Position = UDim2.new(0, 0, 0, 175)
KeybindsFrame.Size = UDim2.new(0, 250, 0, 175)
KeybindsFrame.ZIndex = 10
table.insert(shade1,KeybindsFrame)

Close.Name = "Close"
Close.Parent = KeybindsFrame
Close.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Close.BorderSizePixel = 0
Close.Position = UDim2.new(0, 205, 0, 150)
Close.Size = UDim2.new(0, 40, 0, 20)
Close.Font = Enum.Font.SourceSans
Close.TextSize = 14
Close.Text = "Close"
Close.TextColor3 = Color3.new(1, 1, 1)
Close.ZIndex = 10
table.insert(shade2,Close)
table.insert(text1,Close)

Add.Name = "Add"
Add.Parent = KeybindsFrame
Add.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Add.BorderSizePixel = 0
Add.Position = UDim2.new(0, 5, 0, 150)
Add.Size = UDim2.new(0, 40, 0, 20)
Add.Font = Enum.Font.SourceSans
Add.TextSize = 14
Add.Text = "Add"
Add.TextColor3 = Color3.new(1, 1, 1)
Add.ZIndex = 10
table.insert(shade2,Add)
table.insert(text1,Add)

Delete.Name = "Delete"
Delete.Parent = KeybindsFrame
Delete.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Delete.BorderSizePixel = 0
Delete.Position = UDim2.new(0, 50, 0, 150)
Delete.Size = UDim2.new(0, 40, 0, 20)
Delete.Font = Enum.Font.SourceSans
Delete.TextSize = 14
Delete.Text = "Clear"
Delete.TextColor3 = Color3.new(1, 1, 1)
Delete.ZIndex = 10
table.insert(shade2,Delete)
table.insert(text1,Delete)

Holder_2.Name = "Holder"
Holder_2.Parent = KeybindsFrame
Holder_2.BackgroundTransparency = 1
Holder_2.BorderSizePixel = 0
Holder_2.Position = UDim2.new(0, 0, 0, 0)
Holder_2.Size = UDim2.new(0, 250, 0, 145)
Holder_2.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_2.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_2.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_2.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_2.ScrollBarThickness = 0
Holder_2.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_2.VerticalScrollBarInset = 'Always'
Holder_2.ZIndex = 10

Example_2.Name = "Example"
Example_2.Parent = KeybindsFrame
Example_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Example_2.BorderSizePixel = 0
Example_2.Size = UDim2.new(0, 10, 0, 20)
Example_2.Visible = false
Example_2.ZIndex = 10
table.insert(shade2,Example_2)

Text_3.Name = "Text"
Text_3.Parent = Example_2
Text_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Text_3.BorderSizePixel = 0
Text_3.Position = UDim2.new(0, 10, 0, 0)
Text_3.Size = UDim2.new(0, 240, 0, 20)
Text_3.Font = Enum.Font.SourceSans
Text_3.TextSize = 14
Text_3.Text = "nom"
Text_3.TextColor3 = Color3.new(1, 1, 1)
Text_3.TextXAlignment = Enum.TextXAlignment.Left
Text_3.ZIndex = 10
table.insert(shade2,Text_3)
table.insert(text1,Text_3)

Delete_2.Name = "Delete"
Delete_2.Parent = Text_3
Delete_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_2.BorderSizePixel = 0
Delete_2.Position = UDim2.new(0, 200, 0, 0)
Delete_2.Size = UDim2.new(0, 40, 0, 20)
Delete_2.Font = Enum.Font.SourceSans
Delete_2.TextSize = 14
Delete_2.Text = "Delete"
Delete_2.TextColor3 = Color3.new(0, 0, 0)
Delete_2.ZIndex = 10
table.insert(shade3,Delete_2)
table.insert(text2,Delete_2)

KeybindEditor.Name = randomString()
KeybindEditor.Parent = ScaledHolder
KeybindEditor.Active = true
KeybindEditor.BackgroundTransparency = 1
KeybindEditor.Position = UDim2.new(0.5, -180, 0, -500)
KeybindEditor.Size = UDim2.new(0, 360, 0, 20)
KeybindEditor.ZIndex = 10

background_2.Name = "background"
background_2.Parent = KeybindEditor
background_2.Active = true
background_2.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
background_2.BorderSizePixel = 0
background_2.Position = UDim2.new(0, 0, 0, 20)
background_2.Size = UDim2.new(0, 360, 0, 185)
background_2.ZIndex = 10
table.insert(shade1,background_2)

Dark_3.Name = "Dark"
Dark_3.Parent = background_2
Dark_3.Active = true
Dark_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Dark_3.BorderSizePixel = 0
Dark_3.Position = UDim2.new(0, 135, 0, 0)
Dark_3.Size = UDim2.new(0, 2, 0, 185)
Dark_3.ZIndex = 10
table.insert(shade2,Dark_3)

Directions.Name = "Directions"
Directions.Parent = background_2
Directions.BackgroundTransparency = 1
Directions.BorderSizePixel = 0
Directions.Position = UDim2.new(0, 10, 0, 15)
Directions.Size = UDim2.new(0, 115, 0, 90)
Directions.ZIndex = 10
Directions.Font = Enum.Font.SourceSans
Directions.Text = "Click the button below and press a key/mouse button. Then select what you want to bind it to."
Directions.TextColor3 = Color3.fromRGB(255, 255, 255)
Directions.TextSize = 14.000
Directions.TextWrapped = true
Directions.TextYAlignment = Enum.TextYAlignment.Top
table.insert(text1,Directions)

BindTo.Name = "BindTo"
BindTo.Parent = background_2
BindTo.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
BindTo.BorderSizePixel = 0
BindTo.Position = UDim2.new(0, 10, 0, 95)
BindTo.Size = UDim2.new(0, 115, 0, 50)
BindTo.ZIndex = 10
BindTo.Font = Enum.Font.SourceSans
BindTo.Text = "Click to bind"
BindTo.TextColor3 = Color3.fromRGB(255, 255, 255)
BindTo.TextSize = 16.000
table.insert(shade2,BindTo)
table.insert(text1,BindTo)

TriggerLabel.Name = "TriggerLabel"
TriggerLabel.Parent = background_2
TriggerLabel.BackgroundTransparency = 1
TriggerLabel.Position = UDim2.new(0, 10, 0, 155)
TriggerLabel.Size = UDim2.new(0, 45, 0, 20)
TriggerLabel.ZIndex = 10
TriggerLabel.Font = Enum.Font.SourceSans
TriggerLabel.Text = "Trigger:"
TriggerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TriggerLabel.TextSize = 14.000
TriggerLabel.TextXAlignment = Enum.TextXAlignment.Left
table.insert(text1,TriggerLabel)

BindTriggerSelect.Name = "BindTo"
BindTriggerSelect.Parent = background_2
BindTriggerSelect.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
BindTriggerSelect.BorderSizePixel = 0
BindTriggerSelect.Position = UDim2.new(0, 60, 0, 155)
BindTriggerSelect.Size = UDim2.new(0, 65, 0, 20)
BindTriggerSelect.ZIndex = 10
BindTriggerSelect.Font = Enum.Font.SourceSans
BindTriggerSelect.Text = "KeyDown"
BindTriggerSelect.TextColor3 = Color3.fromRGB(255, 255, 255)
BindTriggerSelect.TextSize = 16.000
table.insert(shade2,BindTriggerSelect)
table.insert(text1,BindTriggerSelect)

Add_2.Name = "Add"
Add_2.Parent = background_2
Add_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Add_2.BorderSizePixel = 0
Add_2.Position = UDim2.new(0, 310, 0, 35)
Add_2.Size = UDim2.new(0, 40, 0, 20)
Add_2.ZIndex = 10
Add_2.Font = Enum.Font.SourceSans
Add_2.Text = "Add"
Add_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Add_2.TextSize = 14.000
table.insert(shade2,Add_2)
table.insert(text1,Add_2)

Toggles.Name = "Toggles"
Toggles.Parent = background_2
Toggles.BackgroundTransparency = 1
Toggles.BorderSizePixel = 0
Toggles.Position = UDim2.new(0, 150, 0, 125)
Toggles.Size = UDim2.new(0, 200, 0, 50)
Toggles.ZIndex = 10
Toggles.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Toggles.CanvasSize = UDim2.new(0, 0, 0, 50)
Toggles.ScrollBarThickness = 8
Toggles.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Toggles.VerticalScrollBarInset = Enum.ScrollBarInset.Always
table.insert(scroll,Toggles)

ClickTP.Name = "Click TP (Hold Key & Click)"
ClickTP.Parent = Toggles
ClickTP.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
ClickTP.BorderSizePixel = 0
ClickTP.Size = UDim2.new(0, 200, 0, 20)
ClickTP.ZIndex = 10
ClickTP.Font = Enum.Font.SourceSans
ClickTP.Text = "    Click TP (Hold Key & Click)"
ClickTP.TextColor3 = Color3.fromRGB(255, 255, 255)
ClickTP.TextSize = 14.000
ClickTP.TextXAlignment = Enum.TextXAlignment.Left
table.insert(shade2,ClickTP)
table.insert(text1,ClickTP)

Select.Name = "Select"
Select.Parent = ClickTP
Select.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Select.BorderSizePixel = 0
Select.Position = UDim2.new(0, 160, 0, 0)
Select.Size = UDim2.new(0, 40, 0, 20)
Select.ZIndex = 10
Select.Font = Enum.Font.SourceSans
Select.Text = "Add"
Select.TextColor3 = Color3.fromRGB(0, 0, 0)
Select.TextSize = 14.000
table.insert(shade3,Select)
table.insert(text2,Select)

ClickDelete.Name = "Click Delete (Hold Key & Click)"
ClickDelete.Parent = Toggles
ClickDelete.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
ClickDelete.BorderSizePixel = 0
ClickDelete.Position = UDim2.new(0, 0, 0, 25)
ClickDelete.Size = UDim2.new(0, 200, 0, 20)
ClickDelete.ZIndex = 10
ClickDelete.Font = Enum.Font.SourceSans
ClickDelete.Text = "    Click Delete (Hold Key & Click)"
ClickDelete.TextColor3 = Color3.fromRGB(255, 255, 255)
ClickDelete.TextSize = 14.000
ClickDelete.TextXAlignment = Enum.TextXAlignment.Left
table.insert(shade2,ClickDelete)
table.insert(text1,ClickDelete)

Select_2.Name = "Select"
Select_2.Parent = ClickDelete
Select_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Select_2.BorderSizePixel = 0
Select_2.Position = UDim2.new(0, 160, 0, 0)
Select_2.Size = UDim2.new(0, 40, 0, 20)
Select_2.ZIndex = 10
Select_2.Font = Enum.Font.SourceSans
Select_2.Text = "Add"
Select_2.TextColor3 = Color3.fromRGB(0, 0, 0)
Select_2.TextSize = 14.000
table.insert(shade3,Select_2)
table.insert(text2,Select_2)

Cmdbar_2.Name = "Cmdbar_2"
Cmdbar_2.Parent = background_2
Cmdbar_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Cmdbar_2.BorderSizePixel = 0
Cmdbar_2.Position = UDim2.new(0, 150, 0, 35)
Cmdbar_2.Size = UDim2.new(0, 150, 0, 20)
Cmdbar_2.ZIndex = 10
Cmdbar_2.Font = Enum.Font.SourceSans
Cmdbar_2.PlaceholderText = "Command"
Cmdbar_2.Text = ""
Cmdbar_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Cmdbar_2.TextSize = 14.000
Cmdbar_2.TextXAlignment = Enum.TextXAlignment.Left

Cmdbar_3.Name = "Cmdbar_3"
Cmdbar_3.Parent = background_2
Cmdbar_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Cmdbar_3.BorderSizePixel = 0
Cmdbar_3.Position = UDim2.new(0, 150, 0, 60)
Cmdbar_3.Size = UDim2.new(0, 150, 0, 20)
Cmdbar_3.ZIndex = 10
Cmdbar_3.Font = Enum.Font.SourceSans
Cmdbar_3.PlaceholderText = "Command 2"
Cmdbar_3.Text = ""
Cmdbar_3.TextColor3 = Color3.fromRGB(255, 255, 255)
Cmdbar_3.TextSize = 14.000
Cmdbar_3.TextXAlignment = Enum.TextXAlignment.Left

CreateToggle.Name = "CreateToggle"
CreateToggle.Parent = background_2
CreateToggle.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
CreateToggle.BackgroundTransparency = 1
CreateToggle.BorderSizePixel = 0
CreateToggle.Position = UDim2.new(0, 152, 0, 10)
CreateToggle.Size = UDim2.new(0, 198, 0, 20)
CreateToggle.ZIndex = 10
CreateToggle.Font = Enum.Font.SourceSans
CreateToggle.Text = "Create Toggle"
CreateToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
CreateToggle.TextSize = 14.000
CreateToggle.TextXAlignment = Enum.TextXAlignment.Left
table.insert(text1,CreateToggle)

Button_2.Name = "Button"
Button_2.Parent = CreateToggle
Button_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Button_2.BorderSizePixel = 0
Button_2.Position = UDim2.new(1, -20, 0, 0)
Button_2.Size = UDim2.new(0, 20, 0, 20)
Button_2.ZIndex = 10
table.insert(shade3,Button_2)

On_2.Name = "On"
On_2.Parent = Button_2
On_2.BackgroundColor3 = Color3.fromRGB(150, 150, 151)
On_2.BackgroundTransparency = 1
On_2.BorderSizePixel = 0
On_2.Position = UDim2.new(0, 2, 0, 2)
On_2.Size = UDim2.new(0, 16, 0, 16)
On_2.ZIndex = 10
On_2.Font = Enum.Font.SourceSans
On_2.Text = ""
On_2.TextColor3 = Color3.fromRGB(0, 0, 0)
On_2.TextSize = 14.000

shadow_2.Name = "shadow"
shadow_2.Parent = KeybindEditor
shadow_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
shadow_2.BorderSizePixel = 0
shadow_2.Size = UDim2.new(0, 360, 0, 20)
shadow_2.ZIndex = 10
table.insert(shade2,shadow_2)

PopupText_2.Name = "PopupText_2"
PopupText_2.Parent = shadow_2
PopupText_2.BackgroundTransparency = 1
PopupText_2.Size = UDim2.new(1, 0, 0.949999988, 0)
PopupText_2.ZIndex = 10
PopupText_2.Font = Enum.Font.SourceSans
PopupText_2.Text = "Set Keybinds"
PopupText_2.TextColor3 = Color3.fromRGB(255, 255, 255)
PopupText_2.TextSize = 14.000
PopupText_2.TextWrapped = true
table.insert(text1,PopupText_2)

Exit_2.Name = "Exit_2"
Exit_2.Parent = shadow_2
Exit_2.BackgroundTransparency = 1
Exit_2.Position = UDim2.new(1, -20, 0, 0)
Exit_2.Size = UDim2.new(0, 20, 0, 20)
Exit_2.ZIndex = 10
Exit_2.Text = ""

ExitImage_2.Parent = Exit_2
ExitImage_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ExitImage_2.BackgroundTransparency = 1
ExitImage_2.Position = UDim2.new(0, 5, 0, 5)
ExitImage_2.Size = UDim2.new(0, 10, 0, 10)
ExitImage_2.ZIndex = 10
ExitImage_2.Image = "rbxassetid://5054663650"

PositionsFrame.Name = "PositionsFrame"
PositionsFrame.Parent = Settings
PositionsFrame.Active = true
PositionsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
PositionsFrame.BorderSizePixel = 0
PositionsFrame.Size = UDim2.new(0, 250, 0, 175)
PositionsFrame.Position = UDim2.new(0, 0, 0, 175)
PositionsFrame.ZIndex = 10
table.insert(shade1,PositionsFrame)

Close_3.Name = "Close"
Close_3.Parent = PositionsFrame
Close_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Close_3.BorderSizePixel = 0
Close_3.Position = UDim2.new(0, 205, 0, 150)
Close_3.Size = UDim2.new(0, 40, 0, 20)
Close_3.Font = Enum.Font.SourceSans
Close_3.TextSize = 14
Close_3.Text = "Close"
Close_3.TextColor3 = Color3.new(1, 1, 1)
Close_3.ZIndex = 10
table.insert(shade2,Close_3)
table.insert(text1,Close_3)

Delete_5.Name = "Delete"
Delete_5.Parent = PositionsFrame
Delete_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Delete_5.BorderSizePixel = 0
Delete_5.Position = UDim2.new(0, 50, 0, 150)
Delete_5.Size = UDim2.new(0, 40, 0, 20)
Delete_5.Font = Enum.Font.SourceSans
Delete_5.TextSize = 14
Delete_5.Text = "Clear"
Delete_5.TextColor3 = Color3.new(1, 1, 1)
Delete_5.ZIndex = 10
table.insert(shade2,Delete_5)
table.insert(text1,Delete_5)

Part.Name = "PartGoto"
Part.Parent = PositionsFrame
Part.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Part.BorderSizePixel = 0
Part.Position = UDim2.new(0, 5, 0, 150)
Part.Size = UDim2.new(0, 40, 0, 20)
Part.Font = Enum.Font.SourceSans
Part.TextSize = 14
Part.Text = "Part"
Part.TextColor3 = Color3.new(1, 1, 1)
Part.ZIndex = 10
table.insert(shade2,Part)
table.insert(text1,Part)

Holder_4.Name = "Holder"
Holder_4.Parent = PositionsFrame
Holder_4.BackgroundTransparency = 1
Holder_4.BorderSizePixel = 0
Holder_4.Position = UDim2.new(0, 0, 0, 0)
Holder_4.Selectable = false
Holder_4.Size = UDim2.new(0, 250, 0, 145)
Holder_4.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_4.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_4.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_4.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_4.ScrollBarThickness = 0
Holder_4.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_4.VerticalScrollBarInset = 'Always'
Holder_4.ZIndex = 10

Example_4.Name = "Example"
Example_4.Parent = PositionsFrame
Example_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Example_4.BorderSizePixel = 0
Example_4.Size = UDim2.new(0, 10, 0, 20)
Example_4.Visible = false
Example_4.Position = UDim2.new(0, 0, 0, -5)
Example_4.ZIndex = 10
table.insert(shade2,Example_4)

Text_5.Name = "Text"
Text_5.Parent = Example_4
Text_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Text_5.BorderSizePixel = 0
Text_5.Position = UDim2.new(0, 10, 0, 0)
Text_5.Size = UDim2.new(0, 240, 0, 20)
Text_5.Font = Enum.Font.SourceSans
Text_5.TextSize = 14
Text_5.Text = "Position"
Text_5.TextColor3 = Color3.new(1, 1, 1)
Text_5.TextXAlignment = Enum.TextXAlignment.Left
Text_5.ZIndex = 10
table.insert(shade2,Text_5)
table.insert(text1,Text_5)

Delete_6.Name = "Delete"
Delete_6.Parent = Text_5
Delete_6.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_6.BorderSizePixel = 0
Delete_6.Position = UDim2.new(0, 200, 0, 0)
Delete_6.Size = UDim2.new(0, 40, 0, 20)
Delete_6.Font = Enum.Font.SourceSans
Delete_6.TextSize = 14
Delete_6.Text = "Delete"
Delete_6.TextColor3 = Color3.new(0, 0, 0)
Delete_6.ZIndex = 10
table.insert(shade3,Delete_6)
table.insert(text2,Delete_6)

TP.Name = "TP"
TP.Parent = Text_5
TP.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
TP.BorderSizePixel = 0
TP.Position = UDim2.new(0, 155, 0, 0)
TP.Size = UDim2.new(0, 40, 0, 20)
TP.Font = Enum.Font.SourceSans
TP.TextSize = 14
TP.Text = "Goto"
TP.TextColor3 = Color3.new(0, 0, 0)
TP.ZIndex = 10
table.insert(shade3,TP)
table.insert(text2,TP)

AliasesFrame.Name = "AliasesFrame"
AliasesFrame.Parent = Settings
AliasesFrame.Active = true
AliasesFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
AliasesFrame.BorderSizePixel = 0
AliasesFrame.Position = UDim2.new(0, 0, 0, 175)
AliasesFrame.Size = UDim2.new(0, 250, 0, 175)
AliasesFrame.ZIndex = 10
table.insert(shade1,AliasesFrame)

Close_2.Name = "Close"
Close_2.Parent = AliasesFrame
Close_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Close_2.BorderSizePixel = 0
Close_2.Position = UDim2.new(0, 205, 0, 150)
Close_2.Size = UDim2.new(0, 40, 0, 20)
Close_2.Font = Enum.Font.SourceSans
Close_2.TextSize = 14
Close_2.Text = "Close"
Close_2.TextColor3 = Color3.new(1, 1, 1)
Close_2.ZIndex = 10
table.insert(shade2,Close_2)
table.insert(text1,Close_2)

Delete_3.Name = "Delete"
Delete_3.Parent = AliasesFrame
Delete_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Delete_3.BorderSizePixel = 0
Delete_3.Position = UDim2.new(0, 5, 0, 150)
Delete_3.Size = UDim2.new(0, 40, 0, 20)
Delete_3.Font = Enum.Font.SourceSans
Delete_3.TextSize = 14
Delete_3.Text = "Clear"
Delete_3.TextColor3 = Color3.new(1, 1, 1)
Delete_3.ZIndex = 10
table.insert(shade2,Delete_3)
table.insert(text1,Delete_3)

Holder_3.Name = "Holder"
Holder_3.Parent = AliasesFrame
Holder_3.BackgroundTransparency = 1
Holder_3.BorderSizePixel = 0
Holder_3.Position = UDim2.new(0, 0, 0, 0)
Holder_3.Size = UDim2.new(0, 250, 0, 145)
Holder_3.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_3.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_3.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_3.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_3.ScrollBarThickness = 0
Holder_3.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_3.VerticalScrollBarInset = 'Always'
Holder_3.ZIndex = 10

Example_3.Name = "Example"
Example_3.Parent = AliasesFrame
Example_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Example_3.BorderSizePixel = 0
Example_3.Size = UDim2.new(0, 10, 0, 20)
Example_3.Visible = false
Example_3.ZIndex = 10
table.insert(shade2,Example_3)

Text_4.Name = "Text"
Text_4.Parent = Example_3
Text_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Text_4.BorderSizePixel = 0
Text_4.Position = UDim2.new(0, 10, 0, 0)
Text_4.Size = UDim2.new(0, 240, 0, 20)
Text_4.Font = Enum.Font.SourceSans
Text_4.TextSize = 14
Text_4.Text = "honk"
Text_4.TextColor3 = Color3.new(1, 1, 1)
Text_4.TextXAlignment = Enum.TextXAlignment.Left
Text_4.ZIndex = 10
table.insert(shade2,Text_4)
table.insert(text1,Text_4)

Delete_4.Name = "Delete"
Delete_4.Parent = Text_4
Delete_4.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_4.BorderSizePixel = 0
Delete_4.Position = UDim2.new(0, 200, 0, 0)
Delete_4.Size = UDim2.new(0, 40, 0, 20)
Delete_4.Font = Enum.Font.SourceSans
Delete_4.TextSize = 14
Delete_4.Text = "Delete"
Delete_4.TextColor3 = Color3.new(0, 0, 0)
Delete_4.ZIndex = 10
table.insert(shade3,Delete_4)
table.insert(text2,Delete_4)

PluginsFrame.Name = "PluginsFrame"
PluginsFrame.Parent = Settings
PluginsFrame.Active = true
PluginsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
PluginsFrame.BorderSizePixel = 0
PluginsFrame.Position = UDim2.new(0, 0, 0, 175)
PluginsFrame.Size = UDim2.new(0, 250, 0, 175)
PluginsFrame.ZIndex = 10
table.insert(shade1,PluginsFrame)

Close_4.Name = "Close"
Close_4.Parent = PluginsFrame
Close_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Close_4.BorderSizePixel = 0
Close_4.Position = UDim2.new(0, 205, 0, 150)
Close_4.Size = UDim2.new(0, 40, 0, 20)
Close_4.Font = Enum.Font.SourceSans
Close_4.TextSize = 14
Close_4.Text = "Close"
Close_4.TextColor3 = Color3.new(1, 1, 1)
Close_4.ZIndex = 10
table.insert(shade2,Close_4)
table.insert(text1,Close_4)

Add_3.Name = "Add"
Add_3.Parent = PluginsFrame
Add_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Add_3.BorderSizePixel = 0
Add_3.Position = UDim2.new(0, 5, 0, 150)
Add_3.Size = UDim2.new(0, 40, 0, 20)
Add_3.Font = Enum.Font.SourceSans
Add_3.TextSize = 14
Add_3.Text = "Add"
Add_3.TextColor3 = Color3.new(1, 1, 1)
Add_3.ZIndex = 10
table.insert(shade2,Add_3)
table.insert(text1,Add_3)

Holder_5.Name = "Holder"
Holder_5.Parent = PluginsFrame
Holder_5.BackgroundTransparency = 1
Holder_5.BorderSizePixel = 0
Holder_5.Position = UDim2.new(0, 0, 0, 0)
Holder_5.Selectable = false
Holder_5.Size = UDim2.new(0, 250, 0, 145)
Holder_5.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_5.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_5.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_5.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_5.ScrollBarThickness = 0
Holder_5.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
Holder_5.VerticalScrollBarInset = 'Always'
Holder_5.ZIndex = 10

Example_5.Name = "Example"
Example_5.Parent = PluginsFrame
Example_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Example_5.BorderSizePixel = 0
Example_5.Size = UDim2.new(0, 10, 0, 20)
Example_5.Visible = false
Example_5.ZIndex = 10
table.insert(shade2,Example_5)

Text_6.Name = "Text"
Text_6.Parent = Example_5
Text_6.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Text_6.BorderSizePixel = 0
Text_6.Position = UDim2.new(0, 10, 0, 0)
Text_6.Size = UDim2.new(0, 240, 0, 20)
Text_6.Font = Enum.Font.SourceSans
Text_6.TextSize = 14
Text_6.Text = "F4 > Toggle Fly"
Text_6.TextColor3 = Color3.new(1, 1, 1)
Text_6.TextXAlignment = Enum.TextXAlignment.Left
Text_6.ZIndex = 10
table.insert(shade2,Text_6)
table.insert(text1,Text_6)

Delete_7.Name = "Delete"
Delete_7.Parent = Text_6
Delete_7.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_7.BorderSizePixel = 0
Delete_7.Position = UDim2.new(0, 200, 0, 0)
Delete_7.Size = UDim2.new(0, 40, 0, 20)
Delete_7.Font = Enum.Font.SourceSans
Delete_7.TextSize = 14
Delete_7.Text = "Delete"
Delete_7.TextColor3 = Color3.new(0, 0, 0)
Delete_7.ZIndex = 10
table.insert(shade3,Delete_7)
table.insert(text2,Delete_7)

PluginEditor.Name = randomString()
PluginEditor.Parent = ScaledHolder
PluginEditor.BorderSizePixel = 0
PluginEditor.Active = true
PluginEditor.BackgroundTransparency = 1
PluginEditor.Position = UDim2.new(0.5, -180, 0, -500)
PluginEditor.Size = UDim2.new(0, 360, 0, 20)
PluginEditor.ZIndex = 10

background_3.Name = "background"
background_3.Parent = PluginEditor
background_3.Active = true
background_3.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
background_3.BorderSizePixel = 0
background_3.Position = UDim2.new(0, 0, 0, 20)
background_3.Size = UDim2.new(0, 360, 0, 160)
background_3.ZIndex = 10
table.insert(shade1,background_3)

Dark_2.Name = "Dark"
Dark_2.Parent = background_3
Dark_2.Active = true
Dark_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Dark_2.BorderSizePixel = 0
Dark_2.Position = UDim2.new(0, 222, 0, 0)
Dark_2.Size = UDim2.new(0, 2, 0, 160)
Dark_2.ZIndex = 10
table.insert(shade2,Dark_2)

Img.Name = "Img"
Img.Parent = background_3
Img.BackgroundTransparency = 1
Img.Position = UDim2.new(0, 242, 0, 3)
Img.Size = UDim2.new(0, 100, 0, 95)
Img.Image = "rbxassetid://4113050383"
Img.ZIndex = 10

AddPlugin.Name = "AddPlugin"
AddPlugin.Parent = background_3
AddPlugin.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
AddPlugin.BorderSizePixel = 0
AddPlugin.Position = UDim2.new(0, 235, 0, 100)
AddPlugin.Size = UDim2.new(0, 115, 0, 50)
AddPlugin.Font = Enum.Font.SourceSans
AddPlugin.TextSize = 14
AddPlugin.Text = "Add Plugin"
AddPlugin.TextColor3 = Color3.new(1, 1, 1)
AddPlugin.ZIndex = 10
table.insert(shade2,AddPlugin)
table.insert(text1,AddPlugin)

FileName.Name = "FileName"
FileName.Parent = background_3
FileName.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
FileName.BorderSizePixel = 0
FileName.Position = UDim2.new(0.028, 0, 0.625, 0)
FileName.Size = UDim2.new(0, 200, 0, 50)
FileName.Font = Enum.Font.SourceSans
FileName.TextSize = 14
FileName.Text = "Plugin File Name"
FileName.TextColor3 = Color3.new(1, 1, 1)
FileName.ZIndex = 10
table.insert(shade2,FileName)
table.insert(text1,FileName)

About.Name = "About"
About.Parent = background_3
About.BackgroundTransparency = 1
About.BorderSizePixel = 0
About.Position = UDim2.new(0, 17, 0, 10)
About.Size = UDim2.new(0, 187, 0, 49)
About.Font = Enum.Font.SourceSans
About.TextSize = 14
About.Text = "Plugins are .iy files and should be located in the 'workspace' folder of your exploit."
About.TextColor3 = Color3.fromRGB(255, 255, 255)
About.TextWrapped = true
About.TextYAlignment = Enum.TextYAlignment.Top
About.ZIndex = 10
table.insert(text1,About)

Directions_2.Name = "Directions"
Directions_2.Parent = background_3
Directions_2.BackgroundTransparency = 1
Directions_2.BorderSizePixel = 0
Directions_2.Position = UDim2.new(0, 17, 0, 60)
Directions_2.Size = UDim2.new(0, 187, 0, 49)
Directions_2.Font = Enum.Font.SourceSans
Directions_2.TextSize = 14
Directions_2.Text = "Type the name of the plugin file you want to add below."
Directions_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Directions_2.TextWrapped = true
Directions_2.TextYAlignment = Enum.TextYAlignment.Top
Directions_2.ZIndex = 10
table.insert(text1,Directions_2)

shadow_3.Name = "shadow"
shadow_3.Parent = PluginEditor
shadow_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
shadow_3.BorderSizePixel = 0
shadow_3.Size = UDim2.new(0, 360, 0, 20)
shadow_3.ZIndex = 10
table.insert(shade2,shadow_3)

PopupText_3.Name = "PopupText"
PopupText_3.Parent = shadow_3
PopupText_3.BackgroundTransparency = 1
PopupText_3.Size = UDim2.new(1, 0, 0.95, 0)
PopupText_3.ZIndex = 10
PopupText_3.Font = Enum.Font.SourceSans
PopupText_3.TextSize = 14
PopupText_3.Text = "Add Plugins"
PopupText_3.TextColor3 = Color3.new(1, 1, 1)
PopupText_3.TextWrapped = true
table.insert(text1,PopupText_3)

Exit_3.Name = "Exit"
Exit_3.Parent = shadow_3
Exit_3.BackgroundTransparency = 1
Exit_3.Position = UDim2.new(1, -20, 0, 0)
Exit_3.Size = UDim2.new(0, 20, 0, 20)
Exit_3.Text = ""
Exit_3.ZIndex = 10

ExitImage_3.Parent = Exit_3
ExitImage_3.BackgroundColor3 = Color3.new(1, 1, 1)
ExitImage_3.BackgroundTransparency = 1
ExitImage_3.Position = UDim2.new(0, 5, 0, 5)
ExitImage_3.Size = UDim2.new(0, 10, 0, 10)
ExitImage_3.Image = "rbxassetid://5054663650"
ExitImage_3.ZIndex = 10

AliasHint.Name = "AliasHint"
AliasHint.Parent = AliasesFrame
AliasHint.BackgroundTransparency = 1
AliasHint.BorderSizePixel = 0
AliasHint.Position = UDim2.new(0, 25, 0, 40)
AliasHint.Size = UDim2.new(0, 200, 0, 50)
AliasHint.Font = Enum.Font.SourceSansItalic
AliasHint.TextSize = 16
AliasHint.Text = "Add aliases by using the 'addalias' command"
AliasHint.TextColor3 = Color3.new(1, 1, 1)
AliasHint.TextStrokeColor3 = Color3.new(1, 1, 1)
AliasHint.TextWrapped = true
AliasHint.ZIndex = 10
table.insert(text1,AliasHint)

PluginsHint.Name = "PluginsHint"
PluginsHint.Parent = PluginsFrame
PluginsHint.BackgroundTransparency = 1
PluginsHint.BorderSizePixel = 0
PluginsHint.Position = UDim2.new(0, 25, 0, 40)
PluginsHint.Size = UDim2.new(0, 200, 0, 50)
PluginsHint.Font = Enum.Font.SourceSansItalic
PluginsHint.TextSize = 16
PluginsHint.Text = "Download plugins from the IY Discord (discord.gg/78ZuWSq)"
PluginsHint.TextColor3 = Color3.new(1, 1, 1)
PluginsHint.TextStrokeColor3 = Color3.new(1, 1, 1)
PluginsHint.TextWrapped = true
PluginsHint.ZIndex = 10
table.insert(text1,PluginsHint)

PositionsHint.Name = "PositionsHint"
PositionsHint.Parent = PositionsFrame
PositionsHint.BackgroundTransparency = 1
PositionsHint.BorderSizePixel = 0
PositionsHint.Position = UDim2.new(0, 25, 0, 40)
PositionsHint.Size = UDim2.new(0, 200, 0, 70)
PositionsHint.Font = Enum.Font.SourceSansItalic
PositionsHint.TextSize = 16
PositionsHint.Text = "Use the 'swp' or 'setwaypoint' command to add a position using your character (NOTE: Part teleports will not save)"
PositionsHint.TextColor3 = Color3.new(1, 1, 1)
PositionsHint.TextStrokeColor3 = Color3.new(1, 1, 1)
PositionsHint.TextWrapped = true
PositionsHint.ZIndex = 10
table.insert(text1,PositionsHint)

ToPartFrame.Name = randomString()
ToPartFrame.Parent = ScaledHolder
ToPartFrame.Active = true
ToPartFrame.BackgroundTransparency = 1
ToPartFrame.Position = UDim2.new(0.5, -180, 0, -500)
ToPartFrame.Size = UDim2.new(0, 360, 0, 20)
ToPartFrame.ZIndex = 10

background_4.Name = "background"
background_4.Parent = ToPartFrame
background_4.Active = true
background_4.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
background_4.BorderSizePixel = 0
background_4.Position = UDim2.new(0, 0, 0, 20)
background_4.Size = UDim2.new(0, 360, 0, 117)
background_4.ZIndex = 10
table.insert(shade1,background_4)

ChoosePart.Name = "ChoosePart"
ChoosePart.Parent = background_4
ChoosePart.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
ChoosePart.BorderSizePixel = 0
ChoosePart.Position = UDim2.new(0, 100, 0, 55)
ChoosePart.Size = UDim2.new(0, 75, 0, 30)
ChoosePart.Font = Enum.Font.SourceSans
ChoosePart.TextSize = 14
ChoosePart.Text = "Select Part"
ChoosePart.TextColor3 = Color3.new(1, 1, 1)
ChoosePart.ZIndex = 10
table.insert(shade2,ChoosePart)
table.insert(text1,ChoosePart)

CopyPath.Name = "CopyPath"
CopyPath.Parent = background_4
CopyPath.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
CopyPath.BorderSizePixel = 0
CopyPath.Position = UDim2.new(0, 185, 0, 55)
CopyPath.Size = UDim2.new(0, 75, 0, 30)
CopyPath.Font = Enum.Font.SourceSans
CopyPath.TextSize = 14
CopyPath.Text = "Copy Path"
CopyPath.TextColor3 = Color3.new(1, 1, 1)
CopyPath.ZIndex = 10
table.insert(shade2,CopyPath)
table.insert(text1,CopyPath)

Directions_3.Name = "Directions"
Directions_3.Parent = background_4
Directions_3.BackgroundTransparency = 1
Directions_3.BorderSizePixel = 0
Directions_3.Position = UDim2.new(0, 51, 0, 17)
Directions_3.Size = UDim2.new(0, 257, 0, 32)
Directions_3.Font = Enum.Font.SourceSans
Directions_3.TextSize = 14
Directions_3.Text = 'Click on a part and then click the "Select Part" button below to set it as a teleport location'
Directions_3.TextColor3 = Color3.new(1, 1, 1)
Directions_3.TextWrapped = true
Directions_3.TextYAlignment = Enum.TextYAlignment.Top
Directions_3.ZIndex = 10
table.insert(text1,Directions_3)

Path.Name = "Path"
Path.Parent = background_4
Path.BackgroundTransparency = 1
Path.BorderSizePixel = 0
Path.Position = UDim2.new(0, 0, 0, 94)
Path.Size = UDim2.new(0, 360, 0, 16)
Path.Font = Enum.Font.SourceSansItalic
Path.TextSize = 14
Path.Text = ""
Path.TextColor3 = Color3.new(1, 1, 1)
Path.TextScaled = true
Path.TextWrapped = true
Path.TextYAlignment = Enum.TextYAlignment.Top
Path.ZIndex = 10
table.insert(text1,Path)

shadow_4.Name = "shadow"
shadow_4.Parent = ToPartFrame
shadow_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
shadow_4.BorderSizePixel = 0
shadow_4.Size = UDim2.new(0, 360, 0, 20)
shadow_4.ZIndex = 10
table.insert(shade2,shadow_4)

PopupText_5.Name = "PopupText"
PopupText_5.Parent = shadow_4
PopupText_5.BackgroundTransparency = 1
PopupText_5.Size = UDim2.new(1, 0, 0.95, 0)
PopupText_5.ZIndex = 10
PopupText_5.Font = Enum.Font.SourceSans
PopupText_5.TextSize = 14
PopupText_5.Text = "Teleport to Part"
PopupText_5.TextColor3 = Color3.new(1, 1, 1)
PopupText_5.TextWrapped = true
table.insert(text1,PopupText_5)

Exit_4.Name = "Exit"
Exit_4.Parent = shadow_4
Exit_4.BackgroundTransparency = 1
Exit_4.Position = UDim2.new(1, -20, 0, 0)
Exit_4.Size = UDim2.new(0, 20, 0, 20)
Exit_4.Text = ""
Exit_4.ZIndex = 10

ExitImage_5.Parent = Exit_4
ExitImage_5.BackgroundColor3 = Color3.new(1, 1, 1)
ExitImage_5.BackgroundTransparency = 1
ExitImage_5.Position = UDim2.new(0, 5, 0, 5)
ExitImage_5.Size = UDim2.new(0, 10, 0, 10)
ExitImage_5.Image = "rbxassetid://5054663650"
ExitImage_5.ZIndex = 10

logs.Name = randomString()
logs.Parent = ScaledHolder
logs.Active = true
logs.BackgroundTransparency = 1
logs.Position = UDim2.new(0, 0, 1, 10)
logs.Size = UDim2.new(0, 338, 0, 20)
logs.ZIndex = 10

shadow.Name = "shadow"
shadow.Parent = logs
shadow.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
shadow.BorderSizePixel = 0
shadow.Position = UDim2.new(0, 0, 0.00999999978, 0)
shadow.Size = UDim2.new(0, 338, 0, 20)
shadow.ZIndex = 10
table.insert(shade2,shadow)

Hide.Name = "Hide"
Hide.Parent = shadow
Hide.BackgroundTransparency = 1
Hide.Position = UDim2.new(1, -40, 0, 0)
Hide.Size = UDim2.new(0, 20, 0, 20)
Hide.ZIndex = 10
Hide.Text = ""

ImageLabel.Parent = Hide
ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0, 3, 0, 3)
ImageLabel.Size = UDim2.new(0, 14, 0, 14)
ImageLabel.Image = "rbxassetid://2406617031"
ImageLabel.ZIndex = 10

PopupText.Name = "PopupText"
PopupText.Parent = shadow
PopupText.BackgroundTransparency = 1
PopupText.Size = UDim2.new(1, 0, 0.949999988, 0)
PopupText.ZIndex = 10
PopupText.Font = Enum.Font.SourceSans
PopupText.FontSize = Enum.FontSize.Size14
PopupText.Text = "Logs"
PopupText.TextColor3 = Color3.new(1, 1, 1)
PopupText.TextWrapped = true
table.insert(text1,PopupText)

Exit.Name = "Exit"
Exit.Parent = shadow
Exit.BackgroundTransparency = 1
Exit.Position = UDim2.new(1, -20, 0, 0)
Exit.Size = UDim2.new(0, 20, 0, 20)
Exit.ZIndex = 10
Exit.Text = ""

ImageLabel_2.Parent = Exit
ImageLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel_2.BackgroundTransparency = 1
ImageLabel_2.Position = UDim2.new(0, 5, 0, 5)
ImageLabel_2.Size = UDim2.new(0, 10, 0, 10)
ImageLabel_2.Image = "rbxassetid://5054663650"
ImageLabel_2.ZIndex = 10

background.Name = "background"
background.Parent = logs
background.Active = true
background.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
background.BorderSizePixel = 0
background.ClipsDescendants = true
background.Position = UDim2.new(0, 0, 1, 0)
background.Size = UDim2.new(0, 338, 0, 245)
background.ZIndex = 10

chat.Name = "chat"
chat.Parent = background
chat.Active = true
chat.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
chat.BorderSizePixel = 0
chat.ClipsDescendants = true
chat.Size = UDim2.new(0, 338, 0, 245)
chat.ZIndex = 10
table.insert(shade1,chat)

Clear.Name = "Clear"
Clear.Parent = chat
Clear.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Clear.BorderSizePixel = 0
Clear.Position = UDim2.new(0, 5, 0, 220)
Clear.Size = UDim2.new(0, 50, 0, 20)
Clear.ZIndex = 10
Clear.Font = Enum.Font.SourceSans
Clear.FontSize = Enum.FontSize.Size14
Clear.Text = "Clear"
Clear.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,Clear)
table.insert(text1,Clear)

SaveChatlogs.Name = "SaveChatlogs"
SaveChatlogs.Parent = chat
SaveChatlogs.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
SaveChatlogs.BorderSizePixel = 0
SaveChatlogs.Position = UDim2.new(0, 258, 0, 220)
SaveChatlogs.Size = UDim2.new(0, 75, 0, 20)
SaveChatlogs.ZIndex = 10
SaveChatlogs.Font = Enum.Font.SourceSans
SaveChatlogs.FontSize = Enum.FontSize.Size14
SaveChatlogs.Text = "Save To .txt"
SaveChatlogs.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,SaveChatlogs)
table.insert(text1,SaveChatlogs)

Toggle.Name = "Toggle"
Toggle.Parent = chat
Toggle.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Toggle.BorderSizePixel = 0
Toggle.Position = UDim2.new(0, 60, 0, 220)
Toggle.Size = UDim2.new(0, 66, 0, 20)
Toggle.ZIndex = 10
Toggle.Font = Enum.Font.SourceSans
Toggle.FontSize = Enum.FontSize.Size14
Toggle.Text = "Disabled"
Toggle.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,Toggle)
table.insert(text1,Toggle)

scroll_2.Name = "scroll"
scroll_2.Parent = chat
scroll_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
scroll_2.BorderSizePixel = 0
scroll_2.Position = UDim2.new(0, 5, 0, 25)
scroll_2.Size = UDim2.new(0, 328, 0, 190)
scroll_2.ZIndex = 10
scroll_2.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
scroll_2.ScrollBarThickness = 8
scroll_2.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
table.insert(scroll,scroll_2)
table.insert(shade2,scroll_2)

join.Name = "join"
join.Parent = background
join.Active = true
join.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
join.BorderSizePixel = 0
join.ClipsDescendants = true
join.Size = UDim2.new(0, 338, 0, 245)
join.Visible = false
join.ZIndex = 10
table.insert(shade1,join)

Toggle_2.Name = "Toggle"
Toggle_2.Parent = join
Toggle_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Toggle_2.BorderSizePixel = 0
Toggle_2.Position = UDim2.new(0, 60, 0, 220)
Toggle_2.Size = UDim2.new(0, 66, 0, 20)
Toggle_2.ZIndex = 10
Toggle_2.Font = Enum.Font.SourceSans
Toggle_2.FontSize = Enum.FontSize.Size14
Toggle_2.Text = "Disabled"
Toggle_2.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,Toggle_2)
table.insert(text1,Toggle_2)

Clear_2.Name = "Clear"
Clear_2.Parent = join
Clear_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Clear_2.BorderSizePixel = 0
Clear_2.Position = UDim2.new(0, 5, 0, 220)
Clear_2.Size = UDim2.new(0, 50, 0, 20)
Clear_2.ZIndex = 10
Clear_2.Font = Enum.Font.SourceSans
Clear_2.FontSize = Enum.FontSize.Size14
Clear_2.Text = "Clear"
Clear_2.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,Clear_2)
table.insert(text1,Clear_2)

scroll_3.Name = "scroll"
scroll_3.Parent = join
scroll_3.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
scroll_3.BorderSizePixel = 0
scroll_3.Position = UDim2.new(0, 5, 0, 25)
scroll_3.Size = UDim2.new(0, 328, 0, 190)
scroll_3.ZIndex = 10
scroll_3.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)
scroll_3.ScrollBarThickness = 8
scroll_3.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
table.insert(scroll,scroll_3)
table.insert(shade2,scroll_3)

selectChat.Name = "selectChat"
selectChat.Parent = background
selectChat.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
selectChat.BorderSizePixel = 0
selectChat.Position = UDim2.new(0, 5, 0, 5)
selectChat.Size = UDim2.new(0, 164, 0, 20)
selectChat.ZIndex = 10
selectChat.Font = Enum.Font.SourceSans
selectChat.FontSize = Enum.FontSize.Size14
selectChat.Text = "Chat Logs"
selectChat.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade2,selectChat)
table.insert(text1,selectChat)

selectJoin.Name = "selectJoin"
selectJoin.Parent = background
selectJoin.BackgroundColor3 = Color3.new(0.305882, 0.305882, 0.309804)
selectJoin.BorderSizePixel = 0
selectJoin.Position = UDim2.new(0, 169, 0, 5)
selectJoin.Size = UDim2.new(0, 164, 0, 20)
selectJoin.ZIndex = 10
selectJoin.Font = Enum.Font.SourceSans
selectJoin.FontSize = Enum.FontSize.Size14
selectJoin.Text = "Join Logs"
selectJoin.TextColor3 = Color3.new(1, 1, 1)
table.insert(shade3,selectJoin)
table.insert(text1,selectJoin)

function create(data)
	local insts = {}
	for i,v in pairs(data) do insts[v[1]] = Instance.new(v[2]) end

	for _,v in pairs(data) do
		for prop,val in pairs(v[3]) do
			if type(val) == "table" then
				insts[v[1]][prop] = insts[val[1]]
			else
				insts[v[1]][prop] = val
			end
		end
	end

	return insts[1]
end

TextService = cloneref(game:GetService("TextService"))
ViewportTextBox = (function()

	local funcs = {}
	funcs.Update = function(self)
		local cursorPos = self.TextBox.CursorPosition
		local text = self.TextBox.Text
		if text == "" then self.TextBox.Position = UDim2.new(0,2,0,0) return end
		if cursorPos == -1 then return end

		local cursorText = text:sub(1,cursorPos-1)
		local pos = nil
		local leftEnd = -self.TextBox.Position.X.Offset
		local rightEnd = leftEnd + self.View.AbsoluteSize.X

		local totalTextSize = TextService:GetTextSize(text,self.TextBox.TextSize,self.TextBox.Font,Vector2.new(999999999,100)).X
		local cursorTextSize = TextService:GetTextSize(cursorText,self.TextBox.TextSize,self.TextBox.Font,Vector2.new(999999999,100)).X

		if cursorTextSize > rightEnd then
			pos = math.max(-2,cursorTextSize - self.View.AbsoluteSize.X + 2)
		elseif cursorTextSize < leftEnd then
			pos = math.max(-2,cursorTextSize-2)
		elseif totalTextSize < rightEnd then
			pos = math.max(-2,totalTextSize - self.View.AbsoluteSize.X + 2)
		end

		if pos then
			self.TextBox.Position = UDim2.new(0,-pos,0,0)
			self.TextBox.Size = UDim2.new(1,pos,1,0)
		end
	end

	local mt = {}
	mt.__index = funcs

	local function convert(textbox)
		local obj = setmetatable({OffsetX = 0, TextBox = textbox},mt)

		local view = Instance.new("Frame")
		view.BackgroundTransparency = textbox.BackgroundTransparency
		view.BackgroundColor3 = textbox.BackgroundColor3
		view.BorderSizePixel = textbox.BorderSizePixel
		view.BorderColor3 = textbox.BorderColor3
		view.Position = textbox.Position
		view.Size = textbox.Size
		view.ClipsDescendants = true
		view.Name = textbox.Name
		view.ZIndex = 10
		textbox.BackgroundTransparency = 1
		textbox.Position = UDim2.new(0,4,0,0)
		textbox.Size = UDim2.new(1,-8,1,0)
		textbox.TextXAlignment = Enum.TextXAlignment.Left
		textbox.Name = "Input"
		table.insert(text1,textbox)
		table.insert(shade2,view)

		obj.View = view

		textbox.Changed:Connect(function(prop)
			if prop == "Text" or prop == "CursorPosition" or prop == "AbsoluteSize" then
				obj:Update()
			end
		end)

		obj:Update()

		view.Parent = textbox.Parent
		textbox.Parent = view

		return obj
	end

	return {convert = convert}
end)()

ViewportTextBox.convert(Cmdbar).View.ZIndex = 10
ViewportTextBox.convert(Cmdbar_2).View.ZIndex = 10
ViewportTextBox.convert(Cmdbar_3).View.ZIndex = 10

IYMouse = Players.LocalPlayer:GetMouse()
PlayerGui = Players.LocalPlayer:FindFirstChildWhichIsA("PlayerGui")
UserInputService = cloneref(game:GetService("UserInputService"))
TweenService = cloneref(game:GetService("TweenService"))
HttpService = cloneref(game:GetService("HttpService"))
MarketplaceService = cloneref(game:GetService("MarketplaceService"))
RunService = cloneref(game:GetService("RunService"))
TeleportService = cloneref(game:GetService("TeleportService"))
StarterGui = cloneref(game:GetService("StarterGui"))
GuiService = cloneref(game:GetService("GuiService"))
Lighting = cloneref(game:GetService("Lighting"))
ContextActionService = cloneref(game:GetService("ContextActionService"))
ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
GroupService = cloneref(game:GetService("GroupService"))
PathService = cloneref(game:GetService("PathfindingService"))
SoundService = cloneref(game:GetService("SoundService"))
Teams = cloneref(game:GetService("Teams"))
StarterPlayer = cloneref(game:GetService("StarterPlayer"))
InsertService = cloneref(game:GetService("InsertService"))
ChatService = cloneref(game:GetService("Chat"))
ProximityPromptService = cloneref(game:GetService("ProximityPromptService"))
StatsService = cloneref(game:GetService("Stats"))
MaterialService = cloneref(game:GetService("MaterialService"))
AvatarEditorService = cloneref(game:GetService("AvatarEditorService"))
TextChatService = cloneref(game:GetService("TextChatService"))
CaptureService = cloneref(game:GetService("CaptureService"))
VoiceChatService = cloneref(game:GetService("VoiceChatService"))

-- validateType
function vtype(o, t)
    if o == nil then return false end
    if type(o) == "userdata" then return typeof(o) == t end
    return type(o) == t
end

sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop
gethidden = gethiddenproperty or get_hidden_property or get_hidden_prop
queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
PlaceId, JobId = game.PlaceId, game.JobId
local IsOnMobile = table.find({Enum.Platform.IOS, Enum.Platform.Android}, UserInputService:GetPlatform())
everyClipboard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
isLegacyChat = TextChatService.ChatVersion == Enum.ChatVersion.LegacyChatService

local writefile = type(writefile) == "function" and function(file, data, safe)
    if safe == true then return pcall(writefile, file, data) end
    writefile(file, data)
end

local readfile = type(readfile) == "function" and function(file, safe)
    if safe == true then return pcall(readfile, file) end
    return readfile(file)
end

function writefileExploit()
	if writefile then
		return true
	end
end

function readfileExploit()
	if readfile then
		return true
	end
end

function isNumber(str)
	if tonumber(str) ~= nil or str == 'inf' then
		return true
	end
end

function getRoot(char)
	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
	return rootPart
end

function tools(plr)
	if plr:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass('Tool') or plr.Character:FindFirstChildOfClass('Tool') then
		return true
	end
end

function r15(plr)
	if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
		return true
	end
end

function toClipboard(txt)
    if everyClipboard then
        everyClipboard(tostring(txt))
        notify("Clipboard", "Copied to clipboard")
    else
        notify("Clipboard", "Your exploit doesn't have the ability to use the clipboard")
    end
end

function chatMessage(str)
    str = tostring(str)
    if not isLegacyChat then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

function getHierarchy(obj)
	local fullname
	local period

	if string.find(obj.Name,' ') then
		fullname = '["'..obj.Name..'"]'
		period = false
	else
		fullname = obj.Name
		period = true
	end

	local getS = obj
	local parent = obj
	local service = ''

	if getS.Parent ~= game then
		repeat
			getS = getS.Parent
			service = getS.ClassName
		until getS.Parent == game
	end

	if parent.Parent ~= getS then
		repeat
			parent = parent.Parent
			if string.find(tostring(parent),' ') then
				if period then
					fullname = '["'..parent.Name..'"].'..fullname
				else
					fullname = '["'..parent.Name..'"]'..fullname
				end
				period = false
			else
				if period then
					fullname = parent.Name..'.'..fullname
				else
					fullname = parent.Name..''..fullname
				end
				period = true
			end
		until parent.Parent == getS
	elseif string.find(tostring(parent),' ') then
		fullname = '["'..parent.Name..'"]'
		period = false
	end

	if period then
		return 'game:GetService("'..service..'").'..fullname
	else
		return 'game:GetService("'..service..'")'..fullname
	end
end

AllWaypoints = {}

local cooldown = false
function writefileCooldown(name,data)
	task.spawn(function()
		if not cooldown then
			cooldown = true
			writefile(name, data, true)
		else
			repeat wait() until cooldown == false
			writefileCooldown(name,data)
		end
		wait(3)
		cooldown = false
	end)
end

function dragGUI(gui)
	task.spawn(function()
		local dragging
		local dragInput
		local dragStart = Vector3.new(0,0,0)
		local startPos
		local function update(input)
			local delta = input.Position - dragStart
			local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
		end
		gui.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				dragStart = input.Position
				startPos = gui.Position

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)
		gui.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if input == dragInput and dragging then
				update(input)
			end
		end)
	end)
end

dragGUI(logs)
dragGUI(KeybindEditor)
dragGUI(PluginEditor)
dragGUI(ToPartFrame)

eventEditor = (function()
	local events = {}

	local function registerEvent(name,sets)
		events[name] = {
			commands = {},
			sets = sets or {}
		}
	end

	local onEdited = nil

	local function fireEvent(name,...)
		local args = {...}
		local event = events[name]
		if event then
			for i,cmd in pairs(event.commands) do
				local metCondition = true
				for idx,set in pairs(event.sets) do
					local argVal = args[idx]
					local cmdSet = cmd[2][idx]
					local condType = set.Type
					if condType == "Player" then
						if cmdSet == 0 then
							metCondition = metCondition and (tostring(Players.LocalPlayer) == argVal)
						elseif cmdSet ~= 1 then
							metCondition = metCondition and table.find(getPlayer(cmdSet,Players.LocalPlayer),argVal)
						end
					elseif condType == "String" then
						if cmdSet ~= 0 then
							metCondition = metCondition and string.find(argVal:lower(),cmdSet:lower())
						end
					elseif condType == "Number" then
						if cmdSet ~= 0 then
							metCondition = metCondition and tonumber(argVal)<=tonumber(cmdSet)
						end
					end
					if not metCondition then break end
				end

				if metCondition then
					pcall(task.spawn(function()
						local cmdStr = cmd[1]
						for count,arg in pairs(args) do
							cmdStr = cmdStr:gsub("%$"..count,arg)
						end
						wait(cmd[3] or 0)
						execCmd(cmdStr)
					end))
				end
			end
		end
	end

	local main = create({
		{1,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderSizePixel=0,Name="EventEditor",Position=UDim2.new(0.5,-175,0,-500),Size=UDim2.new(0,350,0,20),ZIndex=10,}},
		{2,"Frame",{BackgroundColor3=currentShade2,BorderSizePixel=0,Name="TopBar",Parent={1},Size=UDim2.new(1,0,0,20),ZIndex=10,}},
		{3,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={2},Position=UDim2.new(0,0,0,0),Size=UDim2.new(1,0,0.95,0),Text="Event Editor",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=Enum.TextXAlignment.Center,ZIndex=10,}},
		{4,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Close",Parent={2},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{5,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5054663650",Parent={4},Position=UDim2.new(0,5,0,5),Size=UDim2.new(0,10,0,10),ZIndex=10,}},
		{6,"Frame",{BackgroundColor3=currentShade1,BorderSizePixel=0,Name="Content",Parent={1},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,0,202),ZIndex=10,}},
		{7,"ScrollingFrame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage="rbxasset://textures/ui/Scroll/scroll-middle.png",CanvasSize=UDim2.new(0,0,0,100),Name="List",Parent={6},Position=UDim2.new(0,5,0,5),ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,-10,1,-10),TopImage="rbxasset://textures/ui/Scroll/scroll-middle.png",ZIndex=10,}},
		{8,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Holder",Parent={7},Size=UDim2.new(1,0,1,0),ZIndex=10,}},
		{9,"UIListLayout",{Parent={8},SortOrder=2,}},
		{10,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,ClipsDescendants=true,Name="Settings",Parent={6},Position=UDim2.new(1,0,0,0),Size=UDim2.new(0,150,1,0),ZIndex=10,}},
		{11,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),Name="Slider",Parent={10},Position=UDim2.new(0,-150,0,0),Size=UDim2.new(1,0,1,0),ZIndex=10,}},
		{12,"Frame",{BackgroundColor3=Color3.new(0.23529413342476,0.23529413342476,0.23529413342476),BorderColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,Name="Line",Parent={11},Size=UDim2.new(0,1,1,0),ZIndex=10,}},
		{13,"ScrollingFrame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage="rbxasset://textures/ui/Scroll/scroll-middle.png",CanvasSize=UDim2.new(0,0,0,100),Name="List",Parent={11},Position=UDim2.new(0,0,0,25),ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,0,1,-25),TopImage="rbxasset://textures/ui/Scroll/scroll-middle.png",ZIndex=10,}},
		{14,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Holder",Parent={13},Size=UDim2.new(1,0,1,0),ZIndex=10,}},
		{15,"UIListLayout",{Parent={14},SortOrder=2,}},
		{16,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={11},Size=UDim2.new(1,0,0,20),Text="Event Settings",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{17,"TextButton",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Font=3,Name="Close",BorderSizePixel=0,Parent={11},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="<",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
		{18,"Folder",{Name="Templates",Parent={10},}},
		{19,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name="Players",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,86),Visible=false,ZIndex=10,}},
		{20,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={19},Size=UDim2.new(1,0,0,20),Text="Choose Players",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{21,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Any",Parent={19},Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-10,0,20),Text="Any Player",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{22,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="Button",Parent={21},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{23,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={22},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{24,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Me",Parent={19},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text="Me Only",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{25,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="Button",Parent={24},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{26,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={25},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{27,"TextBox",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name="Custom",Parent={19},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText="Custom Player Set",Position=UDim2.new(0,5,0,64),Size=UDim2.new(1,-35,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{28,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="CustomButton",Parent={19},Position=UDim2.new(1,-25,0,64),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{29,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={28},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{30,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name="Strings",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,64),Visible=false,ZIndex=10,}},
		{31,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={30},Size=UDim2.new(1,0,0,20),Text="Choose String",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{32,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Any",Parent={30},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text="Any String",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{33,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="Button",Parent={32},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{34,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={33},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{54,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name="Numbers",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,64),Visible=false,ZIndex=10,}},
		{55,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={54},Size=UDim2.new(1,0,0,20),Text="Choose String",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{56,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Any",Parent={54},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text="Any Number",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{57,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="Button",Parent={56},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{58,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={57},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{59,"TextBox",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name="Custom",Parent={54},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText="Number",Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-35,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{60,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="CustomButton",Parent={54},Position=UDim2.new(1,-25,0,42),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{61,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={60},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{35,"TextBox",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name="Custom",Parent={30},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText="Match String",Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-35,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{36,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="CustomButton",Parent={30},Position=UDim2.new(1,-25,0,42),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
		{37,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={36},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{38,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name="DelayEditor",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,24),Visible=false,ZIndex=10,}},
		{39,"TextBox",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Font=3,Name="Secs",Parent={38},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),Position=UDim2.new(0,60,0,2),Size=UDim2.new(1,-65,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{40,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Label",Parent={39},Position=UDim2.new(0,-55,0,0),Size=UDim2.new(1,0,1,0),Text="Delay (s):",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{41,"Frame",{BackgroundColor3=currentShade1,BorderSizePixel=0,ClipsDescendants=true,Name="EventTemplate",Parent={6},Size=UDim2.new(1,0,0,20),Visible=false,ZIndex=10,}},
		{42,"TextButton",{BackgroundColor3=currentText1,BackgroundTransparency=1,Font=3,Name="Expand",Parent={41},Size=UDim2.new(0,20,0,20),Text=">",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
		{43,"TextLabel",{BackgroundColor3=currentText1,BackgroundTransparency=1,Font=3,Name="EventName",Parent={41},Position=UDim2.new(0,25,0,0),Size=UDim2.new(1,-25,0,20),Text="OnSpawn",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{44,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BorderSizePixel=0,BackgroundTransparency=1,ClipsDescendants=true,Name="Cmds",Parent={41},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,1,-20),ZIndex=10,}},
		{45,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),Name="Add",Parent={44},Position=UDim2.new(0,0,1,-20),Size=UDim2.new(1,0,0,20),ZIndex=10,}},
		{46,"TextBox",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Parent={45},PlaceholderColor3=Color3.new(0.7843137383461,0.7843137383461,0.7843137383461),PlaceholderText="Add new command",Position=UDim2.new(0,5,0,0),Size=UDim2.new(1,-10,1,0),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{47,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Holder",Parent={44},Size=UDim2.new(1,0,1,-20),ZIndex=10,}},
		{48,"UIListLayout",{Parent={47},SortOrder=2,}},
		{49,"Frame",{currentShade1,BorderSizePixel=0,ClipsDescendants=true,Name="CmdTemplate",Parent={6},Size=UDim2.new(1,0,0,20),Visible=false,ZIndex=10,}},
		{50,"TextBox",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Parent={49},PlaceholderColor3=Color3.new(1,1,1),Position=UDim2.new(0,5,0,0),Size=UDim2.new(1,-45,0,20),Text="a\\b\\c\\d",TextColor3=currentText1,TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{51,"TextButton",{BackgroundColor3=currentShade1,BorderSizePixel=0,Font=3,Name="Delete",Parent={49},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="X",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
		{52,"TextButton",{BackgroundColor3=currentShade1,BorderSizePixel=0,Font=3,Name="Settings",Parent={49},Position=UDim2.new(1,-40,0,0),Size=UDim2.new(0,20,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
		{53,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://1204397029",Parent={52},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),ZIndex=10,}},
	})
	main.Name = randomString()
	local mainFrame = main:WaitForChild("Content")
	local eventList = mainFrame:WaitForChild("List")
	local eventListHolder = eventList:WaitForChild("Holder")
	local cmdTemplate = mainFrame:WaitForChild("CmdTemplate")
	local eventTemplate = mainFrame:WaitForChild("EventTemplate")
	local settingsFrame = mainFrame:WaitForChild("Settings"):WaitForChild("Slider")
	local settingsTemplates = mainFrame.Settings:WaitForChild("Templates")
	local settingsList = settingsFrame:WaitForChild("List"):WaitForChild("Holder")
	table.insert(shade2,main.TopBar) table.insert(shade1,mainFrame) table.insert(shade2,eventTemplate)
	table.insert(text1,eventTemplate.EventName) table.insert(shade1,eventTemplate.Cmds.Add) table.insert(shade1,cmdTemplate)
	table.insert(text1,cmdTemplate.TextBox) table.insert(shade2,cmdTemplate.Delete) table.insert(shade2,cmdTemplate.Settings)
	table.insert(scroll,mainFrame.List) table.insert(shade1,settingsFrame) table.insert(shade2,settingsFrame.Line)
	table.insert(shade2,settingsFrame.Close) table.insert(scroll,settingsFrame.List) table.insert(shade2,settingsTemplates.DelayEditor.Secs)
	table.insert(text1,settingsTemplates.DelayEditor.Secs) table.insert(text1,settingsTemplates.DelayEditor.Secs.Label) table.insert(text1,settingsTemplates.Players.Title)
	table.insert(shade3,settingsTemplates.Players.CustomButton) table.insert(shade2,settingsTemplates.Players.Custom) table.insert(text1,settingsTemplates.Players.Custom)
	table.insert(shade3,settingsTemplates.Players.Any.Button) table.insert(shade3,settingsTemplates.Players.Me.Button) table.insert(text1,settingsTemplates.Players.Any)
	table.insert(text1,settingsTemplates.Players.Me) table.insert(text1,settingsTemplates.Strings.Title) table.insert(text1,settingsTemplates.Strings.Any)
	table.insert(shade3,settingsTemplates.Strings.Any.Button) table.insert(shade3,settingsTemplates.Strings.CustomButton) table.insert(text1,settingsTemplates.Strings.Custom)
	table.insert(shade2,settingsTemplates.Strings.Custom)
	table.insert(text1,settingsTemplates.Players.Me) table.insert(text1,settingsTemplates.Numbers.Title) table.insert(text1,settingsTemplates.Numbers.Any)
	table.insert(shade3,settingsTemplates.Numbers.Any.Button) table.insert(shade3,settingsTemplates.Numbers.CustomButton) table.insert(text1,settingsTemplates.Numbers.Custom)
	table.insert(shade2,settingsTemplates.Numbers.Custom)

	local tweenInf = TweenInfo.new(0.25,Enum.EasingStyle.Quart,Enum.EasingDirection.Out)

	local currentlyEditingCmd = nil

	settingsFrame:WaitForChild("Close").MouseButton1Click:Connect(function()
		settingsFrame:TweenPosition(UDim2.new(0,-150,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
	end)

	local function resizeList()
		local size = 0

		for i,v in pairs(eventListHolder:GetChildren()) do
			if v.Name == "EventTemplate" then
				size = size + 20
				if v.Expand.Rotation == 90 then
					size = size + 20*(1+(#events[v.EventName:GetAttribute("RawName")].commands or 0))
				end
			end
		end

		TweenService:Create(eventList,tweenInf,{CanvasSize = UDim2.new(0,0,0,size)}):Play()

		if size > eventList.AbsoluteSize.Y then
			eventListHolder.Size = UDim2.new(1,-8,1,0)
		else
			eventListHolder.Size = UDim2.new(1,0,1,0)
		end
	end

	local function resizeSettingsList()
		local size = 0

		for i,v in pairs(settingsList:GetChildren()) do
			if v:IsA("Frame") then
				size = size + v.AbsoluteSize.Y
			end
		end

		settingsList.Parent.CanvasSize = UDim2.new(0,0,0,size)

		if size > settingsList.Parent.AbsoluteSize.Y then
			settingsList.Size = UDim2.new(1,-8,1,0)
		else
			settingsList.Size = UDim2.new(1,0,1,0)
		end
	end

	local function setupCheckbox(button,callback)
		local enabled = button.On.BackgroundTransparency == 0

		local function update()
			button.On.BackgroundTransparency = (enabled and 0 or 1)
		end

		button.On.MouseButton1Click:Connect(function()
			enabled = not enabled
			update()
			if callback then callback(enabled) end
		end)

		return {
			Toggle = function(nocall) enabled = not enabled update() if not nocall and callback then callback(enabled) end end,
			Enable = function(nocall) if enabled then return end enabled = true update()if not nocall and callback then callback(enabled) end end,
			Disable = function(nocall) if not enabled then return end enabled = false update()if not nocall and callback then callback(enabled) end end,
			IsEnabled = function() return enabled end
		}
	end

	local function openSettingsEditor(event,cmd)
		currentlyEditingCmd = cmd

		for i,v in pairs(settingsList:GetChildren()) do if v:IsA("Frame") then v:Destroy() end end

		local delayEditor = settingsTemplates.DelayEditor:Clone()
		delayEditor.Secs.FocusLost:Connect(function()
			cmd[3] = tonumber(delayEditor.Secs.Text) or 0
			delayEditor.Secs.Text = cmd[3]
			if onEdited then onEdited() end
		end)
		delayEditor.Secs.Text = cmd[3]
		delayEditor.Visible = true
		table.insert(shade2,delayEditor.Secs)
		table.insert(text1,delayEditor.Secs)
		table.insert(text1,delayEditor.Secs.Label)
		delayEditor.Parent = settingsList

		for i,v in pairs(event.sets) do
			if v.Type == "Player" then
				local template = settingsTemplates.Players:Clone()
				template.Title.Text = v.Name or "Player"

				local me,any,custom

				me = setupCheckbox(template.Me.Button,function(on)
					if not on then return end
					any.Disable()
					custom.Disable()
					cmd[2][i] = 0
					if onEdited then onEdited() end
				end)

				any = setupCheckbox(template.Any.Button,function(on)
					if not on then return end
					me.Disable()
					custom.Disable()
					cmd[2][i] = 1
					if onEdited then onEdited() end
				end)

				local customTextBox = template.Custom
				custom = setupCheckbox(template.CustomButton,function(on)
					if not on then return end
					me.Disable()
					any.Disable()
					cmd[2][i] = customTextBox.Text
					if onEdited then onEdited() end
				end)

				ViewportTextBox.convert(customTextBox)
				customTextBox.FocusLost:Connect(function()
					if custom:IsEnabled() then
						cmd[2][i] = customTextBox.Text
						if onEdited then onEdited() end
					end
				end)

				local cVal = cmd[2][i]
				if cVal == 0 then
					me:Enable()
				elseif cVal == 1 then
					any:Enable()
				else
					custom:Enable()
					customTextBox.Text = cVal
				end

				template.Visible = true
				table.insert(text1,template.Title)
				table.insert(shade3,template.CustomButton)
				table.insert(shade3,template.Any.Button)
				table.insert(shade3,template.Me.Button)
				table.insert(text1,template.Any)
				table.insert(text1,template.Me)
				template.Parent = settingsList
			elseif v.Type == "String" then
				local template = settingsTemplates.Strings:Clone()
				template.Title.Text = v.Name or "String"

				local any,custom

				any = setupCheckbox(template.Any.Button,function(on)
					if not on then return end
					custom.Disable()
					cmd[2][i] = 0
					if onEdited then onEdited() end
				end)

				local customTextBox = template.Custom
				custom = setupCheckbox(template.CustomButton,function(on)
					if not on then return end
					any.Disable()
					cmd[2][i] = customTextBox.Text
					if onEdited then onEdited() end
				end)

				ViewportTextBox.convert(customTextBox)
				customTextBox.FocusLost:Connect(function()
					if custom:IsEnabled() then
						cmd[2][i] = customTextBox.Text
						if onEdited then onEdited() end
					end
				end)

				local cVal = cmd[2][i]
				if cVal == 0 then
					any:Enable()
				else
					custom:Enable()
					customTextBox.Text = cVal
				end

				template.Visible = true
				table.insert(text1,template.Title)
				table.insert(text1,template.Any)
				table.insert(shade3,template.Any.Button)
				table.insert(shade3,template.CustomButton)
				template.Parent = settingsList
			elseif v.Type == "Number" then
				local template = settingsTemplates.Numbers:Clone()
				template.Title.Text = v.Name or "Number"

				local any,custom

				any = setupCheckbox(template.Any.Button,function(on)
					if not on then return end
					custom.Disable()
					cmd[2][i] = 0
					if onEdited then onEdited() end
				end)

				local customTextBox = template.Custom
				custom = setupCheckbox(template.CustomButton,function(on)
					if not on then return end
					any.Disable()
					cmd[2][i] = customTextBox.Text
					if onEdited then onEdited() end
				end)

				ViewportTextBox.convert(customTextBox)
				customTextBox.FocusLost:Connect(function()
					cmd[2][i] = tonumber(customTextBox.Text) or 0
					customTextBox.Text = cmd[2][i]
					if custom:IsEnabled() then
						if onEdited then onEdited() end
					end
				end)

				local cVal = cmd[2][i]
				if cVal == 0 then
					any:Enable()
				else
					custom:Enable()
					customTextBox.Text = cVal
				end

				template.Visible = true
				table.insert(text1,template.Title)
				table.insert(text1,template.Any)
				table.insert(shade3,template.Any.Button)
				table.insert(shade3,template.CustomButton)
				template.Parent = settingsList
			end
		end
		resizeSettingsList()
		settingsFrame:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
	end

	local function defaultSettings(ev)
		local res = {}

		for i,v in pairs(ev.sets) do
			if v.Type == "Player" then
				res[#res+1] = v.Default or 0
			elseif v.Type == "String" then
				res[#res+1] = v.Default or 0
			elseif v.Type == "Number" then
				res[#res+1] = v.Default or 0
			end
		end

		return res
	end

	local function refreshList()
		for i,v in pairs(eventListHolder:GetChildren()) do if v:IsA("Frame") then v:Destroy() end end

		for name,event in pairs(events) do
			local eventF = eventTemplate:Clone()
			eventF.EventName.Text = name
			eventF.Visible = true
			eventF.EventName:SetAttribute("RawName", name)
			table.insert(shade2,eventF)
			table.insert(text1,eventF.EventName)
			table.insert(shade1,eventF.Cmds.Add)

			local expanded = false
			eventF.Expand.MouseButton1Down:Connect(function()
				expanded = not expanded
				eventF:TweenSize(UDim2.new(1,0,0,20 + (expanded and 20*#eventF.Cmds.Holder:GetChildren() or 0)),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
				eventF.Expand.Rotation = expanded and 90 or 0
				resizeList()
			end)

			local function refreshCommands()
				for i,v in pairs(eventF.Cmds.Holder:GetChildren()) do
					if v.Name == "CmdTemplate" then
						v:Destroy()
					end
				end

				eventF.EventName.Text = name..(#event.commands > 0 and " ("..#event.commands..")" or "")

				for i,cmd in pairs(event.commands) do
					local cmdF = cmdTemplate:Clone()
					local cmdTextBox = cmdF.TextBox
					ViewportTextBox.convert(cmdTextBox)
					cmdTextBox.Text = cmd[1]
					cmdF.Visible = true
					table.insert(shade1,cmdF)
					table.insert(shade2,cmdF.Delete)
					table.insert(shade2,cmdF.Settings)

					cmdTextBox.FocusLost:Connect(function()
						event.commands[i] = {cmdTextBox.Text,cmd[2],cmd[3]}
						if onEdited then onEdited() end
					end)

					cmdF.Settings.MouseButton1Click:Connect(function()
						openSettingsEditor(event,cmd)
					end)

					cmdF.Delete.MouseButton1Click:Connect(function()
						table.remove(event.commands,i)
						refreshCommands()
						resizeList()

						if currentlyEditingCmd == cmd then
							settingsFrame:TweenPosition(UDim2.new(0,-150,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
						end
						if onEdited then onEdited() end
					end)

					cmdF.Parent = eventF.Cmds.Holder
				end

				eventF:TweenSize(UDim2.new(1,0,0,20 + (expanded and 20*#eventF.Cmds.Holder:GetChildren() or 0)),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
			end

			local newBox = eventF.Cmds.Add.TextBox
			ViewportTextBox.convert(newBox)
			newBox.FocusLost:Connect(function(enter)
				if enter then
					event.commands[#event.commands+1] = {newBox.Text,defaultSettings(event),0}
					newBox.Text = ""

					refreshCommands()
					resizeList()
					if onEdited then onEdited() end
				end
			end)

			--eventF:GetPropertyChangedSignal("AbsoluteSize"):Connect(resizeList)

			eventF.Parent = eventListHolder

			refreshCommands()
		end

		resizeList()
	end

	local function saveData()
		local result = {}
		for i,v in pairs(events) do
			result[i] = v.commands
		end
		return HttpService:JSONEncode(result)
	end

	local function loadData(str)
		local data = HttpService:JSONDecode(str)
		for i,v in pairs(data) do
			if events[i] then
				events[i].commands = v
			end
		end
	end

	local function addCmd(event,data)
		table.insert(events[event].commands,data)
	end

	local function setOnEdited(f)
		if type(f) == "function" then
			onEdited = f
		end
	end

	main.TopBar.Close.MouseButton1Click:Connect(function()
		main:TweenPosition(UDim2.new(0.5,-175,0,-500), "InOut", "Quart", 0.5, true, nil)
	end)
	dragGUI(main)
	main.Parent = ScaledHolder

	return {
		RegisterEvent = registerEvent,
		FireEvent = fireEvent,
		Refresh = refreshList,
		SaveData = saveData,
		LoadData = loadData,
		AddCmd = addCmd,
		Frame = main,
		SetOnEdited = setOnEdited
	}
end)()

reference = (function()
	local main = create({
		{1,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Name="Main",Position=UDim2.new(0.5,-250,0,-500),Size=UDim2.new(0,500,0,20),ZIndex=10,}},
		{2,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="TopBar",Parent={1},Size=UDim2.new(1,0,0,20),ZIndex=10,}},
		{3,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={2},Size=UDim2.new(1,0,0.94999998807907,0),Text="Reference",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{4,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Close",Parent={2},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{5,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5054663650",Parent={4},Position=UDim2.new(0,5,0,5),Size=UDim2.new(0,10,0,10),ZIndex=10,}},
		{6,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderSizePixel=0,Name="Content",Parent={1},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,0,300),ZIndex=10,}},
		{7,"ScrollingFrame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage="rbxasset://textures/ui/Scroll/scroll-middle.png",CanvasSize=UDim2.new(0,0,0,1313),Name="List",Parent={6},ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,0,1,0),TopImage="rbxasset://textures/ui/Scroll/scroll-middle.png",VerticalScrollBarInset=2,ZIndex=10,}},
		{8,"UIListLayout",{Parent={7},SortOrder=2,}},
		{9,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,429),ZIndex=10,}},
		{10,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={9},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Special Player Cases",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{11,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={9},Position=UDim2.new(0,8,0,25),Size=UDim2.new(1,-8,0,20),Text="These keywords can be used to quickly select groups of players in commands:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{12,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={9},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{13,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Cases",Parent={9},Position=UDim2.new(0,8,0,55),Size=UDim2.new(1,-16,0,342),ZIndex=10,}},
		{14,"UIListLayout",{Parent={13},SortOrder=2,}},
		{15,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-4,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{16,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={15},Size=UDim2.new(1,0,1,0),Text="all",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{17,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={15},Position=UDim2.new(0,15,0,0),Size=UDim2.new(1,0,1,0),Text="- includes everyone",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{18,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-3,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{19,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={18},Size=UDim2.new(1,0,1,0),Text="others",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{20,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={18},Position=UDim2.new(0,37,0,0),Size=UDim2.new(1,0,1,0),Text="- includes everyone except you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{21,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-2,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{22,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={21},Size=UDim2.new(1,0,1,0),Text="me",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{23,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={21},Position=UDim2.new(0,19,0,0),Size=UDim2.new(1,0,1,0),Text="- includes your player only",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{24,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{25,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={24},Size=UDim2.new(1,0,1,0),Text="#[number]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{26,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={24},Position=UDim2.new(0,59,0,0),Size=UDim2.new(1,0,1,0),Text="- gets a specified amount of random players",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{27,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{28,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={27},Size=UDim2.new(1,0,1,0),Text="random",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{29,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={27},Position=UDim2.new(0,44,0,0),Size=UDim2.new(1,0,1,0),Text="- affects a random player",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{30,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{31,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={30},Size=UDim2.new(1,0,1,0),Text="%[team name]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{32,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={30},Position=UDim2.new(0,78,0,0),Size=UDim2.new(1,0,1,0),Text="- includes everyone on a given team",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{33,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{34,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={33},Size=UDim2.new(1,0,1,0),Text="allies / team",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{35,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={33},Position=UDim2.new(0,63,0,0),Size=UDim2.new(1,0,1,0),Text="- players who are on your team",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{36,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{37,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={36},Size=UDim2.new(1,0,1,0),Text="enemies / nonteam",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{38,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={36},Position=UDim2.new(0,101,0,0),Size=UDim2.new(1,0,1,0),Text="- players who are not on your team",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{39,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{40,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={39},Size=UDim2.new(1,0,1,0),Text="friends",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{41,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={39},Position=UDim2.new(0,40,0,0),Size=UDim2.new(1,0,1,0),Text="- anyone who is friends with you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{42,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{43,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={42},Size=UDim2.new(1,0,1,0),Text="nonfriends",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{44,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={42},Position=UDim2.new(0,61,0,0),Size=UDim2.new(1,0,1,0),Text="- anyone who is not friends with you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{45,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{46,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={45},Size=UDim2.new(1,0,1,0),Text="guests",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{47,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={45},Position=UDim2.new(0,36,0,0),Size=UDim2.new(1,0,1,0),Text="- guest players (obsolete)",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{48,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{49,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={48},Size=UDim2.new(1,0,1,0),Text="bacons",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{50,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={48},Position=UDim2.new(0,40,0,0),Size=UDim2.new(1,0,1,0),Text="- anyone with the \"bacon\" or pal hair",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{51,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{52,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={51},Size=UDim2.new(1,0,1,0),Text="age[number]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{53,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={51},Position=UDim2.new(0,71,0,0),Size=UDim2.new(1,0,1,0),Text="- includes anyone below or at the given age",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{54,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{55,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={54},Size=UDim2.new(1,0,1,0),Text="rad[number]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{56,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={54},Position=UDim2.new(0,70,0,0),Size=UDim2.new(1,0,1,0),Text="- includes anyone within the given radius",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{57,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{58,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={57},Size=UDim2.new(1,0,1,0),Text="nearest",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{59,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={57},Position=UDim2.new(0,43,0,0),Size=UDim2.new(1,0,1,0),Text="- gets the closest player to you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{60,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{61,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={60},Size=UDim2.new(1,0,1,0),Text="farthest",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{62,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={60},Position=UDim2.new(0,46,0,0),Size=UDim2.new(1,0,1,0),Text="- gets the farthest player from you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{63,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{64,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={63},Size=UDim2.new(1,0,1,0),Text="group[ID]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{65,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={63},Position=UDim2.new(0,55,0,0),Size=UDim2.new(1,0,1,0),Text="- gets players who are in a certain group",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{66,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{67,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={66},Size=UDim2.new(1,0,1,0),Text="alive",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{68,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={66},Position=UDim2.new(0,27,0,0),Size=UDim2.new(1,0,1,0),Text="- gets players who are alive",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{69,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{70,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={69},Size=UDim2.new(1,0,1,0),Text="dead",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{71,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={69},Position=UDim2.new(0,29,0,0),Size=UDim2.new(1,0,1,0),Text="- gets players who are dead",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{72,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-1,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
		{73,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={72},Size=UDim2.new(1,0,1,0),Text="@username",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{74,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={72},Position=UDim2.new(0,66,0,0),Size=UDim2.new(1,0,1,0),Text="- searches for players by username only (ignores displaynames)",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{75,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,180),ZIndex=10,}},
		{76,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={75},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Various Operators",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{77,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={75},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{78,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={75},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,16),Text="Use commas to separate multiple expressions:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{79,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={75},Position=UDim2.new(0,8,0,75),Size=UDim2.new(1,-8,0,16),Text="Use - to exclude, and + to include players in your expression:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{80,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={75},Position=UDim2.new(0,8,0,91),Size=UDim2.new(1,-8,0,16),Text=";locate %blue-friends (gets players in blue team who aren't your friends)",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{81,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={75},Position=UDim2.new(0,8,0,46),Size=UDim2.new(1,-8,0,16),Text=";locate noob,noob2,bob",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{82,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={75},Position=UDim2.new(0,8,0,120),Size=UDim2.new(1,-8,0,16),Text="Put ! before a command to run it with the last arguments it was ran with:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{83,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={75},Position=UDim2.new(0,8,0,136),Size=UDim2.new(1,-8,0,32),Text="After running ;offset 0 100 0,  you can run !offset anytime to repeat that command with the same arguments that were used to run it last time",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{84,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,154),ZIndex=10,}},
		{85,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={84},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Command Looping",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{86,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={84},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,20),Text="Form: [How many times it loops]^[delay (optional)]^[command]",TextColor3=Color3.new(1,1,1),TextSize=15,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{87,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={84},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{88,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={84},Position=UDim2.new(0,8,0,50),Size=UDim2.new(1,-8,0,20),Text="Use the 'breakloops' command to stop all running loops.",TextColor3=Color3.new(1,1,1),TextSize=15,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{89,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={84},Position=UDim2.new(0,8,0,80),Size=UDim2.new(1,-8,0,16),Text="Examples:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{90,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={84},Position=UDim2.new(0,8,0,98),Size=UDim2.new(1,-8,0,42),Text=";5^btools - gives you 5 sets of btools\n;10^3^drophats - drops your hats every 3 seconds 10 times\n;inf^0.1^animspeed 100 - infinitely loops your animation speed to 100",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{91,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,120),ZIndex=10,}},
		{92,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={91},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Execute Multiple Commands at Once",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{93,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={91},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,20),Text="You can execute multiple commands at once using \"\\\"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{94,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={91},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{95,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={91},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,-8,0,16),Text="Examples:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{96,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={91},Position=UDim2.new(0,8,0,78),Size=UDim2.new(1,-8,0,32),Text=";drophats\\respawn - drops your hats and respawns you\n;enable inventory\\enable playerlist\\refresh - enables those coregui items and refreshes you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{97,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,75),ZIndex=10,}},
		{98,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={97},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Browse Command History",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{99,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={97},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text="While focused on the command bar, you can use the up and down arrow keys to browse recently used commands",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{100,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={97},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{101,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,75),ZIndex=10,}},
		{102,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={101},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Autocomplete in the Command Bar",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{103,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={101},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text="While focused on the command bar, you can use the tab key to insert the top suggested command into the command bar.",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{104,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={101},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{105,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,175),ZIndex=10,}},
		{106,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={105},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Using Event Binds",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{107,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={105},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text="Use event binds to set up commands that get executed when certain events happen. You can edit the conditions for an event command to run (such as which player triggers it).",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{108,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={105},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
		{109,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={105},Position=UDim2.new(0,8,0,70),Size=UDim2.new(1,-8,0,48),Text="Some events may send arguments; you can use them in your event command by using $ followed by the argument number ($1, $2, etc). You can find out the order and types of these arguments by looking at the settings of the event command.",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{110,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={105},Position=UDim2.new(0,8,0,130),Size=UDim2.new(1,-8,0,16),Text="Example:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{111,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={105},Position=UDim2.new(0,8,0,148),Size=UDim2.new(1,-8,0,16),Text="Setting up 'goto $1' on the OnChatted event will teleport you to any player that chats.",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{112,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,105),ZIndex=10,}},
		{113,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={112},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Get Further Help",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
		{114,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={112},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text="You can join the Discord server to get support with IY,  and read up on more documentation such as the Plugin API.",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{115,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={112},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),Visible=false,ZIndex=10,}},
		{116,"TextButton",{BackgroundColor3=Color3.new(0.48627451062202,0.61960786581039,0.85098040103912),BorderColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),Font=4,Name="InviteButton",Parent={112},Position=UDim2.new(0,5,0,75),Size=UDim2.new(1,-10,0,25),Text="Copy Discord Invite Link (https://discord.gg/78ZuWSq)",TextColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),TextSize=16,ZIndex=10,}},
	})
	for i,v in pairs(main.Content.List:GetDescendants()) do
		if v:IsA("TextLabel") then
			table.insert(text1,v)
		end
	end
	table.insert(scroll,main.Content.List)
	table.insert(shade1,main.Content)
	table.insert(shade2,main.TopBar)
	main.Name = randomString()
	main.TopBar.Close.MouseButton1Click:Connect(function()
		main:TweenPosition(UDim2.new(0.5,-250,0,-500), "InOut", "Quart", 0.5, true, nil)
	end)
	local inviteButton = main:FindFirstChild("InviteButton",true)
	local lastPress = nil
	inviteButton.MouseButton1Click:Connect(function()
		if everyClipboard then
			toClipboard("https://discord.gg/78ZuWSq")
			inviteButton.Text = "Copied"
		else
			inviteButton.Text = "No Clipboard Function, type out the link"
		end
		local pressTime = tick()
		lastPress = pressTime
		wait(2)
		if lastPress ~= pressTime then return end
		inviteButton.Text = "Copy Discord Invite Link (https://discord.gg/78ZuWSq)"
	end)
	dragGUI(main)
	main.Parent = ScaledHolder

	ReferenceButton.MouseButton1Click:Connect(function()
		main:TweenPosition(UDim2.new(0.5,-250,0.5,-150), "InOut", "Quart", 0.5, true, nil)
	end)
end)()

currentShade1 = Color3.fromRGB(36, 36, 37)
currentShade2 = Color3.fromRGB(46, 46, 47)
currentShade3 = Color3.fromRGB(78, 78, 79)
currentText1 = Color3.new(1, 1, 1)
currentText2 = Color3.new(0, 0, 0)
currentScroll = Color3.fromRGB(78,78,79)

defaultGuiScale = IsOnMobile and 0.9 or 1
defaultsettings = {
	prefix = ';';
	StayOpen = false;
	guiScale = defaultGuiScale;
	espTransparency = 0.3;
	keepIY = true;
	logsEnabled = false;
	jLogsEnabled = false;
	aliases = {};
	binds = {};
	WayPoints = {};
	PluginsTable = {};
	currentShade1 = {currentShade1.R,currentShade1.G,currentShade1.B};
	currentShade2 = {currentShade2.R,currentShade2.G,currentShade2.B};
	currentShade3 = {currentShade3.R,currentShade3.G,currentShade3.B};
	currentText1 = {currentText1.R,currentText1.G,currentText1.B};
	currentText2 = {currentText2.R,currentText2.G,currentText2.B};
	currentScroll = {currentScroll.R,currentScroll.G,currentScroll.B};
	eventBinds = eventEditor.SaveData()
}

defaults = HttpService:JSONEncode(defaultsettings)
nosaves = false
useFactorySettings = function()
    prefix = ';'
    StayOpen = false
    guiScale = defaultGuiScale
    KeepInfYield = true
    espTransparency = 0.3
    logsEnabled = false
    jLogsEnabled = false
    logsWebhook = nil
    aliases = {}
    binds = {}
    WayPoints = {}
    PluginsTable = {}
end

createPopup = function(text)
    local FileError = Instance.new("Frame")
    local background = Instance.new("Frame")
    local Directions = Instance.new("TextLabel")
    local shadow = Instance.new("Frame")
    local PopupText = Instance.new("TextLabel")
    local Exit = Instance.new("TextButton")
    local ExitImage = Instance.new("ImageLabel")

    FileError.Name = randomString()
    FileError.Parent = ScaledHolder
    FileError.Active = true
    FileError.BackgroundTransparency = 1
    FileError.Position = UDim2.new(0.5, -180, 0, 290)
    FileError.Size = UDim2.new(0, 360, 0, 20)
    FileError.ZIndex = 10

    background.Name = "background"
    background.Parent = FileError
    background.Active = true
    background.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
    background.BorderSizePixel = 0
    background.Position = UDim2.new(0, 0, 0, 20)
    background.Size = UDim2.new(0, 360, 0, 205)
    background.ZIndex = 10

    Directions.Name = "Directions"
    Directions.Parent = background
    Directions.BackgroundTransparency = 1
    Directions.BorderSizePixel = 0
    Directions.Position = UDim2.new(0, 10, 0, 10)
    Directions.Size = UDim2.new(0, 340, 0, 185)
    Directions.Font = Enum.Font.SourceSans
    Directions.TextSize = 14
    Directions.Text = text
    Directions.TextColor3 = Color3.new(1, 1, 1)
    Directions.TextWrapped = true
    Directions.TextXAlignment = Enum.TextXAlignment.Left
    Directions.TextYAlignment = Enum.TextYAlignment.Top
    Directions.ZIndex = 10

    shadow.Name = "shadow"
    shadow.Parent = FileError
    shadow.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
    shadow.BorderSizePixel = 0
    shadow.Size = UDim2.new(0, 360, 0, 20)
    shadow.ZIndex = 10

    PopupText.Name = "PopupText"
    PopupText.Parent = shadow
    PopupText.BackgroundTransparency = 1
    PopupText.Size = UDim2.new(1, 0, 0.95, 0)
    PopupText.ZIndex = 10
    PopupText.Font = Enum.Font.SourceSans
    PopupText.TextSize = 14
    PopupText.Text = "File Error"
    PopupText.TextColor3 = Color3.new(1, 1, 1)
    PopupText.TextWrapped = true

    Exit.Name = "Exit"
    Exit.Parent = shadow
    Exit.BackgroundTransparency = 1
    Exit.Position = UDim2.new(1, -20, 0, 0)
    Exit.Size = UDim2.new(0, 20, 0, 20)
    Exit.Text = ""
    Exit.ZIndex = 10

    ExitImage.Parent = Exit
    ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
    ExitImage.BackgroundTransparency = 1
    ExitImage.Position = UDim2.new(0, 5, 0, 5)
    ExitImage.Size = UDim2.new(0, 10, 0, 10)
    ExitImage.Image = "rbxassetid://5054663650"
    ExitImage.ZIndex = 10

    Exit.MouseButton1Click:Connect(function()
        FileError:Destroy()
    end)
end

local loadedEventData = nil
local jsonAttempts = 0
function saves()
    if writefileExploit() and readfileExploit() and jsonAttempts < 10 then
        local readSuccess, out = readfile("IY_FE.iy", true)
        if readSuccess then
            if out ~= nil and tostring(out):gsub("%s", "") ~= "" then
                local success, response = pcall(function()
                    local json = HttpService:JSONDecode(out)
                    if vtype(json.prefix, "string") then prefix = json.prefix else prefix = ';' end
                    if vtype(json.StayOpen, "boolean") then StayOpen = json.StayOpen else StayOpen = false end
                    if vtype(json.guiScale, "number") then guiScale = json.guiScale else guiScale = defaultGuiScale end
                    if vtype(json.keepIY, "boolean") then KeepInfYield = json.keepIY else KeepInfYield = true end
                    if vtype(json.espTransparency, "number") then espTransparency = json.espTransparency else espTransparency = 0.3 end
                    if vtype(json.logsEnabled, "boolean") then logsEnabled = json.logsEnabled else logsEnabled = false end
                    if vtype(json.jLogsEnabled, "boolean") then jLogsEnabled = json.jLogsEnabled else jLogsEnabled = false end
                    if vtype(json.logsWebhook, "string") then logsWebhook = json.logsWebhook else logsWebhook = nil end
                    if vtype(json.aliases, "table") then aliases = json.aliases else aliases = {} end
                    if vtype(json.binds, "table") then binds = json.binds else binds = {} end
                    if vtype(json.spawnCmds, "table") then spawnCmds = json.spawnCmds end
                    if vtype(json.WayPoints, "table") then AllWaypoints = json.WayPoints else WayPoints = {} AllWaypoints = {} end
                    if vtype(json.PluginsTable, "table") then PluginsTable = json.PluginsTable else PluginsTable = {} end
                    if vtype(json.currentShade1, "table") then currentShade1 = Color3.new(json.currentShade1[1],json.currentShade1[2],json.currentShade1[3]) end
                    if vtype(json.currentShade2, "table") then currentShade2 = Color3.new(json.currentShade2[1],json.currentShade2[2],json.currentShade2[3]) end
                    if vtype(json.currentShade3, "table") then currentShade3 = Color3.new(json.currentShade3[1],json.currentShade3[2],json.currentShade3[3]) end
                    if vtype(json.currentText1, "table") then currentText1 = Color3.new(json.currentText1[1],json.currentText1[2],json.currentText1[3]) end
                    if vtype(json.currentText2, "table") then currentText2 = Color3.new(json.currentText2[1],json.currentText2[2],json.currentText2[3]) end
                    if vtype(json.currentScroll, "table") then currentScroll = Color3.new(json.currentScroll[1],json.currentScroll[2],json.currentScroll[3]) end
                    if vtype(json.eventBinds, "string") then loadedEventData = json.eventBinds end
                end)
                if not success then
                    jsonAttempts = jsonAttempts + 1
                    warn("Save Json Error:", response)
                    warn("Overwriting Save File")
                    writefile("IY_FE.iy", defaults, true)
                    wait()
                    saves()
                end
            else
                writefile("IY_FE.iy", defaults, true)
                wait()
                local dReadSuccess, dOut = readfile("IY_FE.iy", true)
                if dReadSuccess and dOut ~= nil and tostring(dOut):gsub("%s", "") ~= "" then
                    saves()
                else
                    nosaves = true
                    useFactorySettings()
                    createPopup("There was a problem writing a save file to your PC.\n\nPlease contact the developer/support team for your exploit and tell them writefile/readfile is not working.\n\nYour settings, keybinds, waypoints, and aliases will not save if you continue.\n\nThings to try:\n> Make sure a 'workspace' folder is located in the same folder as your exploit\n> If your exploit is inside of a zip/rar file, extract it.\n> Rejoin the game and try again or restart your PC and try again.")
                end
            end
        else
            writefile("IY_FE.iy", defaults, true)
            wait()
            local dReadSuccess, dOut = readfile("IY_FE.iy", true)
            if dReadSuccess and dOut ~= nil and tostring(dOut):gsub("%s", "") ~= "" then
                saves()
            else
                nosaves = true
                useFactorySettings()
                createPopup("There was a problem writing a save file to your PC.\n\nPlease contact the developer/support team for your exploit and tell them writefile/readfile is not working.\n\nYour settings, keybinds, waypoints, and aliases will not save if you continue.\n\nThings to try:\n> Make sure a 'workspace' folder is located in the same folder as your exploit\n> If your exploit is inside of a zip/rar file, extract it.\n> Rejoin the game and try again or restart your PC and try again.")
            end
        end
    else
        if jsonAttempts >= 10 then
            nosaves = true
            useFactorySettings()
            createPopup("Sorry, we have attempted to parse your save file, but it is unreadable!\n\nInfinite Yield is now using factory settings until your exploit's file system works.\n\nYour save file has not been deleted.")
        else
            nosaves = true
            useFactorySettings()
        end
    end
end

saves()

function updatesaves()
	if nosaves == false and writefileExploit() then
		local update = {
			prefix = prefix;
			StayOpen = StayOpen;
			guiScale = guiScale;
			keepIY = KeepInfYield;
			espTransparency = espTransparency;
			logsEnabled = logsEnabled;
			jLogsEnabled = jLogsEnabled;
			logsWebhook = logsWebhook;
			aliases = aliases;
			binds = binds or {};
			WayPoints = AllWaypoints;
			PluginsTable = PluginsTable;
			currentShade1 = {currentShade1.R,currentShade1.G,currentShade1.B};
			currentShade2 = {currentShade2.R,currentShade2.G,currentShade2.B};
			currentShade3 = {currentShade3.R,currentShade3.G,currentShade3.B};
			currentText1 = {currentText1.R,currentText1.G,currentText1.B};
			currentText2 = {currentText2.R,currentText2.G,currentText2.B};
			currentScroll = {currentScroll.R,currentScroll.G,currentScroll.B};
			eventBinds = eventEditor.SaveData()
		}
		writefileCooldown("IY_FE.iy", HttpService:JSONEncode(update))
	end
end

eventEditor.SetOnEdited(updatesaves)

pWayPoints = {}
WayPoints = {}

if #AllWaypoints > 0 then
	for i = 1, #AllWaypoints do
		if not AllWaypoints[i].GAME or AllWaypoints[i].GAME == PlaceId then
			WayPoints[#WayPoints + 1] = {NAME = AllWaypoints[i].NAME, COORD = {AllWaypoints[i].COORD[1], AllWaypoints[i].COORD[2], AllWaypoints[i].COORD[3]}, GAME = AllWaypoints[i].GAME}
		end
	end
end

if type(binds) ~= "table" then binds = {} end

function Time()
	local HOUR = math.floor((tick() % 86400) / 3600)
	local MINUTE = math.floor((tick() % 3600) / 60)
	local SECOND = math.floor(tick() % 60)
	local AP = HOUR > 11 and 'PM' or 'AM'
	HOUR = (HOUR % 12 == 0 and 12 or HOUR % 12)
	HOUR = HOUR < 10 and '0' .. HOUR or HOUR
	MINUTE = MINUTE < 10 and '0' .. MINUTE or MINUTE
	SECOND = SECOND < 10 and '0' .. SECOND or SECOND
	return HOUR .. ':' .. MINUTE .. ':' .. SECOND .. ' ' .. AP
end

PrefixBox.Text = prefix
local SettingsOpen = false
local isHidden = false

if StayOpen == false then
	On.BackgroundTransparency = 1
else
	On.BackgroundTransparency = 0
end

if logsEnabled then
	Toggle.Text = 'Enabled'
else
	Toggle.Text = 'Disabled'
end

if jLogsEnabled then
	Toggle_2.Text = 'Enabled'
else
	Toggle_2.Text = 'Disabled'
end

function maximizeHolder()
	if StayOpen == false then
		Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, -220), "InOut", "Quart", 0.2, true, nil)
	end
end

minimizeNum = -20
function minimizeHolder()
	if StayOpen == false then
		Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, minimizeNum), "InOut", "Quart", 0.5, true, nil)
	end
end

function cmdbarHolder()
	if StayOpen == false then
		Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, -45), "InOut", "Quart", 0.5, true, nil)
	end
end

pinNotification = nil
local notifyCount = 0
function notify(text,text2,length)
	task.spawn(function()
		local LnotifyCount = notifyCount+1
		local notificationPinned = false
		notifyCount = notifyCount+1
		if pinNotification then pinNotification:Disconnect() end
		pinNotification = PinButton.MouseButton1Click:Connect(function()
			task.spawn(function()
				pinNotification:Disconnect()
				notificationPinned = true
				Title_2.BackgroundTransparency = 1
				wait(0.5)
				Title_2.BackgroundTransparency = 0
			end)
		end)
		Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), "InOut", "Quart", 0.5, true, nil)
		wait(0.6)
		local closepressed = false
		if text2 then
			Title_2.Text = text
			Text_2.Text = text2
		else
			Title_2.Text = 'Notification'
			Text_2.Text = text
		end
		Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, -100), "InOut", "Quart", 0.5, true, nil)
		CloseButton.MouseButton1Click:Connect(function()
			Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), "InOut", "Quart", 0.5, true, nil)
			closepressed = true
			pinNotification:Disconnect()
		end)
		if length and isNumber(length) then
			wait(length)
		else
			wait(10)
		end
		if LnotifyCount == notifyCount then
			if closepressed == false and notificationPinned == false then
				pinNotification:Disconnect()
				Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), "InOut", "Quart", 0.5, true, nil)
			end
			notifyCount = 0
		end
	end)
end

local lastMessage = nil
local lastLabel = nil
local dupeCount = 1
function CreateLabel(Name, Text)
	if lastMessage == Name..Text then
		dupeCount = dupeCount+1
		lastLabel.Text = Time()..' - ['..Name..']: '..Text..' (x'..dupeCount..')'
	else
		if dupeCount > 1 then dupeCount = 1 end
		if #scroll_2:GetChildren() >= 2546 then
			scroll_2:ClearAllChildren()
		end
		local alls = 0
		for i,v in pairs(scroll_2:GetChildren()) do
			if v then
				alls = v.Size.Y.Offset + alls
			end
			if not v then
				alls = 0
			end
		end
		local tl = Instance.new('TextLabel')
		lastMessage = Name..Text
		lastLabel = tl
		tl.Name = Name
		tl.Parent = scroll_2
		tl.ZIndex = 10
		tl.Text = Time().." - ["..Name.."]: "..Text
		tl.Size = UDim2.new(0,322,0,84)
		tl.BackgroundTransparency = 1
		tl.BorderSizePixel = 0
		tl.Font = "SourceSans"
		tl.Position = UDim2.new(-1,0,0,alls)
		tl.TextTransparency = 1
		tl.TextScaled = false
		tl.TextSize = 14
		tl.TextWrapped = true
		tl.TextXAlignment = "Left"
		tl.TextYAlignment = "Top"
		tl.TextColor3 = currentText1
		tl.Size = UDim2.new(0,322,0,tl.TextBounds.Y)
		table.insert(text1,tl)
		scroll_2.CanvasSize = UDim2.new(0,0,0,alls+tl.TextBounds.Y)
		scroll_2.CanvasPosition = Vector2.new(0,scroll_2.CanvasPosition.Y+tl.TextBounds.Y)
		tl:TweenPosition(UDim2.new(0,3,0,alls), 'In', 'Quint', 0.5)
		TweenService:Create(tl, TweenInfo.new(1.25, Enum.EasingStyle.Linear), { TextTransparency = 0 }):Play()
	end
end

function CreateJoinLabel(plr,ID)
	if #scroll_3:GetChildren() >= 2546 then
		scroll_3:ClearAllChildren()
	end
	local infoFrame = Instance.new("Frame")
	local info1 = Instance.new("TextLabel")
	local info2 = Instance.new("TextLabel")
	local ImageLabel_3 = Instance.new("ImageLabel")
	infoFrame.Name = randomString()
	infoFrame.Parent = scroll_3
	infoFrame.BackgroundColor3 = Color3.new(1, 1, 1)
	infoFrame.BackgroundTransparency = 1
	infoFrame.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
	infoFrame.Size = UDim2.new(1, 0, 0, 50)
	info1.Name = randomString()
	info1.Parent = infoFrame
	info1.BackgroundTransparency = 1
	info1.BorderSizePixel = 0
	info1.Position = UDim2.new(0, 45, 0, 0)
	info1.Size = UDim2.new(0, 135, 1, 0)
	info1.ZIndex = 10
	info1.Font = Enum.Font.SourceSans
	info1.FontSize = Enum.FontSize.Size14
	info1.Text = "Username: "..plr.Name.."\nJoined Server: "..Time()
	info1.TextColor3 = Color3.new(1, 1, 1)
	info1.TextWrapped = true
	info1.TextXAlignment = Enum.TextXAlignment.Left
	info2.Name = randomString()
	info2.Parent = infoFrame
	info2.BackgroundTransparency = 1
	info2.BorderSizePixel = 0
	info2.Position = UDim2.new(0, 185, 0, 0)
	info2.Size = UDim2.new(0, 140, 1, -5)
	info2.ZIndex = 10
	info2.Font = Enum.Font.SourceSans
	info2.FontSize = Enum.FontSize.Size14
	info2.Text = "User ID: "..ID.."\nAccount Age: "..plr.AccountAge.."\nJoined Roblox: Loading..."
	info2.TextColor3 = Color3.new(1, 1, 1)
	info2.TextWrapped = true
	info2.TextXAlignment = Enum.TextXAlignment.Left
	info2.TextYAlignment = Enum.TextYAlignment.Center
	ImageLabel_3.Parent = infoFrame
	ImageLabel_3.BackgroundTransparency = 1
	ImageLabel_3.BorderSizePixel = 0
	ImageLabel_3.Size = UDim2.new(0, 45, 1, 0)
	ImageLabel_3.Image = Players:GetUserThumbnailAsync(ID, Enum.ThumbnailType.AvatarThumbnail, Enum.ThumbnailSize.Size420x420)
	scroll_3.CanvasSize = UDim2.new(0, 0, 0, listlayout.AbsoluteContentSize.Y)
	scroll_3.CanvasPosition = Vector2.new(0,scroll_2.CanvasPosition.Y+infoFrame.AbsoluteSize.Y)
	wait()
	local user = game:HttpGet("https://users.roblox.com/v1/users/"..ID)
	local json = HttpService:JSONDecode(user)
	local date = json["created"]:sub(1,10)
	local splitDates = string.split(date,"-")
	info2.Text = string.gsub(info2.Text, "Loading...",splitDates[2].."/"..splitDates[3].."/"..splitDates[1])
end

IYMouse.KeyDown:Connect(function(Key)
	if (Key==prefix) then
		RunService.RenderStepped:Wait()
		Cmdbar:CaptureFocus()
		maximizeHolder()
	end
end)

local lastMinimizeReq = 0
Holder.MouseEnter:Connect(function()
	lastMinimizeReq = 0
	maximizeHolder()
end)

Holder.MouseLeave:Connect(function()
	if not Cmdbar:IsFocused() then
		local reqTime = tick()
		lastMinimizeReq = reqTime
		wait(1)
		if lastMinimizeReq ~= reqTime then return end
		if not Cmdbar:IsFocused() then
			minimizeHolder()
		end
	end
end)

function updateColors(color,ctype)
	if ctype == shade1 then
		for i,v in pairs(shade1) do
			v.BackgroundColor3 = color
		end
		currentShade1 = color
	elseif ctype == shade2 then
		for i,v in pairs(shade2) do
			v.BackgroundColor3 = color
		end
		currentShade2 = color
	elseif ctype == shade3 then
		for i,v in pairs(shade3) do
			v.BackgroundColor3 = color
		end
		currentShade3 = color
	elseif ctype == text1 then
		for i,v in pairs(text1) do
			v.TextColor3 = color
			if v:IsA("TextBox") then
				v.PlaceholderColor3 = color	
			end
		end
		currentText1 = color
	elseif ctype == text2 then
		for i,v in pairs(text2) do
			v.TextColor3 = color
		end
		currentText2 = color
	elseif ctype == scroll then
		for i,v in pairs(scroll) do
			v.ScrollBarImageColor3 = color
		end
		currentScroll = color
	end
end

local colorpickerOpen = false
ColorsButton.MouseButton1Click:Connect(function()
	cache_currentShade1 = currentShade1
	cache_currentShade2 = currentShade2
	cache_currentShade3 = currentShade3
	cache_currentText1 = currentText1
	cache_currentText2 = currentText2
	cache_currentScroll = currentScroll
	if not colorpickerOpen then
		colorpickerOpen = true
		picker = game:GetObjects("rbxassetid://4908465318")[1]
		picker.Name = randomString()
		picker.Parent = ScaledHolder

		local ColorPicker do
			ColorPicker = {}

			ColorPicker.new = function()
				local newMt = setmetatable({},{})

				local pickerGui = picker.ColorPicker
				local pickerTopBar = pickerGui.TopBar
				local pickerExit = pickerTopBar.Exit
				local pickerFrame = pickerGui.Content
				local colorSpace = pickerFrame.ColorSpaceFrame.ColorSpace
				local colorStrip = pickerFrame.ColorStrip
				local previewFrame = pickerFrame.Preview
				local basicColorsFrame = pickerFrame.BasicColors
				local customColorsFrame = pickerFrame.CustomColors
				local defaultButton = pickerFrame.Default
				local cancelButton = pickerFrame.Cancel
				local shade1Button = pickerFrame.Shade1
				local shade2Button = pickerFrame.Shade2
				local shade3Button = pickerFrame.Shade3
				local text1Button = pickerFrame.Text1
				local text2Button = pickerFrame.Text2
				local scrollButton = pickerFrame.Scroll

				local colorScope = colorSpace.Scope
				local colorArrow = pickerFrame.ArrowFrame.Arrow

				local hueInput = pickerFrame.Hue.Input
				local satInput = pickerFrame.Sat.Input
				local valInput = pickerFrame.Val.Input

				local redInput = pickerFrame.Red.Input
				local greenInput = pickerFrame.Green.Input
				local blueInput = pickerFrame.Blue.Input

				local mouse = IYMouse

				local hue,sat,val = 0,0,1
				local red,green,blue = 1,1,1
				local chosenColor = Color3.new(0,0,0)

				local basicColors = {Color3.new(0,0,0),Color3.new(0.66666668653488,0,0),Color3.new(0,0.33333334326744,0),Color3.new(0.66666668653488,0.33333334326744,0),Color3.new(0,0.66666668653488,0),Color3.new(0.66666668653488,0.66666668653488,0),Color3.new(0,1,0),Color3.new(0.66666668653488,1,0),Color3.new(0,0,0.49803924560547),Color3.new(0.66666668653488,0,0.49803924560547),Color3.new(0,0.33333334326744,0.49803924560547),Color3.new(0.66666668653488,0.33333334326744,0.49803924560547),Color3.new(0,0.66666668653488,0.49803924560547),Color3.new(0.66666668653488,0.66666668653488,0.49803924560547),Color3.new(0,1,0.49803924560547),Color3.new(0.66666668653488,1,0.49803924560547),Color3.new(0,0,1),Color3.new(0.66666668653488,0,1),Color3.new(0,0.33333334326744,1),Color3.new(0.66666668653488,0.33333334326744,1),Color3.new(0,0.66666668653488,1),Color3.new(0.66666668653488,0.66666668653488,1),Color3.new(0,1,1),Color3.new(0.66666668653488,1,1),Color3.new(0.33333334326744,0,0),Color3.new(1,0,0),Color3.new(0.33333334326744,0.33333334326744,0),Color3.new(1,0.33333334326744,0),Color3.new(0.33333334326744,0.66666668653488,0),Color3.new(1,0.66666668653488,0),Color3.new(0.33333334326744,1,0),Color3.new(1,1,0),Color3.new(0.33333334326744,0,0.49803924560547),Color3.new(1,0,0.49803924560547),Color3.new(0.33333334326744,0.33333334326744,0.49803924560547),Color3.new(1,0.33333334326744,0.49803924560547),Color3.new(0.33333334326744,0.66666668653488,0.49803924560547),Color3.new(1,0.66666668653488,0.49803924560547),Color3.new(0.33333334326744,1,0.49803924560547),Color3.new(1,1,0.49803924560547),Color3.new(0.33333334326744,0,1),Color3.new(1,0,1),Color3.new(0.33333334326744,0.33333334326744,1),Color3.new(1,0.33333334326744,1),Color3.new(0.33333334326744,0.66666668653488,1),Color3.new(1,0.66666668653488,1),Color3.new(0.33333334326744,1,1),Color3.new(1,1,1)}
				local customColors = {}

				dragGUI(picker)

				local function updateColor(noupdate)
					local relativeX,relativeY,relativeStripY = 219 - hue*219, 199 - sat*199, 199 - val*199
					local hsvColor = Color3.fromHSV(hue,sat,val)

					if noupdate == 2 or not noupdate then
						hueInput.Text = tostring(math.ceil(359*hue))
						satInput.Text = tostring(math.ceil(255*sat))
						valInput.Text = tostring(math.floor(255*val))
					end
					if noupdate == 1 or not noupdate then
						redInput.Text = tostring(math.floor(255*red))
						greenInput.Text = tostring(math.floor(255*green))
						blueInput.Text = tostring(math.floor(255*blue))
					end

					chosenColor = Color3.new(red,green,blue)

					colorScope.Position = UDim2.new(0,relativeX-9,0,relativeY-9)
					colorStrip.ImageColor3 = Color3.fromHSV(hue,sat,1)
					colorArrow.Position = UDim2.new(0,-2,0,relativeStripY-4)
					previewFrame.BackgroundColor3 = chosenColor

					newMt.Color = chosenColor
					if newMt.Changed then newMt:Changed(chosenColor) end
				end

				local function colorSpaceInput()
					local relativeX = mouse.X - colorSpace.AbsolutePosition.X
					local relativeY = mouse.Y - colorSpace.AbsolutePosition.Y

					if relativeX < 0 then relativeX = 0 elseif relativeX > 219 then relativeX = 219 end
					if relativeY < 0 then relativeY = 0 elseif relativeY > 199 then relativeY = 199 end

					hue = (219 - relativeX)/219
					sat = (199 - relativeY)/199

					local hsvColor = Color3.fromHSV(hue,sat,val)
					red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b

					updateColor()
				end

				local function colorStripInput()
					local relativeY = mouse.Y - colorStrip.AbsolutePosition.Y

					if relativeY < 0 then relativeY = 0 elseif relativeY > 199 then relativeY = 199 end	

					val = (199 - relativeY)/199

					local hsvColor = Color3.fromHSV(hue,sat,val)
					red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b

					updateColor()
				end

				local function hookButtons(frame,func)
					frame.ArrowFrame.Up.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							frame.ArrowFrame.Up.BackgroundTransparency = 0.5
						elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
							local releaseEvent,runEvent

							local startTime = tick()
							local pressing = true
							local startNum = tonumber(frame.Text)

							if not startNum then return end

							releaseEvent = UserInputService.InputEnded:Connect(function(input)
								if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
								releaseEvent:Disconnect()
								pressing = false
							end)

							startNum = startNum + 1
							func(startNum)
							while pressing do
								if tick()-startTime > 0.3 then
									startNum = startNum + 1
									func(startNum)
								end
								wait(0.1)
							end
						end
					end)

					frame.ArrowFrame.Up.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							frame.ArrowFrame.Up.BackgroundTransparency = 1
						end
					end)

					frame.ArrowFrame.Down.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							frame.ArrowFrame.Down.BackgroundTransparency = 0.5
						elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
							local releaseEvent,runEvent

							local startTime = tick()
							local pressing = true
							local startNum = tonumber(frame.Text)

							if not startNum then return end

							releaseEvent = UserInputService.InputEnded:Connect(function(input)
								if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
								releaseEvent:Disconnect()
								pressing = false
							end)

							startNum = startNum - 1
							func(startNum)
							while pressing do
								if tick()-startTime > 0.3 then
									startNum = startNum - 1
									func(startNum)
								end
								wait(0.1)
							end
						end
					end)

					frame.ArrowFrame.Down.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							frame.ArrowFrame.Down.BackgroundTransparency = 1
						end
					end)
				end

				colorSpace.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						local releaseEvent,mouseEvent

						releaseEvent = UserInputService.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							releaseEvent:Disconnect()
							mouseEvent:Disconnect()
						end)

						mouseEvent = UserInputService.InputChanged:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								colorSpaceInput()
							end
						end)

						colorSpaceInput()
					end
				end)

				colorStrip.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						local releaseEvent,mouseEvent

						releaseEvent = UserInputService.InputEnded:Connect(function(input)
							if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
							releaseEvent:Disconnect()
							mouseEvent:Disconnect()
						end)

						mouseEvent = UserInputService.InputChanged:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseMovement then
								colorStripInput()
							end
						end)

						colorStripInput()
					end
				end)

				local function updateHue(str)
					local num = tonumber(str)
					if num then
						hue = math.clamp(math.floor(num),0,359)/359
						local hsvColor = Color3.fromHSV(hue,sat,val)
						red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
						hueInput.Text = tostring(hue*359)
						updateColor(1)
					end
				end
				hueInput.FocusLost:Connect(function() updateHue(hueInput.Text) end) hookButtons(hueInput,updateHue)

				local function updateSat(str)
					local num = tonumber(str)
					if num then
						sat = math.clamp(math.floor(num),0,255)/255
						local hsvColor = Color3.fromHSV(hue,sat,val)
						red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
						satInput.Text = tostring(sat*255)
						updateColor(1)
					end
				end
				satInput.FocusLost:Connect(function() updateSat(satInput.Text) end) hookButtons(satInput,updateSat)

				local function updateVal(str)
					local num = tonumber(str)
					if num then
						val = math.clamp(math.floor(num),0,255)/255
						local hsvColor = Color3.fromHSV(hue,sat,val)
						red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
						valInput.Text = tostring(val*255)
						updateColor(1)
					end
				end
				valInput.FocusLost:Connect(function() updateVal(valInput.Text) end) hookButtons(valInput,updateVal)

				local function updateRed(str)
					local num = tonumber(str)
					if num then
						red = math.clamp(math.floor(num),0,255)/255
						local newColor = Color3.new(red,green,blue)
						hue,sat,val = Color3.toHSV(newColor)
						redInput.Text = tostring(red*255)
						updateColor(2)
					end
				end
				redInput.FocusLost:Connect(function() updateRed(redInput.Text) end) hookButtons(redInput,updateRed)

				local function updateGreen(str)
					local num = tonumber(str)
					if num then
						green = math.clamp(math.floor(num),0,255)/255
						local newColor = Color3.new(red,green,blue)
						hue,sat,val = Color3.toHSV(newColor)
						greenInput.Text = tostring(green*255)
						updateColor(2)
					end
				end
				greenInput.FocusLost:Connect(function() updateGreen(greenInput.Text) end) hookButtons(greenInput,updateGreen)

				local function updateBlue(str)
					local num = tonumber(str)
					if num then
						blue = math.clamp(math.floor(num),0,255)/255
						local newColor = Color3.new(red,green,blue)
						hue,sat,val = Color3.toHSV(newColor)
						blueInput.Text = tostring(blue*255)
						updateColor(2)
					end
				end
				blueInput.FocusLost:Connect(function() updateBlue(blueInput.Text) end) hookButtons(blueInput,updateBlue)

				local colorChoice = Instance.new("TextButton")
				colorChoice.Name = "Choice"
				colorChoice.Size = UDim2.new(0,25,0,18)
				colorChoice.BorderColor3 = Color3.new(96/255,96/255,96/255)
				colorChoice.Text = ""
				colorChoice.AutoButtonColor = false
				colorChoice.ZIndex = 10

				local row = 0
				local column = 0
				for i,v in pairs(basicColors) do
					local newColor = colorChoice:Clone()
					newColor.BackgroundColor3 = v
					newColor.Position = UDim2.new(0,1 + 30*column,0,21 + 23*row)

					newColor.MouseButton1Click:Connect(function()
						red,green,blue = v.r,v.g,v.b
						local newColor = Color3.new(red,green,blue)
						hue,sat,val = Color3.toHSV(newColor)
						updateColor()
					end)	

					newColor.Parent = basicColorsFrame
					column = column + 1
					if column == 6 then row = row + 1 column = 0 end
				end

				row = 0
				column = 0
				for i = 1,12 do
					local color = customColors[i] or Color3.new(0,0,0)
					local newColor = colorChoice:Clone()
					newColor.BackgroundColor3 = color
					newColor.Position = UDim2.new(0,1 + 30*column,0,20 + 23*row)

					newColor.MouseButton1Click:Connect(function()
						local curColor = customColors[i] or Color3.new(0,0,0)
						red,green,blue = curColor.r,curColor.g,curColor.b
						hue,sat,val = Color3.toHSV(curColor)
						updateColor()
					end)

					newColor.MouseButton2Click:Connect(function()
						customColors[i] = chosenColor
						newColor.BackgroundColor3 = chosenColor
					end)

					newColor.Parent = customColorsFrame
					column = column + 1
					if column == 6 then row = row + 1 column = 0 end
				end

				shade1Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade1) end end)
				shade1Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade1Button.BackgroundTransparency = 0.4 end end)
				shade1Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade1Button.BackgroundTransparency = 0 end end)

				shade2Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade2) end end)
				shade2Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade2Button.BackgroundTransparency = 0.4 end end)
				shade2Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade2Button.BackgroundTransparency = 0 end end)

				shade3Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade3) end end)
				shade3Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade3Button.BackgroundTransparency = 0.4 end end)
				shade3Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade3Button.BackgroundTransparency = 0 end end)

				text1Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,text1) end end)
				text1Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text1Button.BackgroundTransparency = 0.4 end end)
				text1Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text1Button.BackgroundTransparency = 0 end end)

				text2Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,text2) end end)
				text2Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text2Button.BackgroundTransparency = 0.4 end end)
				text2Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text2Button.BackgroundTransparency = 0 end end)

				scrollButton.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,scroll) end end)
				scrollButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then scrollButton.BackgroundTransparency = 0.4 end end)
				scrollButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then scrollButton.BackgroundTransparency = 0 end end)

				cancelButton.MouseButton1Click:Connect(function() if newMt.Cancel then newMt:Cancel() end end)
				cancelButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then cancelButton.BackgroundTransparency = 0.4 end end)
				cancelButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then cancelButton.BackgroundTransparency = 0 end end)

				defaultButton.MouseButton1Click:Connect(function() if newMt.Default then newMt:Default() end end)
				defaultButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then defaultButton.BackgroundTransparency = 0.4 end end)
				defaultButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then defaultButton.BackgroundTransparency = 0 end end)

				pickerExit.MouseButton1Click:Connect(function()
					picker:TweenPosition(UDim2.new(0.5, -219, 0, -500), "InOut", "Quart", 0.5, true, nil)
				end)

				updateColor()

				newMt.SetColor = function(self,color)
					red,green,blue = color.r,color.g,color.b
					hue,sat,val = Color3.toHSV(color)
					updateColor()
				end

				return newMt
			end
		end

		picker:TweenPosition(UDim2.new(0.5, -219, 0, 100), "InOut", "Quart", 0.5, true, nil)

		local Npicker = ColorPicker.new()
		Npicker.Confirm = function(self,color,ctype) updateColors(color,ctype) wait() updatesaves() end
		Npicker.Cancel = function(self)
			updateColors(cache_currentShade1,shade1)
			updateColors(cache_currentShade2,shade2)
			updateColors(cache_currentShade3,shade3)
			updateColors(cache_currentText1,text1)
			updateColors(cache_currentText2,text2)
			updateColors(cache_currentScroll,scroll)
			wait()
			updatesaves()
		end
		Npicker.Default = function(self)
			updateColors(Color3.fromRGB(36, 36, 37),shade1)
			updateColors(Color3.fromRGB(46, 46, 47),shade2)
			updateColors(Color3.fromRGB(78, 78, 79),shade3)
			updateColors(Color3.new(1, 1, 1),text1)
			updateColors(Color3.new(0, 0, 0),text2)
			updateColors(Color3.fromRGB(78,78,79),scroll)
			wait()
			updatesaves()
		end
	else
		picker:TweenPosition(UDim2.new(0.5, -219, 0, 100), "InOut", "Quart", 0.5, true, nil)
	end
end)


SettingsButton.MouseButton1Click:Connect(function()
	if SettingsOpen == false then SettingsOpen = true
		Settings:TweenPosition(UDim2.new(0, 0, 0, 45), "InOut", "Quart", 0.5, true, nil)
		CMDsF.Visible = false
	else SettingsOpen = false
		CMDsF.Visible = true
		Settings:TweenPosition(UDim2.new(0, 0, 0, 220), "InOut", "Quart", 0.5, true, nil)
	end
end)

On.MouseButton1Click:Connect(function()
	if isHidden == false then
		if StayOpen == false then
			StayOpen = true
			On.BackgroundTransparency = 0
		else
			StayOpen = false
			On.BackgroundTransparency = 1
		end
		updatesaves()
	end
end)

Clear.MouseButton1Down:Connect(function()
	for _, child in pairs(scroll_2:GetChildren()) do
		child:Destroy()
	end
	scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
end)

Clear_2.MouseButton1Down:Connect(function()
	for _, child in pairs(scroll_3:GetChildren()) do
		child:Destroy()
	end
	scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)
end)

Toggle.MouseButton1Down:Connect(function()
	if logsEnabled then
		logsEnabled = false
		Toggle.Text = 'Disabled'
		updatesaves()
	else
		logsEnabled = true
		Toggle.Text = 'Enabled'
		updatesaves()
	end
end)

Toggle_2.MouseButton1Down:Connect(function()
	if jLogsEnabled then
		jLogsEnabled = false
		Toggle_2.Text = 'Disabled'
		updatesaves()
	else
		jLogsEnabled = true
		Toggle_2.Text = 'Enabled'
		updatesaves()
	end
end)

selectChat.MouseButton1Down:Connect(function()
	join.Visible = false
	chat.Visible = true
	table.remove(shade3,table.find(shade3,selectChat))
	table.remove(shade2,table.find(shade2,selectJoin))
	table.insert(shade2,selectChat)
	table.insert(shade3,selectJoin)
	selectJoin.BackgroundColor3 = currentShade3
	selectChat.BackgroundColor3 = currentShade2
end)

selectJoin.MouseButton1Down:Connect(function()
	chat.Visible = false
	join.Visible = true	
	table.remove(shade3,table.find(shade3,selectJoin))
	table.remove(shade2,table.find(shade2,selectChat))
	table.insert(shade2,selectJoin)
	table.insert(shade3,selectChat)
	selectChat.BackgroundColor3 = currentShade3
	selectJoin.BackgroundColor3 = currentShade2
end)

if not writefileExploit() then
    notify("Saves", "Your exploit does not support read/write file. Your settings will not save.")
end

avatarcache = {}
function sendChatWebhook(player, message)
  if httprequest and vtype(logsWebhook, "string") then
    local id = player.UserId
    local avatar = avatarcache[id]
    if not avatar then
      local d = HttpService:JSONDecode(httprequest({
        Url = "https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=" .. id .. "&size=420x420&format=Png&isCircular=false",
        Method = "GET"
      }).Body)["data"]
      avatar = d and d[1].state == "Completed" and d[1].imageUrl or "https://files.catbox.moe/i968v2.jpg"
      avatarcache[id] = avatar
    end
    local log = HttpService:JSONEncode({
      content = message,
      avatar_url = avatar,
      username = formatUsername(player),
      allowed_mentions = {parse = {}}
    })
    httprequest({
      Url = logsWebhook,
      Method = "POST",
      Headers = {["Content-Type"] = "application/json"},
      Body = log
    })
  end
end

ChatLog = function(player)
    player.Chatted:Connect(function(message)
        if logsEnabled == true then
            CreateLabel(player.Name, message)
            sendChatWebhook(player, message)
        end
    end)
end

JoinLog = function(plr)
	if jLogsEnabled == true then
		CreateJoinLabel(plr,plr.UserId)
	end
end

CleanFileName = function(name)
    return tostring(name):gsub("[*\\?:<>|]+", ""):sub(1, 175)
end

SaveChatlogs.MouseButton1Down:Connect(function()
	if writefileExploit() then
		if #scroll_2:GetChildren() > 0 then
			notify("Loading",'Hold on a sec')
			local placeName = CleanFileName(MarketplaceService:GetProductInfo(PlaceId).Name)
			local writelogs = '-- Infinite Yield Chat logs for "'..placeName..'"\n'
			for _, child in pairs(scroll_2:GetChildren()) do
				writelogs = writelogs..'\n'..child.Text
			end
			local writelogsFile = tostring(writelogs)
			local fileext = 0
			local function nameFile()
				local file
				pcall(function() file = readfile(placeName..' Chat Logs ('..fileext..').txt') end)
				if file then
					fileext = fileext+1
					nameFile()
				else
					writefileCooldown(placeName..' Chat Logs ('..fileext..').txt', writelogsFile)
				end
			end
			nameFile()
			notify('Chat Logs','Saved chat logs to the workspace folder within your exploit folder.')
		end
	else
		notify('Chat Logs','Your exploit does not support write file. You cannot save chat logs.')
	end
end)

if isLegacyChat then
    for _, plr in pairs(Players:GetPlayers()) do
        ChatLog(plr)
    end
end

Players.PlayerRemoving:Connect(function(player)
	if ESPenabled or CHMSenabled or COREGUI:FindFirstChild(player.Name..'_LC') then
		for i,v in pairs(COREGUI:GetChildren()) do
			if v.Name == player.Name..'_ESP' or v.Name == player.Name..'_LC' or v.Name == player.Name..'_CHMS' then
				v:Destroy()
			end
		end
	end
	if viewing ~= nil and player == viewing then
		workspace.CurrentCamera.CameraSubject = Players.LocalPlayer.Character
		viewing = nil
		if viewDied then
			viewDied:Disconnect()
			viewChanged:Disconnect()
		end
		notify('Spectate','View turned off (player left)')
	end
	eventEditor.FireEvent("OnLeave", player.Name)
end)

Exit.MouseButton1Down:Connect(function()
	logs:TweenPosition(UDim2.new(0, 0, 1, 10), "InOut", "Quart", 0.3, true, nil)
end)

Hide.MouseButton1Down:Connect(function()
	if logs.Position ~= UDim2.new(0, 0, 1, -20) then
		logs:TweenPosition(UDim2.new(0, 0, 1, -20), "InOut", "Quart", 0.3, true, nil)
	else
		logs:TweenPosition(UDim2.new(0, 0, 1, -265), "InOut", "Quart", 0.3, true, nil)
	end
end)

EventBind.MouseButton1Click:Connect(function()
	eventEditor.Frame:TweenPosition(UDim2.new(0.5,-175,0.5,-101), "InOut", "Quart", 0.5, true, nil)
end)

Keybinds.MouseButton1Click:Connect(function()
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
end)

Close.MouseButton1Click:Connect(function()
	SettingsHolder.Visible = true
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
end)

Keybinds.MouseButton1Click:Connect(function()
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
end)

Add.MouseButton1Click:Connect(function()
	KeybindEditor:TweenPosition(UDim2.new(0.5, -180, 0, 260), "InOut", "Quart", 0.5, true, nil)
end)

Delete.MouseButton1Click:Connect(function()
	binds = {}
	refreshbinds()
	updatesaves()
	notify('Keybinds Updated','Removed all keybinds')
end)

Close_2.MouseButton1Click:Connect(function()
	SettingsHolder.Visible = true
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
end)

Aliases.MouseButton1Click:Connect(function()
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
end)

Close_3.MouseButton1Click:Connect(function()
	SettingsHolder.Visible = true
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
end)

Positions.MouseButton1Click:Connect(function()
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
end)

local selectionBox = Instance.new("SelectionBox")
selectionBox.Name = randomString()
selectionBox.Color3 = Color3.new(255,255,255)
selectionBox.Adornee = nil
selectionBox.Parent = PARENT

local selected = Instance.new("SelectionBox")
selected.Name = randomString()
selected.Color3 = Color3.new(0,166,0)
selected.Adornee = nil
selected.Parent = PARENT

local ActivateHighlight = nil
local ClickSelect = nil
function selectPart()
	ToPartFrame:TweenPosition(UDim2.new(0.5, -180, 0, 335), "InOut", "Quart", 0.5, true, nil)
	local function HighlightPart()
		if selected.Adornee ~= IYMouse.Target then
			selectionBox.Adornee = IYMouse.Target
		else
			selectionBox.Adornee = nil
		end
	end
	ActivateHighlight = IYMouse.Move:Connect(HighlightPart)
	local function SelectPart()
		if IYMouse.Target ~= nil then
			selected.Adornee = IYMouse.Target
			Path.Text = getHierarchy(IYMouse.Target)
		end
	end
	ClickSelect = IYMouse.Button1Down:Connect(SelectPart)
end

Part.MouseButton1Click:Connect(function()
	selectPart()
end)

Exit_4.MouseButton1Click:Connect(function()
	ToPartFrame:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
	if ActivateHighlight then
		ActivateHighlight:Disconnect()
	end
	if ClickSelect then
		ClickSelect:Disconnect()
	end
	selectionBox.Adornee = nil
	selected.Adornee = nil
	Path.Text = ""
end)

CopyPath.MouseButton1Click:Connect(function()
	if Path.Text ~= "" then
		toClipboard(Path.Text)
	else
		notify('Copy Path','Select a part to copy its path')
	end
end)

ChoosePart.MouseButton1Click:Connect(function()
	if Path.Text ~= "" then
		local tpNameExt = ''
		local function handleWpNames()
			local FoundDupe = false
			for i,v in pairs(pWayPoints) do
				if v.NAME:lower() == selected.Adornee.Name:lower()..tpNameExt then
					FoundDupe = true
				end
			end
			if not FoundDupe then
				notify('Modified Waypoints',"Created waypoint: "..selected.Adornee.Name..tpNameExt)
				pWayPoints[#pWayPoints + 1] = {NAME = selected.Adornee.Name..tpNameExt, COORD = {selected.Adornee}}
			else
				if isNumber(tpNameExt) then
					tpNameExt = tpNameExt+1
				else
					tpNameExt = 1
				end
				handleWpNames()
			end
		end
		handleWpNames()
		refreshwaypoints()
	else
		notify('Part Selection','Select a part first')
	end
end)

cmds={}
customAlias = {}
Delete_3.MouseButton1Click:Connect(function()
	customAlias = {}
	aliases = {}
	notify('Aliases Modified','Removed all aliases')
	updatesaves()
	refreshaliases()
end)

PrefixBox:GetPropertyChangedSignal("Text"):Connect(function()
	prefix = PrefixBox.Text
	Cmdbar.PlaceholderText = "Command Bar ("..prefix..")"
	updatesaves()
end)

function CamViewport()
	if workspace.CurrentCamera then
		return workspace.CurrentCamera.ViewportSize.X
	end
end

function UpdateToViewport()
	if Holder.Position.X.Offset < -CamViewport() then
		Holder:TweenPosition(UDim2.new(1, -CamViewport(), Holder.Position.Y.Scale, Holder.Position.Y.Offset), "InOut", "Quart", 0.04, true, nil)
		Notification:TweenPosition(UDim2.new(1, -CamViewport() + 250, Notification.Position.Y.Scale, Notification.Position.Y.Offset), "InOut", "Quart", 0.04, true, nil)
	end
end
CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(UpdateToViewport)

function updateCamera(child, parent)
	if parent ~= workspace then
		CamMoved:Disconnect()
		CameraChanged:Disconnect()
		repeat wait() until workspace.CurrentCamera
		CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(UpdateToViewport)
		CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(updateCamera)
	end
end
CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(updateCamera)

function dragMain(dragpoint,gui)
	task.spawn(function()
		local dragging
		local dragInput
		local dragStart = Vector3.new(0,0,0)
		local startPos
		local function update(input)
			local pos = -250
			local delta = input.Position - dragStart
			if startPos.X.Offset + delta.X <= -500 then
				local Position = UDim2.new(1, -250, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position}):Play()
				pos = 250
			else
				local Position = UDim2.new(1, -500, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position}):Play()
				pos = -250
			end
			if startPos.X.Offset + delta.X <= -250 and -CamViewport() <= startPos.X.Offset + delta.X then
				local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, gui.Position.Y.Scale, gui.Position.Y.Offset)
				TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
				local Position2 = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X + pos, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position2}):Play()
			elseif startPos.X.Offset + delta.X > -500 then
				local Position = UDim2.new(1, -250, gui.Position.Y.Scale, gui.Position.Y.Offset)
				TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
			elseif -CamViewport() > startPos.X.Offset + delta.X then
				gui:TweenPosition(UDim2.new(1, -CamViewport(), gui.Position.Y.Scale, gui.Position.Y.Offset), "InOut", "Quart", 0.04, true, nil)
				local Position = UDim2.new(1, -CamViewport(), gui.Position.Y.Scale, gui.Position.Y.Offset)
				TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
				local Position2 = UDim2.new(1, -CamViewport() + 250, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position2}):Play()
			end
		end
		dragpoint.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				dragStart = input.Position
				startPos = gui.Position

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)
		dragpoint.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if input == dragInput and dragging then
				update(input)
			end
		end)
	end)
end

dragMain(Title,Holder)

Match = function(name,str)
	str = str:gsub("%W", "%%%1")
	return name:lower():find(str:lower()) and true
end

local canvasPos = Vector2.new(0,0)
local topCommand = nil
IndexContents = function(str,bool,cmdbar,Ianim)
	CMDsF.CanvasPosition = Vector2.new(0,0)
	local SizeY = 0
	local indexnum = 0
	local frame = CMDsF
	topCommand = nil
	local chunks = {}
	if str:sub(#str,#str) == "\\" then str = "" end
	for w in string.gmatch(str,"[^\\]+") do
		table.insert(chunks,w)
	end
	if #chunks > 0 then str = chunks[#chunks] end
	if str:sub(1,1) == "!" then str = str:sub(2) end
	for i,v in next, frame:GetChildren() do
		if v:IsA("TextButton") then
			if bool then
				if Match(v.Text,str) then
					indexnum = indexnum + 1
					v.Visible = true
					if topCommand == nil then
						topCommand = v.Text
					end
				else
					v.Visible = false
				end
			else
				v.Visible = true
				if topCommand == nil then
					topCommand = v.Text
				end
			end
		end
	end
	frame.CanvasSize = UDim2.new(0,0,0,cmdListLayout.AbsoluteContentSize.Y)
	if not Ianim then
		if indexnum == 0 or string.find(str, " ") then
			if not cmdbar then
				minimizeHolder()
			elseif cmdbar then
				cmdbarHolder()
			end
		else
			maximizeHolder()
		end
	else
		minimizeHolder()
	end
end

task.spawn(function()
	if not isLegacyChat then return end
	local chatbox
	local success, result = pcall(function() chatbox = PlayerGui:WaitForChild("Chat").Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar end)
	if success then
		local function chatboxFocused()
			canvasPos = CMDsF.CanvasPosition
		end
		local chatboxFocusedC = chatbox.Focused:Connect(chatboxFocused)

		local function Index()
			if chatbox.Text:lower():sub(1,1) == prefix then
				if SettingsOpen == true then
					wait(0.2)
					CMDsF.Visible = true
					Settings:TweenPosition(UDim2.new(0, 0, 0, 220), "InOut", "Quart", 0.2, true, nil)
				end
				IndexContents(PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar.Text:lower():sub(2),true)
			else
				minimizeHolder()
				if SettingsOpen == true then
					wait(0.2)
					Settings:TweenPosition(UDim2.new(0, 0, 0, 45), "InOut", "Quart", 0.2, true, nil)
					CMDsF.Visible = false
				end
			end
		end
		local chatboxFunc = chatbox:GetPropertyChangedSignal("Text"):Connect(Index)

		local function chatboxFocusLost(enterpressed)
			if not enterpressed or chatbox.Text:lower():sub(1,1) ~= prefix then
				IndexContents('',true)
			end
			CMDsF.CanvasPosition = canvasPos
			minimizeHolder()
		end
		local chatboxFocusLostC = chatbox.FocusLost:Connect(chatboxFocusLost)

		PlayerGui:WaitForChild("Chat").Frame.ChatBarParentFrame.ChildAdded:Connect(function(newbar)
			wait()
			if newbar:FindFirstChild('BoxFrame') then
				chatbox = PlayerGui:WaitForChild("Chat").Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar
				if chatboxFocusedC then chatboxFocusedC:Disconnect() end
				chatboxFocusedC = chatbox.Focused:Connect(chatboxFocused)
				if chatboxFunc then chatboxFunc:Disconnect() end
				chatboxFunc = chatbox:GetPropertyChangedSignal("Text"):Connect(Index)
				if chatboxFocusLostC then chatboxFocusLostC:Disconnect() end
				chatboxFocusLostC = chatbox.FocusLost:Connect(chatboxFocusLost)
			end
		end)
		--else
		--print('Custom chat detected. Will not provide suggestions for commands typed in the chat.')
	end
end)

function autoComplete(str,curText)
	local endingChar = {"[", "/", "(", " "}
	local stop = 0
	for i=1,#str do
		local c = str:sub(i,i)
		if table.find(endingChar, c) then
			stop = i
			break
		end
	end
	curText = curText or Cmdbar.Text
	local subPos = 0
	local pos = 1
	local findRes = string.find(curText,"\\",pos)
	while findRes do
		subPos = findRes
		pos = findRes+1
		findRes = string.find(curText,"\\",pos)
	end
	if curText:sub(subPos+1,subPos+1) == "!" then subPos = subPos + 1 end
	Cmdbar.Text = curText:sub(1,subPos) .. str:sub(1, stop - 1)..' '
	RunService.RenderStepped:Wait()
	Cmdbar.Text = Cmdbar.Text:gsub( '\t', '' )
	Cmdbar.CursorPosition = #Cmdbar.Text+1--1020
end

CMDs = {}
CMDs[#CMDs + 1] = {NAME = 'discord / support / help', DESC = 'Invite to the Infinite Yield support server.'}
CMDs[#CMDs + 1] = {NAME = 'guiscale [number]', DESC = 'Changes the size of the gui. [number] accepts both decimals and whole numbers. Min is 0.4 and Max is 2'}
CMDs[#CMDs + 1] = {NAME = 'console', DESC = 'Loads Roblox console'}
CMDs[#CMDs + 1] = {NAME = 'oldconsole', DESC = 'Loads old Roblox console'}
CMDs[#CMDs + 1] = {NAME = 'explorer / dex', DESC = 'Opens DEX by Moon'}
CMDs[#CMDs + 1] = {NAME = 'olddex / odex', DESC = 'Opens Old DEX by Moon'}
CMDs[#CMDs + 1] = {NAME = 'remotespy / rspy', DESC = 'Opens Simple Spy V3'}
CMDs[#CMDs + 1] = {NAME = 'remotespyC / rspyC', DESC = 'Opens Simple Spy V3 client version'}
CMDs[#CMDs + 1] = {NAME = 'DexPlusPlus / Dex++', DESC = 'Opens Dex++'}
CMDs[#CMDs + 1] = {NAME = 'bashdex / dexkeyless', DESC = 'Opens Old DEX bash version'}
CMDs[#CMDs + 1] = {NAME = 'remotespy / rspy', DESC = 'Opens Simple Spy V3'}
CMDs[#CMDs + 1] = {NAME = 'getattribute / attributes', DESC = 'Opens Attribute Getting GUI'}
CMDs[#CMDs + 1] = {NAME = 'keyboard / keyboard script', DESC = 'Keyboard Script'}
CMDs[#CMDs + 1] = {NAME = 'gamepass / freegamepass', DESC = 'free gamepass GUI'}
CMDs[#CMDs + 1] = {NAME = 'loopfriendreqall / loopfriend', DESC = 'sends friend req to all every 10 second'}
CMDs[#CMDs + 1] = {NAME = 'Chatspynew / CSpynew', DESC = 'ChatSpy for new chat'}
CMDs[#CMDs + 1] = {NAME = 'Chatspyold / CSpyold', DESC = 'ChatSpy for old chat'}
CMDs[#CMDs + 1] = {NAME = 'Samurai GUI / Zo', DESC = 'Zo Loader'}
CMDs[#CMDs + 1] = {NAME = 'Aimbot / AimbotGUI', DESC = 'Universal Aimbot and Esp'}
CMDs[#CMDs + 1] = {NAME = 'ShowChat / ChatGUI', DESC = 'External CHATGUI'}
CMDs[#CMDs + 1] = {NAME = 'GameplayPaused / GamePause', DESC = 'No Gameplay Pause'}
CMDs[#CMDs + 1] = {NAME = 'RemovePrompts / Noprompt', DESC = 'New method remove robux purchase GUIs'}
CMDs[#CMDs + 1] = {NAME = 'Friendspy / tellfriends', DESC = 'Prints Who is Friend with Who in Console'}
CMDs[#CMDs + 1] = {NAME = 'print [text]', DESC = 'Print any text to console'}
CMDs[#CMDs + 1] = {NAME = 'AuraCraft', DESC = 'Aura craft game GUI'}
CMDs[#CMDs + 1] = {NAME = 'ShiftlockGUI / Shiftlock', DESC = 'Shiftlock GUI'}
CMDs[#CMDs + 1] = {NAME = 'wave', DESC = 'wave emote'}
CMDs[#CMDs + 1] = {NAME = 'zoanim / zoanimgui', DESC = 'animation gui for zo'}
CMDs[#CMDs + 1] = {NAME = 'walkflingaura / wfaura [radius]', DESC = 'Enables walk fling aura with specified radius'}
CMDs[#CMDs + 1] = {NAME = 'unwalkflingaura / unwfaura', DESC = 'Disables walk fling aura'}
CMDs[#CMDs + 1] = {NAME = 'walkflingauravis / wfauravis', DESC = 'Enables walk fling aura visualization'}
CMDs[#CMDs + 1] = {NAME = 'unwalkflingauravis / unwfauravis', DESC = 'Disables walk fling aura visualization'}
CMDs[#CMDs + 1] = {NAME = 'walkflingauratrans / wfauratrans [transparency]', DESC = 'Sets walk fling aura transparency (0-1)'}
CMDs[#CMDs + 1] = {NAME = 'walkflingauracolor / wfauracolor [r] [g] [b]', DESC = 'Sets walk fling aura color (RGB 0-255)'}
CMDs[#CMDs + 1] = {NAME = 'voidtp / void', DESC = 'Teleports you to the void'}
CMDs[#CMDs + 1] = {NAME = 'voidback / undovoid', DESC = 'Returns you from the void to saved position'}
CMDs[#CMDs + 1] = {NAME = 'voidpos [x] [y] [z]', DESC = 'Sets custom void teleport position'}
CMDs[#CMDs + 1] = {NAME = 'Evade / Evade GUI', DESC = 'Evade script'}
CMDs[#CMDs + 1] = {NAME = 'Zoweapon remover / weaponremover', DESC = 'Zo weapon remover GUI'}
CMDs[#CMDs + 1] = {NAME = 'Zocontrolsset / zocontrols', DESC = 'Zo controls setting GUI'}
CMDs[#CMDs + 1] = {NAME = 'CameraPlace script / multicam', DESC = 'Place multiple cams'}
CMDs[#CMDs + 1] = {NAME = 'jerkoff / fap', DESC = 'Jerk Off Tool'}
CMDs[#CMDs + 1] = {NAME = 'audiologger / alogger', DESC = 'Opens Edges audio logger'}
CMDs[#CMDs + 1] = {NAME = 'serverinfo / info', DESC = 'Gives you info about the server'}
CMDs[#CMDs + 1] = {NAME = 'jobid', DESC = 'Copies the games JobId to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'notifyjobid', DESC = 'Notifies you the games JobId'}
CMDs[#CMDs + 1] = {NAME = 'rejoin / rj', DESC = 'Makes you rejoin the game'}
CMDs[#CMDs + 1] = {NAME = 'autorejoin / autorj', DESC = 'Automatically rejoins the server if you get kicked/disconnected'}
CMDs[#CMDs + 1] = {NAME = 'serverhop / shop', DESC = 'Teleports you to a different server'}
CMDs[#CMDs + 1] = {NAME = 'gameteleport / gametp [place ID]', DESC = 'Joins a game by ID'}
CMDs[#CMDs + 1] = {NAME = 'antiidle / antiafk', DESC = 'Prevents the game from kicking you for being idle/afk'}
CMDs[#CMDs + 1] = {NAME = 'datalimit [num]', DESC = 'Set outgoing KBPS limit'}
CMDs[#CMDs + 1] = {NAME = 'replicationlag / backtrack [num]', DESC = 'Set IncomingReplicationLag'}
CMDs[#CMDs + 1] = {NAME = 'creatorid / creator', DESC = 'Notifies you the creators ID'}
CMDs[#CMDs + 1] = {NAME = 'copycreatorid / copycreator', DESC = 'Copies the creators ID to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'setcreatorid / setcreator', DESC = 'Sets your userid to the creators ID'}
CMDs[#CMDs + 1] = {NAME = 'noprompts', DESC = 'Prevents the game from showing you purchase/premium prompts'}
CMDs[#CMDs + 1] = {NAME = 'showprompts', DESC = 'Allows the game to show purchase/premium prompts again'}
CMDs[#CMDs + 1] = {NAME = 'enable [inventory/playerlist/chat/reset/emotes/all]', DESC = 'Toggles visibility of coregui items'}
CMDs[#CMDs + 1] = {NAME = 'disable [inventory/playerlist/chat/reset/emotes/all]', DESC = 'Toggles visibility of coregui items'}
CMDs[#CMDs + 1] = {NAME = 'showguis', DESC = 'Shows any invisible GUIs'}
CMDs[#CMDs + 1] = {NAME = 'unshowguis', DESC = 'Undoes showguis'}
CMDs[#CMDs + 1] = {NAME = 'hideguis', DESC = 'Hides any GUIs in PlayerGui'}
CMDs[#CMDs + 1] = {NAME = 'unhideguis', DESC = 'Undoes hideguis'}
CMDs[#CMDs + 1] = {NAME = 'guidelete', DESC = 'Enables backspace to delete GUI'}
CMDs[#CMDs + 1] = {NAME = 'unguidelete / noguidelete', DESC = 'Disables guidelete'}
CMDs[#CMDs + 1] = {NAME = 'hideiy', DESC = 'Hides the main IY GUI'}
CMDs[#CMDs + 1] = {NAME = 'showiy / unhideiy', DESC = 'Shows IY again'}
CMDs[#CMDs + 1] = {NAME = 'keepiy', DESC = 'Auto execute IY when you teleport through servers'}
CMDs[#CMDs + 1] = {NAME = 'unkeepiy', DESC = 'Disable keepiy'}
CMDs[#CMDs + 1] = {NAME = 'togglekeepiy', DESC = 'Toggle keepiy'}
CMDs[#CMDs + 1] = {NAME = 'savegame / saveplace', DESC = 'Uses saveinstance to save the game'}
CMDs[#CMDs + 1] = {NAME = 'clearerror', DESC = 'Clears the annoying box and blur when a game kicks you'}
CMDs[#CMDs + 1] = {NAME = 'clientantikick / antikick (CLIENT)', DESC = 'Prevents localscripts from kicking you'}
CMDs[#CMDs + 1] = {NAME = 'clientantiteleport / antiteleport (CLIENT)', DESC = 'Prevents localscripts from teleporting you'}
CMDs[#CMDs + 1] = {NAME = 'allowrejoin / allowrj [true/false] (CLIENT)', DESC = 'Changes if antiteleport allows you to rejoin or not'}
CMDs[#CMDs + 1] = {NAME = 'cancelteleport / canceltp', DESC = 'Cancels teleports in progress'}
CMDs[#CMDs + 1] = {NAME = 'volume / vol [0-10]', DESC = 'Adjusts your game volume on a scale of 0 to 10'}
CMDs[#CMDs + 1] = {NAME = 'antilag / boostfps / lowgraphics', DESC = 'Lowers game quality to boost FPS'}
CMDs[#CMDs + 1] = {NAME = 'record / rec', DESC = 'Starts roblox recorder'}
CMDs[#CMDs + 1] = {NAME = 'screenshot / scrnshot', DESC = 'Takes a screenshot'}
CMDs[#CMDs + 1] = {NAME = 'togglefullscreen / togglefs', DESC = 'Toggles fullscreen'}
CMDs[#CMDs + 1] = {NAME = 'notify [text]', DESC = 'Sends you a notification with the provided text'}
CMDs[#CMDs + 1] = {NAME = 'lastcommand / lastcmd', DESC = 'Executes the previous command used'}
CMDs[#CMDs + 1] = {NAME = 'exit', DESC = 'Kills roblox process'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'noclip', DESC = 'Go through objects'}
CMDs[#CMDs + 1] = {NAME = 'unnoclip / clip', DESC = 'Disables noclip'}
CMDs[#CMDs + 1] = {NAME = 'fly [speed]', DESC = 'Makes you fly'}
CMDs[#CMDs + 1] = {NAME = 'unfly', DESC = 'Disables fly'}
CMDs[#CMDs + 1] = {NAME = 'flyspeed [num]', DESC = 'Set fly speed (default is 20)'}
CMDs[#CMDs + 1] = {NAME = 'vehiclefly / vfly [speed]', DESC = 'Makes you fly in a vehicle'}
CMDs[#CMDs + 1] = {NAME = 'unvehiclefly / unvfly', DESC = 'Disables vehicle fly'}
CMDs[#CMDs + 1] = {NAME = 'vehicleflyspeed  / vflyspeed [num]', DESC = 'Set vehicle fly speed'}
CMDs[#CMDs + 1] = {NAME = 'cframefly / cfly [speed]', DESC = 'Makes you fly, bypassing some anti cheats (works on mobile)'}
CMDs[#CMDs + 1] = {NAME = 'uncframefly / uncfly', DESC = 'Disables cfly'}
CMDs[#CMDs + 1] = {NAME = 'cframeflyspeed  / cflyspeed [num]', DESC = 'Sets cfly speed'}
CMDs[#CMDs + 1] = {NAME = 'qefly [true / false]', DESC = 'enables or disables the Q and E hotkeys for fly'}
CMDs[#CMDs + 1] = {NAME = 'vehiclenoclip / vnoclip', DESC = 'Turns off vehicle collision'}
CMDs[#CMDs + 1] = {NAME = 'vehicleclip / vclip / unvnoclip', DESC = 'Enables vehicle collision'}
CMDs[#CMDs + 1] = {NAME = 'float /  platform', DESC = 'Spawns a platform beneath you causing you to float'}
CMDs[#CMDs + 1] = {NAME = 'unfloat / noplatform', DESC = 'Removes the platform'}
CMDs[#CMDs + 1] = {NAME = 'swim', DESC = 'Allows you to swim in the air'}
CMDs[#CMDs + 1] = {NAME = 'unswim / noswim', DESC = 'Stops you from swimming everywhere'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'setwaypoint / swp [name]', DESC = 'Sets a waypoint at your position'}
CMDs[#CMDs + 1] = {NAME = 'waypointpos / wpp [name] [X Y Z]', DESC = 'Sets a waypoint with specified coordinates'}
CMDs[#CMDs + 1] = {NAME = 'waypoints', DESC = 'Shows a list of currently active waypoints'}
CMDs[#CMDs + 1] = {NAME = 'showwaypoints / showwp', DESC = 'Shows all currently set waypoints'}
CMDs[#CMDs + 1] = {NAME = 'hidewaypoints / hidewp', DESC = 'Hides shown waypoints'}
CMDs[#CMDs + 1] = {NAME = 'waypoint / wp [name]', DESC = 'Teleports player to a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'tweenwaypoint / twp [name]', DESC = 'Tweens player to a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'walktowaypoint / wtwp [name]', DESC = 'Walks player to a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'deletewaypoint / dwp [name]', DESC = 'Deletes a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'clearwaypoints / cwp', DESC = 'Clears all waypoints'}
CMDs[#CMDs + 1] = {NAME = 'cleargamewaypoints / cgamewp', DESC = 'Clears all waypoints for the game you are in'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'goto [player]', DESC = 'Go to a player'}
CMDs[#CMDs + 1] = {NAME = 'tweengoto / tgoto [player]', DESC = 'Tween to a player (bypasses some anti cheats)'}
CMDs[#CMDs + 1] = {NAME = 'tweenspeed / tspeed [num]', DESC = 'Sets how fast all tween commands go (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'vehiclegoto / vgoto [player]', DESC = 'Go to a player while in a vehicle'}
CMDs[#CMDs + 1] = {NAME = 'loopgoto [player] [distance] [delay]', DESC = 'Loop teleport to a player'}
CMDs[#CMDs + 1] = {NAME = 'unloopgoto', DESC = 'Stops teleporting you to a player'}
CMDs[#CMDs + 1] = {NAME = 'pulsetp / ptp [player] [seconds]', DESC = 'Teleports you to a player for a specified amount of time'}
CMDs[#CMDs + 1] = {NAME = 'clientbring / cbring [player] (CLIENT)', DESC = 'Bring a player'}
CMDs[#CMDs + 1] = {NAME = 'loopbring [player] [distance] [delay] (CLIENT)', DESC = 'Loop brings a player to you (useful for killing)'}
CMDs[#CMDs + 1] = {NAME = 'unloopbring [player]', DESC = 'Undoes loopbring'}
CMDs[#CMDs + 1] = {NAME = 'freeze / fr [player] (CLIENT)', DESC = 'Freezes a player'}
CMDs[#CMDs + 1] = {NAME = 'freezeanims', DESC = 'Freezes your animations / pauses your animations - Does not work on default animations'}
CMDs[#CMDs + 1] = {NAME = 'unfreezeanims', DESC = 'Unfreezes your animations / plays your animations'}
CMDs[#CMDs + 1] = {NAME = 'thaw / unfr [player] (CLIENT)', DESC = 'Unfreezes a player'}
CMDs[#CMDs + 1] = {NAME = 'tpposition / tppos [X Y Z]', DESC = 'Teleports you to certain coordinates'}
CMDs[#CMDs + 1] = {NAME = 'tweentpposition / ttppos [X Y Z]', DESC = 'Tween to coordinates (bypasses some anti cheats)'}
CMDs[#CMDs + 1] = {NAME = 'offset [X Y Z]', DESC = 'Offsets you by certain coordinates'}
CMDs[#CMDs + 1] = {NAME = 'tweenoffset / toffset [X Y Z]', DESC = 'Tween offset (bypasses some anti cheats)'}
CMDs[#CMDs + 1] = {NAME = 'notifyposition / notifypos [player]', DESC = 'Notifies you the coordinates of a character'}
CMDs[#CMDs + 1] = {NAME = 'copyposition / copypos [player]', DESC = 'Copies the coordinates of a character to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'walktoposition / walktopos [X Y Z]', DESC = 'Makes you walk to a coordinate'}
CMDs[#CMDs + 1] = {NAME = 'spawnpoint / spawn [delay]', DESC = 'Sets a position where you will spawn'}
CMDs[#CMDs + 1] = {NAME = 'nospawnpoint / nospawn', DESC = 'Removes your custom spawn point'}
CMDs[#CMDs + 1] = {NAME = 'flashback / diedtp', DESC = 'Teleports you to where you last died'}
CMDs[#CMDs + 1] = {NAME = 'walltp', DESC = 'Teleports you above/over any wall you run into'}
CMDs[#CMDs + 1] = {NAME = 'nowalltp / unwalltp', DESC = 'Disables walltp'}
CMDs[#CMDs + 1] = {NAME = 'teleporttool / tptool', DESC = 'Gives you a teleport tool'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'logs', DESC = 'Opens the logs GUI'}
CMDs[#CMDs + 1] = {NAME = 'chatlogs / clogs', DESC = 'Log what people say or whisper'}
CMDs[#CMDs + 1] = {NAME = 'joinlogs / jlogs', DESC = 'Log when people join'}
CMDs[#CMDs + 1] = {NAME = 'chatlogswebhook / logswebhook [url]', DESC = 'Set a discord webhook for chatlogs to go to (provide no url to disable this)'}
CMDs[#CMDs + 1] = {NAME = 'antichatlogs / antichatlogger', DESC = 'Prevents Roblox from banning you for your silly chat messages (game needs the legacy chat)'}
CMDs[#CMDs + 1] = {NAME = 'chat / say [text]', DESC = 'Makes you chat a string (possible mute bypass)'}
CMDs[#CMDs + 1] = {NAME = 'spam [text]', DESC = 'Makes you spam the chat'}
CMDs[#CMDs + 1] = {NAME = 'unspam', DESC = 'Turns off spam'}
CMDs[#CMDs + 1] = {NAME = 'whisper / pm [player] [text]', DESC = 'Makes you whisper a string to someone (possible mute bypass)'}
CMDs[#CMDs + 1] = {NAME = 'pmspam [player] [text]', DESC = 'Makes you spam a players whispers'}
CMDs[#CMDs + 1] = {NAME = 'unpmspam [player]', DESC = 'Turns off pm spam'}
CMDs[#CMDs + 1] = {NAME = 'spamspeed [num]', DESC = 'How quickly you spam (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'bubblechat (CLIENT)', DESC = 'Enables bubble chat for your client'}
CMDs[#CMDs + 1] = {NAME = 'unbubblechat / nobubblechat', DESC = 'Disables the bubblechat command'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'esp', DESC = 'View all players and their status'}
CMDs[#CMDs + 1] = {NAME = 'noesp / unesp', DESC = 'Removes esp'}
CMDs[#CMDs + 1] = {NAME = 'esptransparency [number]', DESC = 'Changes the transparency of esp related commands'}
CMDs[#CMDs + 1] = {NAME = 'partesp [part name]', DESC = 'Highlights a part'}
CMDs[#CMDs + 1] = {NAME = 'unpartesp / nopartesp [part name]', DESC = 'removes partesp'}
CMDs[#CMDs + 1] = {NAME = 'chams', DESC = 'ESP but without text in the way'}
CMDs[#CMDs + 1] = {NAME = 'nochams / unchams', DESC = 'Removes chams'}
CMDs[#CMDs + 1] = {NAME = 'locate [player]', DESC = 'View a single player and their status'}
CMDs[#CMDs + 1] = {NAME = 'unlocate / nolocate [player]', DESC = 'Removes locate'}
CMDs[#CMDs + 1] = {NAME = 'xray', DESC = 'Makes all parts in workspace transparent'}
CMDs[#CMDs + 1] = {NAME = 'unxray / noxray', DESC = 'Restores transparency'}
CMDs[#CMDs + 1] = {NAME = 'loopxray', DESC = 'Makes all parts in workspace transparent but looped'}
CMDs[#CMDs + 1] = {NAME = 'unloopunxray', DESC = 'Unloops xray'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'spectate / view [player]', DESC = 'View a player'}
CMDs[#CMDs + 1] = {NAME = 'viewpart / viewp [part name]', DESC = 'View a part'}
CMDs[#CMDs + 1] = {NAME = 'unspectate / unview', DESC = 'Stops viewing player'}
CMDs[#CMDs + 1] = {NAME = 'freecam / fc', DESC = 'Allows you to freely move camera around the game'}
CMDs[#CMDs + 1] = {NAME = 'freecampos / fcpos [X Y Z]', DESC = 'Moves / opens freecam in a certain position'}
CMDs[#CMDs + 1] = {NAME = 'freecamwaypoint / fcwp [name]', DESC = 'Moves / opens freecam to a waypoint'}
CMDs[#CMDs + 1] = {NAME = 'freecamgoto / fcgoto / fctp [player]', DESC = 'Moves / opens freecam to a player'}
CMDs[#CMDs + 1] = {NAME = 'unfreecam / unfc', DESC = 'Disables freecam'}
CMDs[#CMDs + 1] = {NAME = 'freecamspeed / fcspeed [num]', DESC = 'Adjusts freecam speed (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'notifyfreecamposition / notifyfcpos', DESC = 'Noitifies you your freecam coordinates'}
CMDs[#CMDs + 1] = {NAME = 'copyfreecamposition / copyfcpos', DESC = 'Copies your freecam coordinates to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'gotocamera / gotocam', DESC = 'Teleports you to the location of your camera'}
CMDs[#CMDs + 1] = {NAME = 'tweengotocam / tgotocam', DESC = 'Tweens you to the location of your camera'}
CMDs[#CMDs + 1] = {NAME = 'firstp', DESC = 'Forces camera to go into first person'}
CMDs[#CMDs + 1] = {NAME = 'thirdp', DESC = 'Allows camera to go into third person'}
CMDs[#CMDs + 1] = {NAME = 'noclipcam / nccam', DESC = 'Allows camera to go through objects like walls'}
CMDs[#CMDs + 1] = {NAME = 'maxzoom [num]', DESC = 'Maximum camera zoom'}
CMDs[#CMDs + 1] = {NAME = 'minzoom [num]', DESC = 'Minimum camera zoom'}
CMDs[#CMDs + 1] = {NAME = 'camdistance [num]', DESC = 'Changes camera distance from your player'}
CMDs[#CMDs + 1] = {NAME = 'fov [num]', DESC = 'Adjusts field of view (default is 70)'}
CMDs[#CMDs + 1] = {NAME = 'fixcam / restorecam', DESC = 'Fixes camera'}
CMDs[#CMDs + 1] = {NAME = 'enableshiftlock / enablesl', DESC = 'Enables the shift lock option'}
CMDs[#CMDs + 1] = {NAME = 'lookat [player]', DESC = 'Moves your camera view to a player'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'btools (CLIENT)', DESC = 'Gives you building tools (DOES NOT REPLICATE)'}
CMDs[#CMDs + 1] = {NAME = 'f3x (CLIENT)', DESC = 'Gives you F3X building tools (DOES NOT REPLICATE)'}
CMDs[#CMDs + 1] = {NAME = 'partname / partpath', DESC = 'Allows you to click a part to see its path & name'}
CMDs[#CMDs + 1] = {NAME = 'delete [instance name] (CLIENT)', DESC = 'Removes any part with a certain name from the workspace (DOES NOT REPLICATE)'}
CMDs[#CMDs + 1] = {NAME = 'deleteclass / dc [class name] (CLIENT)', DESC = 'Removes any part with a certain classname from the workspace (DOES NOT REPLICATE)'}
CMDs[#CMDs + 1] = {NAME = 'lockworkspace / lockws', DESC = 'Locks the whole workspace'}
CMDs[#CMDs + 1] = {NAME = 'unlockworkspace / unlockws', DESC = 'Unlocks the whole workspace'}
CMDs[#CMDs + 1] = {NAME = 'invisibleparts / invisparts (CLIENT)', DESC = 'Shows invisible parts'}
CMDs[#CMDs + 1] = {NAME = 'uninvisibleparts / uninvisparts (CLIENT)', DESC = 'Makes parts affected by invisparts return to normal'}
CMDs[#CMDs + 1] = {NAME = 'deleteinvisparts / dip (CLIENT)', DESC = 'Deletes invisible parts'}
CMDs[#CMDs + 1] = {NAME = 'gotopart [part name]', DESC = 'Moves your character to a part or multiple parts'}
CMDs[#CMDs + 1] = {NAME = 'tweengotopart / tgotopart [part name]', DESC = 'Tweens your character to a part or multiple parts'}
CMDs[#CMDs + 1] = {NAME = 'gotopartclass / gpc [class name]', DESC = 'Moves your character to a part or multiple parts based on classname'}
CMDs[#CMDs + 1] = {NAME = 'tweengotopartclass / tgpc [class name]', DESC = 'Tweens your character to a part or multiple parts based on classname'}
CMDs[#CMDs + 1] = {NAME = 'gotomodel [part name]', DESC = 'Moves your character to a model or multiple models'}
CMDs[#CMDs + 1] = {NAME = 'tweengotomodel / tgotomodel [part name]', DESC = 'Tweens your character to a model or multiple models'}
CMDs[#CMDs + 1] = {NAME = 'gotopartdelay / gotomodeldelay [num]', DESC = 'Adjusts how quickly you teleport to each part (default is 0.1)'}
CMDs[#CMDs + 1] = {NAME = 'bringpart [part name] (CLIENT)', DESC = 'Moves a part or multiple parts to your character'}
CMDs[#CMDs + 1] = {NAME = 'bringpartclass / bpc [class name] (CLIENT)', DESC = 'Moves a part or multiple parts to your character based on classname'}
CMDs[#CMDs + 1] = {NAME = 'noclickdetectorlimits / nocdlimits', DESC = 'Sets all click detectors MaxActivationDistance to math.huge'}
CMDs[#CMDs + 1] = {NAME = 'fireclickdetectors / firecd [name]', DESC = 'Uses all click detectors in a game or uses the optional name'}
CMDs[#CMDs + 1] = {NAME = 'firetouchinterests / touchinterests [name]', DESC = 'Uses all touchinterests in a game or uses the optional name'}
CMDs[#CMDs + 1] = {NAME = 'noproximitypromptlimits / nopplimits', DESC = 'Sets all proximity prompts MaxActivationDistance to math.huge'}
CMDs[#CMDs + 1] = {NAME = 'fireproximityprompts / firepp [name]', DESC = 'Uses all proximity prompts in a game or uses the optional name'}
CMDs[#CMDs + 1] = {NAME = 'instantproximityprompts / instantpp', DESC = 'Disable the cooldown for proximity prompts'}
CMDs[#CMDs + 1] = {NAME = 'uninstantproximityprompts / uninstantpp', DESC = 'Undo the cooldown removal'}
CMDs[#CMDs + 1] = {NAME = 'tpunanchored / tpua [player]', DESC = 'Teleports unanchored parts to a player'}
CMDs[#CMDs + 1] = {NAME = 'animsunanchored / freezeua', DESC = 'Freezes unanchored parts'}
CMDs[#CMDs + 1] = {NAME = 'thawunanchored / thawua / unfreezeua', DESC = 'Thaws unanchored parts'}
CMDs[#CMDs + 1] = {NAME = 'removeterrain / rterrain / noterrain', DESC = 'Removes all terrain'}
CMDs[#CMDs + 1] = {NAME = 'clearnilinstances / nonilinstances / cni', DESC = 'Removes nil instances'}
CMDs[#CMDs + 1] = {NAME = 'destroyheight / dh [num]', DESC = 'Sets FallenPartsDestroyHeight'}
CMDs[#CMDs + 1] = {NAME = 'fakeout', DESC = 'Tp to the void and then back (useful to kill people attached to you)'}
CMDs[#CMDs + 1] = {NAME = 'antivoid', DESC = 'Prevents you from falling into the void by launching you upwards'}
CMDs[#CMDs + 1] = {NAME = 'unantivoid / noantivoid', DESC = 'Disables antivoid'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'fullbright / fb (CLIENT)', DESC = 'Makes the map brighter / more visible'}
CMDs[#CMDs + 1] = {NAME = 'loopfullbright / loopfb (CLIENT)', DESC = 'Makes the map brighter / more visible but looped'}
CMDs[#CMDs + 1] = {NAME = 'unloopfullbright / unloopfb', DESC = 'Unloops fullbright'}
CMDs[#CMDs + 1] = {NAME = 'ambient [num] [num] [num] (CLIENT)', DESC = 'Changes ambient'}
CMDs[#CMDs + 1] = {NAME = 'day (CLIENT)', DESC = 'Changes the time to day for the client'}
CMDs[#CMDs + 1] = {NAME = 'night (CLIENT)', DESC = 'Changes the time to night for the client'}
CMDs[#CMDs + 1] = {NAME = 'nofog (CLIENT)', DESC = 'Removes fog'}
CMDs[#CMDs + 1] = {NAME = 'brightness [num] (CLIENT)', DESC = 'Changes the brightness lighting property'}
CMDs[#CMDs + 1] = {NAME = 'globalshadows / gshadows (CLIENT)', DESC = 'Enables global shadows'}
CMDs[#CMDs + 1] = {NAME = 'noglobalshadows / nogshadows (CLIENT)', DESC = 'Disables global shadows'}
CMDs[#CMDs + 1] = {NAME = 'restorelighting / rlighting', DESC = 'Restores Lighting properties'}
CMDs[#CMDs + 1] = {NAME = 'light [radius] [brightness] (CLIENT)', DESC = 'Gives your player dynamic light'}
CMDs[#CMDs + 1] = {NAME = 'nolight / unlight', DESC = 'Removes dynamic light from your player'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'inspect / examine [player]', DESC = 'Opens InspectMenu for a certain player'}
CMDs[#CMDs + 1] = {NAME = 'age [player]', DESC = 'Tells you the age of a player'}
CMDs[#CMDs + 1] = {NAME = 'chatage [player]', DESC = 'Chats the age of a player'}
CMDs[#CMDs + 1] = {NAME = 'joindate / jd [player]', DESC = 'Tells you the date the player joined Roblox'}
CMDs[#CMDs + 1] = {NAME = 'chatjoindate / cjd [player]', DESC = 'Chats the date the player joined Roblox'}
CMDs[#CMDs + 1] = {NAME = 'copyname / copyuser [player]', DESC = 'Copies a players full username to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'userid / id [player]', DESC = 'Notifies a players user ID'}
CMDs[#CMDs + 1] = {NAME = 'copyuserid / copyid [player]', DESC = 'Copies a players user ID to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'appearanceid / aid [player]', DESC = 'Notifies a players appearance ID'}
CMDs[#CMDs + 1] = {NAME = 'copyappearanceid / caid [player]', DESC = 'Copies a players appearance ID to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'bang [player] [speed]', DESC = 'owo'}
CMDs[#CMDs + 1] = {NAME = 'unbang', DESC = 'uwu'}
CMDs[#CMDs + 1] = {NAME = 'carpet [player]', DESC = 'Be someones carpet'}
CMDs[#CMDs + 1] = {NAME = 'uncarpet', DESC = 'Undoes carpet'}
CMDs[#CMDs + 1] = {NAME = 'friend [player]', DESC = 'Sends a friend request to certain players'}
CMDs[#CMDs + 1] = {NAME = 'unfriend [player]', DESC = 'Unfriends certain players'}
CMDs[#CMDs + 1] = {NAME = 'headsit [player]', DESC = 'Sit on a players head'}
CMDs[#CMDs + 1] = {NAME = 'walkto / follow [player]', DESC = 'Follow a player'}
CMDs[#CMDs + 1] = {NAME = 'pathfindwalkto / pathfindfollow [player]', DESC = 'Follow a player using pathfinding'}
CMDs[#CMDs + 1] = {NAME = 'pathfindwalktowaypoint / pathfindwalktowp [waypoint]', DESC = 'Walk to a waypoint using pathfinding'}
CMDs[#CMDs + 1] = {NAME = 'unwalkto / unfollow', DESC = 'Stops following a player'}
CMDs[#CMDs + 1] = {NAME = 'orbit [player] [speed] [distance]', DESC = 'Makes your character orbit around a player with an optional speed and an optional distance'}
CMDs[#CMDs + 1] = {NAME = 'unorbit', DESC = 'Disables orbit'}
CMDs[#CMDs + 1] = {NAME = 'stareat / stare [player]', DESC = 'Stare / look at a player'}
CMDs[#CMDs + 1] = {NAME = 'unstareat / unstare [player]', DESC = 'Disables stareat'}
CMDs[#CMDs + 1] = {NAME = 'rolewatch [group id] [role name]', DESC = 'Notify if someone from a watched group joins the server'}
CMDs[#CMDs + 1] = {NAME = 'rolewatchstop / unrolewatch', DESC = 'Disable Rolewatch'}
CMDs[#CMDs + 1] = {NAME = 'rolewatchleave', DESC = 'Toggle if you should leave the game if someone from a watched group joins the server'}
CMDs[#CMDs + 1] = {NAME = 'staffwatch', DESC = 'Notify if a staff member of the game joins the server'}
CMDs[#CMDs + 1] = {NAME = 'unstaffwatch', DESC = 'Disable Staffwatch'}
CMDs[#CMDs + 1] = {NAME = 'attach [player] (TOOL)', DESC = 'Attaches you to a player (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'kill [player] (TOOL)', DESC = 'Kills a player (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'fastkill [player] (TOOL)', DESC = 'Kills a player (less reliable) (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'handlekill / hkill [player] (TOOL)', DESC = 'Kills a player using tool damage (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'bring [player] (TOOL)', DESC = 'Brings a player (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'fastbring [player] (TOOL)', DESC = 'Brings a player (less reliable) (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'teleport / tp [player] [player] (TOOL)', DESC = 'Teleports a player to another player (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'fastteleport / fasttp [player] [player] (TOOL)', DESC = 'Teleports a player to another player (less reliable) (YOU NEED A TOOL)'}
CMDs[#CMDs + 1] = {NAME = 'fling', DESC = 'Flings anyone you touch'}
CMDs[#CMDs + 1] = {NAME = 'unfling', DESC = 'Disables the fling command'}
CMDs[#CMDs + 1] = {NAME = 'flyfling [speed]', DESC = 'Basically the invisfling command but not invisible'}
CMDs[#CMDs + 1] = {NAME = 'unflyfling', DESC = 'Disables the flyfling command'}
CMDs[#CMDs + 1] = {NAME = 'walkfling', DESC = 'Basically fling but no spinning'}
CMDs[#CMDs + 1] = {NAME = 'unwalkfling / nowalkfling', DESC = 'Disables walkfling'}
CMDs[#CMDs + 1] = {NAME = 'invisfling', DESC = 'Enables invisible fling'}
CMDs[#CMDs + 1] = {NAME = 'antifling', DESC = 'Disables player collisions to prevent you from being flung'}
CMDs[#CMDs + 1] = {NAME = 'unantifling', DESC = 'Disables antifling'}
CMDs[#CMDs + 1] = {NAME = 'loopoof', DESC = 'Loops everyones character sounds (everyone can hear)'}
CMDs[#CMDs + 1] = {NAME = 'unloopoof', DESC = 'Stops the oof chaos'}
CMDs[#CMDs + 1] = {NAME = 'muteboombox [player]', DESC = 'Mutes someones boombox'}
CMDs[#CMDs + 1] = {NAME = 'unmuteboombox [player]', DESC = 'Unmutes someones boombox'}
CMDs[#CMDs + 1] = {NAME = 'hitbox [player] [size] [transparency]', DESC = 'Expands the hitbox for players HumanoidRootPart (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'headsize [player] [size]', DESC = 'Expands the head size for players Head (default is 1)'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'reset', DESC = 'Resets your character normally'}
CMDs[#CMDs + 1] = {NAME = 'respawn', DESC = 'Respawns you'}
CMDs[#CMDs + 1] = {NAME = 'refresh / re', DESC = 'Respawns and brings you back to the same position'}
CMDs[#CMDs + 1] = {NAME = 'god', DESC = 'Makes your character difficult to kill in most games'}
CMDs[#CMDs + 1] = {NAME = 'permadeath', DESC = 'Makes you unable to die'}
CMDs[#CMDs + 1] = {NAME = 'invisible / invis', DESC = 'Makes you invisible to other players'}
CMDs[#CMDs + 1] = {NAME = 'visible / vis', DESC = 'Makes you visible to other players'}
CMDs[#CMDs + 1] = {NAME = 'toolinvisible / toolinvis / tinvis', DESC = 'Makes you invisible to other players and able to use tools'}
CMDs[#CMDs + 1] = {NAME = 'speed / ws / walkspeed [num]', DESC = 'Change your walkspeed'}
CMDs[#CMDs + 1] = {NAME = 'spoofspeed / spoofws [num]', DESC = 'Spoofs your WalkSpeed on the Client'}
CMDs[#CMDs + 1] = {NAME = 'loopspeed / loopws [num]', DESC = 'Loops your walkspeed'}
CMDs[#CMDs + 1] = {NAME = 'unloopspeed / unloopws', DESC = 'Turns off loopspeed'}
CMDs[#CMDs + 1] = {NAME = 'hipheight / hheight [num]', DESC = 'Adjusts hip height'}
CMDs[#CMDs + 1] = {NAME = 'jumppower / jpower / jp [num]', DESC = 'Change a players jump height'}
CMDs[#CMDs + 1] = {NAME = 'spoofjumppower / spoofjp [num]', DESC = 'Spoofs your JumpPower on the Client'}
CMDs[#CMDs + 1] = {NAME = 'loopjumppower / loopjp [num]', DESC = 'Loops your jump height'}
CMDs[#CMDs + 1] = {NAME = 'unloopjumppower / unloopjp', DESC = 'Turns off loopjumppower'}
CMDs[#CMDs + 1] = {NAME = 'maxslopeangle / msa [num]', DESC = 'Adjusts MaxSlopeAngle'}
CMDs[#CMDs + 1] = {NAME = 'gravity / grav [num] (CLIENT)', DESC = 'Change your gravity'}
CMDs[#CMDs + 1] = {NAME = 'sit', DESC = 'Makes your character sit'}
CMDs[#CMDs + 1] = {NAME = 'lay / laydown', DESC = 'Makes your character lay down'}
CMDs[#CMDs + 1] = {NAME = 'sitwalk', DESC = 'Makes your character sit while still being able to walk'}
CMDs[#CMDs + 1] = {NAME = 'nosit', DESC = 'Prevents your character from sitting'}
CMDs[#CMDs + 1] = {NAME = 'unnosit', DESC = 'Disables nosit'}
CMDs[#CMDs + 1] = {NAME = 'jump', DESC = 'Makes your character jump'}
CMDs[#CMDs + 1] = {NAME = 'infinitejump / infjump', DESC = 'Allows you to jump before hitting the ground'}
CMDs[#CMDs + 1] = {NAME = 'uninfinitejump / uninfjump', DESC = 'Disables infjump'}
CMDs[#CMDs + 1] = {NAME = 'flyjump', DESC = 'Allows you to hold space to fly up'}
CMDs[#CMDs + 1] = {NAME = 'unflyjump', DESC = 'Disables flyjump'}
CMDs[#CMDs + 1] = {NAME = 'autojump / ajump', DESC = 'Automatically jumps when you run into an object'}
CMDs[#CMDs + 1] = {NAME = 'unautojump / unajump', DESC = 'Disables autojump'}
CMDs[#CMDs + 1] = {NAME = 'edgejump / ejump', DESC = 'Automatically jumps when you get to the edge of an object'}
CMDs[#CMDs + 1] = {NAME = 'unedgejump / unejump', DESC = 'Disables edgejump'}
CMDs[#CMDs + 1] = {NAME = 'platformstand / stun', DESC = 'Enables PlatformStand'}
CMDs[#CMDs + 1] = {NAME = 'unplatformstand / unstun', DESC = 'Disables PlatformStand'}
CMDs[#CMDs + 1] = {NAME = 'norotate / noautorotate', DESC = 'Disables AutoRotate'}
CMDs[#CMDs + 1] = {NAME = 'unnorotate / autorotate', DESC = 'Enables AutoRotate'}
CMDs[#CMDs + 1] = {NAME = 'enablestate [StateType]', DESC = 'Enables a humanoid state type'}
CMDs[#CMDs + 1] = {NAME = 'disablestate [StateType]', DESC = 'Disables a humanoid state type'}
CMDs[#CMDs + 1] = {NAME = 'team [team name] (CLIENT)', DESC = 'Changes your team. Sometimes fools localscripts.'}
CMDs[#CMDs + 1] = {NAME = 'nobillboardgui / nobgui / noname', DESC = 'Removes billboard and surface guis from your players (i.e. name guis at cafes)'}
CMDs[#CMDs + 1] = {NAME = 'loopnobgui / loopnoname', DESC = 'Loop removes billboard and surface guis from your players (i.e. name guis at cafes)'}
CMDs[#CMDs + 1] = {NAME = 'unloopnobgui / unloopnoname', DESC = 'Disables loopnobgui'}
CMDs[#CMDs + 1] = {NAME = 'noarms', DESC = 'Removes your arms'}
CMDs[#CMDs + 1] = {NAME = 'nolegs', DESC = 'Removes your legs'}
CMDs[#CMDs + 1] = {NAME = 'nolimbs', DESC = 'Removes your limbs'}
CMDs[#CMDs + 1] = {NAME = 'naked (CLIENT)', DESC = 'Removes your clothing'}
CMDs[#CMDs + 1] = {NAME = 'noface / removeface', DESC = 'Removes your face'}
CMDs[#CMDs + 1] = {NAME = 'blockhead', DESC = 'Turns your head into a block'}
CMDs[#CMDs + 1] = {NAME = 'blockhats', DESC = 'Turns your hats into blocks'}
CMDs[#CMDs + 1] = {NAME = 'blocktool', DESC = 'Turns the currently selected tool into a block'}
CMDs[#CMDs + 1] = {NAME = 'creeper', DESC = 'Makes you look like a creeper'}
CMDs[#CMDs + 1] = {NAME = 'drophats', DESC = 'Drops your hats'}
CMDs[#CMDs + 1] = {NAME = 'nohats / deletehats / rhats', DESC = 'Deletes your hats'}
CMDs[#CMDs + 1] = {NAME = 'hatspin / spinhats', DESC = 'Spins your characters accessories'}
CMDs[#CMDs + 1] = {NAME = 'unhatspin / unspinhats', DESC = 'Undoes spinhats'}
CMDs[#CMDs + 1] = {NAME = 'clearhats / cleanhats', DESC = 'Clears hats in the workspace'}
CMDs[#CMDs + 1] = {NAME = 'chardelete / cd [instance name]', DESC = 'Removes any part with a certain name from your character'}
CMDs[#CMDs + 1] = {NAME = 'chardeleteclass / cdc [class name]', DESC = 'Removes any part with a certain classname from your character'}
CMDs[#CMDs + 1] = {NAME = 'deletevelocity / dv / removeforces', DESC = 'Removes any velocity / force instances in your character'}
CMDs[#CMDs + 1] = {NAME = 'weaken [num]', DESC = 'Makes your character less dense'}
CMDs[#CMDs + 1] = {NAME = 'unweaken', DESC = 'Sets your characters CustomPhysicalProperties to default'}
CMDs[#CMDs + 1] = {NAME = 'strengthen [num]', DESC = 'Makes your character more dense (CustomPhysicalProperties)'}
CMDs[#CMDs + 1] = {NAME = 'unstrengthen', DESC = 'Sets your characters CustomPhysicalProperties to default'}
CMDs[#CMDs + 1] = {NAME = 'breakvelocity', DESC = 'Sets your characters velocity to 0'}
CMDs[#CMDs + 1] = {NAME = 'spin [speed]', DESC = 'Spins your character'}
CMDs[#CMDs + 1] = {NAME = 'unspin', DESC = 'Disables spin'}
CMDs[#CMDs + 1] = {NAME = 'split', DESC = 'Splits your character in half'}
CMDs[#CMDs + 1] = {NAME = 'nilchar', DESC = 'Sets your characters parent to nil'}
CMDs[#CMDs + 1] = {NAME = 'unnilchar / nonilchar', DESC = 'Sets your characters parent to workspace'}
CMDs[#CMDs + 1] = {NAME = 'noroot / removeroot / rroot', DESC = 'Removes your characters HumanoidRootPart'}
CMDs[#CMDs + 1] = {NAME = 'replaceroot', DESC = 'Replaces your characters HumanoidRootPart'}
CMDs[#CMDs + 1] = {NAME = 'clearcharappearance / clearchar / clrchar', DESC = 'Removes all accessory, shirt, pants, charactermesh, and bodycolors'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'animation / anim [ID] [speed]', DESC = 'Makes your character perform an animation (must be by roblox to replicate)'}
CMDs[#CMDs + 1] = {NAME = 'dance', DESC = 'Makes you  d a n c e'}
CMDs[#CMDs + 1] = {NAME = 'undance', DESC = 'Stops dance animations'}
CMDs[#CMDs + 1] = {NAME = 'spasm', DESC = 'Makes you  c r a z y'}
CMDs[#CMDs + 1] = {NAME = 'unspasm', DESC = 'Stops spasm'}
CMDs[#CMDs + 1] = {NAME = 'headthrow', DESC = 'Simply makes you throw your head'}
CMDs[#CMDs + 1] = {NAME = 'noanim', DESC = 'Disables your animations'}
CMDs[#CMDs + 1] = {NAME = 'reanim', DESC = 'Restores your animations'}
CMDs[#CMDs + 1] = {NAME = 'animspeed [num]', DESC = 'Changes the speed of your current animation'}
CMDs[#CMDs + 1] = {NAME = 'copyanimation / copyanim / copyemote [player]', DESC = 'Copies someone elses animation'}
CMDs[#CMDs + 1] = {NAME = 'copyanimationid / copyanimid / copyemoteid [player]', DESC = 'Copies your animation id or someone elses to your clipboard'}
CMDs[#CMDs + 1] = {NAME = 'loopanimation / loopanim', DESC = 'Loops your current animation'}
CMDs[#CMDs + 1] = {NAME = 'stopanimations / stopanims', DESC = 'Stops running animations'}
CMDs[#CMDs + 1] = {NAME = 'refreshanimations / refreshanims', DESC = 'Refreshes animations'}
CMDs[#CMDs + 1] = {NAME = 'allowcustomanim / allowcustomanimations', DESC = 'Lets you use custom animation packs instead'}
CMDs[#CMDs + 1] = {NAME = 'unallowcustomanim / unallowcustomanimations', DESC = 'Doesn\'t let you use custom animation packs instead'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'autoclick [click delay] [release delay]', DESC = 'Automatically clicks your mouse with a set delay'}
CMDs[#CMDs + 1] = {NAME = 'unautoclick / noautoclick', DESC = 'Turns off autoclick'}
CMDs[#CMDs + 1] = {NAME = 'autokeypress [key] [down delay] [up delay]', DESC = 'Automatically presses a key with a set delay'}
CMDs[#CMDs + 1] = {NAME = 'unautokeypress', DESC = 'Stops autokeypress'}
CMDs[#CMDs + 1] = {NAME = 'hovername', DESC = 'Shows a players username when your mouse is hovered over them'}
CMDs[#CMDs + 1] = {NAME = 'unhovername / nohovername', DESC = 'Turns off hovername'}
CMDs[#CMDs + 1] = {NAME = 'mousesensitivity / ms [0-10]', DESC = 'Sets your mouse sensitivity (affects first person and right click drag) (default is 1)'}
CMDs[#CMDs + 1] = {NAME = 'clickdelete', DESC = 'Go to settings>Keybinds>Add for clicktp'}
CMDs[#CMDs + 1] = {NAME = 'clickteleport', DESC = 'Go to settings>Keybinds>Add for click tp'}
CMDs[#CMDs + 1] = {NAME = 'mouseteleport / mousetp', DESC = 'Teleports your character to your mouse. This is recommended as a keybind'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'tools', DESC = 'Copies tools from ReplicatedStorage and Lighting'}
CMDs[#CMDs + 1] = {NAME = 'notools / removetools / deletetools', DESC = 'Removes tools from character and backpack'}
CMDs[#CMDs + 1] = {NAME = 'deleteselectedtool / dst', DESC = 'Removes any currently selected tools'}
CMDs[#CMDs + 1] = {NAME = 'grabtools', DESC = 'Automatically get tools that are dropped'}
CMDs[#CMDs + 1] = {NAME = 'ungrabtools / nograbtools', DESC = 'Disables grabtools'}
CMDs[#CMDs + 1] = {NAME = 'copytools [player] (CLIENT)', DESC = 'Copies a players tools'}
CMDs[#CMDs + 1] = {NAME = 'dupetools / clonetools [num]', DESC = 'Duplicates your inventory tools a set amount of times'}
CMDs[#CMDs + 1] = {NAME = 'givetool / givetools', DESC = 'Gives all the tools you\'re holding to [player] using the attach method.'}
CMDs[#CMDs + 1] = {NAME = 'droptools', DESC = 'Drops your tools'}
CMDs[#CMDs + 1] = {NAME = 'droppabletools', DESC = 'Makes your tools droppable'}
CMDs[#CMDs + 1] = {NAME = 'equiptools', DESC = 'Equips every tool in your inventory at once'}
CMDs[#CMDs + 1] = {NAME = 'unequiptools', DESC = 'Unequips every tool you are currently holding at once'}
CMDs[#CMDs + 1] = {NAME = 'removespecifictool [name]', DESC = 'Automatically remove a specific tool from your inventory'}
CMDs[#CMDs + 1] = {NAME = 'unremovespecifictool [name]', DESC = 'Stops removing a specific tool from your inventory'}
CMDs[#CMDs + 1] = {NAME = 'clearremovespecifictool', DESC = 'Stop removing all specific tools from your inventory'}
CMDs[#CMDs + 1] = {NAME = 'reach [num]', DESC = 'Increases the hitbox of your held tool'}
CMDs[#CMDs + 1] = {NAME = 'boxreach [num]', DESC = 'Increases the hitbox of your held tool in a box shape'}
CMDs[#CMDs + 1] = {NAME = 'unreach / noreach', DESC = 'Turns off reach'}
CMDs[#CMDs + 1] = {NAME = 'grippos [X Y Z]', DESC = 'Changes your current tools grip position'}
CMDs[#CMDs + 1] = {NAME = 'usetools [amount] [delay]', DESC = 'Activates all tools in your backpack at the same time'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'addalias [cmd] [alias]', DESC = 'Adds an alias to a command'}
CMDs[#CMDs + 1] = {NAME = 'removealias [alias]', DESC = 'Removes a custom alias'}
CMDs[#CMDs + 1] = {NAME = 'clraliases', DESC = 'Removes all custom aliases'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'addplugin / plugin [name]', DESC = 'Add a plugin via command'}
CMDs[#CMDs + 1] = {NAME = 'removeplugin / deleteplugin [name]', DESC = 'Remove a plugin via command'}
CMDs[#CMDs + 1] = {NAME = 'reloadplugin [name]', DESC = 'Reloads a plugin'}
CMDs[#CMDs + 1] = {NAME = 'addallplugins / loadallplugins', DESC = 'Adds all available plugins from the workspace folder'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = 'breakloops / break (cmd loops)', DESC = 'Stops any cmd loops (;100^1^cmd)'}
CMDs[#CMDs + 1] = {NAME = 'removecmd / deletecmd', DESC = 'Removes a command until the admin is reloaded'}
CMDs[#CMDs + 1] = {NAME = 'tpwalk / teleportwalk [num]', DESC = 'Teleports you to your move direction'}
CMDs[#CMDs + 1] = {NAME = 'untpwalk / unteleportwalk', DESC = 'Undoes tpwalk / teleportwalk'}
CMDs[#CMDs + 1] = {NAME = 'notifyping / ping', DESC = 'Notify yourself your ping'}
CMDs[#CMDs + 1] = {NAME = 'trip', DESC = 'Makes your character fall over'}
CMDs[#CMDs + 1] = {NAME = 'norender', DESC = 'Disable 3d Rendering to decrease the amount of CPU the client uses'}
CMDs[#CMDs + 1] = {NAME = 'render', DESC = 'Enable 3d Rendering'}
CMDs[#CMDs + 1] = {NAME = 'use2022materials / 2022materials', DESC = 'Enables 2022 material textures'}
CMDs[#CMDs + 1] = {NAME = 'unuse2022materials / un2022materials', DESC = 'Disables 2022 material textures'}
CMDs[#CMDs + 1] = {NAME = 'promptr6', DESC = 'Prompts the game to switch your rig type to R6'}
CMDs[#CMDs + 1] = {NAME = 'promptr15', DESC = 'Prompts the game to switch your rig type to R15'}
CMDs[#CMDs + 1] = {NAME = 'wallwalk / walkonwalls', DESC = 'Walk on walls'}
CMDs[#CMDs + 1] = {NAME = 'removeads / adblock', DESC = 'Automatically removes ad billboards'}
CMDs[#CMDs + 1] = {NAME = 'scare / spook [player]', DESC = 'Teleports in front of a player for half a second'}
CMDs[#CMDs + 1] = {NAME = 'alignmentkeys', DESC = 'Enables the left and right alignment keys (comma and period)'}
CMDs[#CMDs + 1] = {NAME = 'unalignmentkeys / noalignmentkeys', DESC = 'Disables the alignment keys'}
CMDs[#CMDs + 1] = {NAME = 'ctrllock', DESC = 'Binds Shiftlock to LeftControl'}
CMDs[#CMDs + 1] = {NAME = 'unctrllock', DESC = 'Re-binds Shiftlock to LeftShift'}
CMDs[#CMDs + 1] = {NAME = 'listento [player]', DESC = 'Listens to the area around a player. Can also eavesdrop with vc'}
CMDs[#CMDs + 1] = {NAME = 'unlistento', DESC = 'Disables listento'}
CMDs[#CMDs + 1] = {NAME = 'jerk', DESC = 'Makes you jork it'}
CMDs[#CMDs + 1] = {NAME = 'unsuspendvc', DESC = 'Unsuspends you from voice chat'}
wait()

for i = 1, #CMDs do
	local newcmd = Example:Clone()
	newcmd.Parent = CMDsF
	newcmd.Visible = false
	newcmd.Text = CMDs[i].NAME
	newcmd.Name = "CMD"
	table.insert(text1, newcmd)
	if CMDs[i].DESC ~= "" then
		newcmd:SetAttribute("Title", CMDs[i].NAME)
		newcmd:SetAttribute("Desc", CMDs[i].DESC)
		newcmd.MouseButton1Down:Connect(function()
			if not IsOnMobile and newcmd.Visible and newcmd.TextTransparency == 0 then
				local currentText = Cmdbar.Text
				Cmdbar:CaptureFocus()
				autoComplete(newcmd.Text, currentText)
				maximizeHolder()
			end
		end)
	end
end

IndexContents("", true)

function checkTT()
	local t
	local guisAtPosition = COREGUI:GetGuiObjectsAtPosition(IYMouse.X, IYMouse.Y)

	for _, gui in pairs(guisAtPosition) do
		if gui.Parent == CMDsF then
			t = gui
		end
	end

	if t ~= nil and t:GetAttribute("Title") ~= nil then
		local x = IYMouse.X
		local y = IYMouse.Y
		local xP
		local yP
		if IYMouse.X > 200 then
			xP = x - 201
		else
			xP = x + 21
		end
		if IYMouse.Y > (IYMouse.ViewSizeY-96) then
			yP = y - 97
		else
			yP = y
		end
		Tooltip.Position = UDim2.new(0, xP, 0, yP)
		Description.Text = t:GetAttribute("Desc")
		if t:GetAttribute("Title") ~= nil then
			Title_3.Text = t:GetAttribute("Title")
		else
			Title_3.Text = ''
		end
		Tooltip.Visible = true
	else
		Tooltip.Visible = false
	end
end

function FindInTable(tbl,val)
	if tbl == nil then return false end
	for _,v in pairs(tbl) do
		if v == val then return true end
	end 
	return false
end

function GetInTable(Table, Name)
	for i = 1, #Table do
		if Table[i] == Name then
			return i
		end
	end
	return false
end

function permadeath(plr)
    if replicatesignal then
        replicatesignal(plr.ConnectDiedSignalBackend)
        task.wait(Players.RespawnTime - 0.165)
    end
end

function respawn(plr)
    if invisRunning then TurnVisible() end
    permadeath(plr)
    local char = plr.Character
    local hum = char:FindFirstChildWhichIsA("Humanoid")
    if hum then hum:ChangeState(Enum.HumanoidStateType.Dead) end
    if not replicatesignal then wait() end
    char:ClearAllChildren()
    local newChar = Instance.new("Model")
    newChar.Parent = workspace
    plr.Character = newChar
    wait()
    plr.Character = char
    newChar:Destroy()
end

local refreshCmd = false
function refresh(plr)
	refreshCmd = true
	local Human = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid", true)
	local pos = Human and Human.RootPart and Human.RootPart.CFrame
	local pos1 = workspace.CurrentCamera.CFrame
	respawn(plr)
	task.spawn(function()
		plr.CharacterAdded:Wait():WaitForChild("Humanoid").RootPart.CFrame, workspace.CurrentCamera.CFrame = pos, wait() and pos1
		refreshCmd = false
	end)
end

local lastDeath

function onDied()
	task.spawn(function()
		if pcall(function() Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') end) and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
			Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function()
				if getRoot(Players.LocalPlayer.Character) then
					lastDeath = getRoot(Players.LocalPlayer.Character).CFrame
				end
			end)
		else
			wait(2)
			onDied()
		end
	end)
end

Clip = true
spDelay = 0.1
Players.LocalPlayer.CharacterAdded:Connect(function()
	NOFLY()
	Floating = false

	if not Clip then
		execCmd('clip')
	end

	repeat wait() until getRoot(Players.LocalPlayer.Character)

	pcall(function()
		if spawnpoint and not refreshCmd and spawnpos ~= nil then
			wait(spDelay)
			getRoot(Players.LocalPlayer.Character).CFrame = spawnpos
		end
	end)

	onDied()
end)

onDied()

function getstring(begin)
	local start = begin-1
	local AA = '' for i,v in pairs(cargs) do
		if i > start then
			if AA ~= '' then
				AA = AA .. ' ' .. v
			else
				AA = AA .. v
			end
		end
	end
	return AA
end

findCmd=function(cmd_name)
	for i,v in pairs(cmds)do
		if v.NAME:lower()==cmd_name:lower() or FindInTable(v.ALIAS,cmd_name:lower()) then
			return v
		end
	end
	return customAlias[cmd_name:lower()]
end

function splitString(str,delim)
	local broken = {}
	if delim == nil then delim = "," end
	for w in string.gmatch(str,"[^"..delim.."]+") do
		table.insert(broken,w)
	end
	return broken
end

cmdHistory = {}
local lastCmds = {}
local historyCount = 0
local split=" "
local lastBreakTime = 0
function execCmd(cmdStr,speaker,store)
	cmdStr = cmdStr:gsub("%s+$","")
	task.spawn(function()
		local rawCmdStr = cmdStr
		cmdStr = string.gsub(cmdStr,"\\\\","%%BackSlash%%")
		local commandsToRun = splitString(cmdStr,"\\")
		for i,v in pairs(commandsToRun) do
			v = string.gsub(v,"%%BackSlash%%","\\")
			local x,y,num = v:find("^(%d+)%^")
			local cmdDelay = 0
			local infTimes = false
			if num then
				v = v:sub(y+1)
				local x,y,del = v:find("^([%d%.]+)%^")
				if del then
					v = v:sub(y+1)
					cmdDelay = tonumber(del) or 0
				end
			else
				local x,y = v:find("^inf%^")
				if x then
					infTimes = true
					v = v:sub(y+1)
					local x,y,del = v:find("^([%d%.]+)%^")
					if del then
						v = v:sub(y+1)
						del = tonumber(del) or 1
						cmdDelay = (del > 0 and del or 1)
					else
						cmdDelay = 1
					end
				end
			end
			num = tonumber(num or 1)

			if v:sub(1,1) == "!" then
				local chunks = splitString(v:sub(2),split)
				if chunks[1] and lastCmds[chunks[1]] then v = lastCmds[chunks[1]] end
			end

			local args = splitString(v,split)
			local cmdName = args[1]
			local cmd = findCmd(cmdName)
			if cmd then
				table.remove(args,1)
				cargs = args
				if not speaker then speaker = Players.LocalPlayer end
				if store then
					if speaker == Players.LocalPlayer then
						if cmdHistory[1] ~= rawCmdStr and rawCmdStr:sub(1,11) ~= 'lastcommand' and rawCmdStr:sub(1,7) ~= 'lastcmd' then
							table.insert(cmdHistory,1,rawCmdStr)
						end
					end
					if #cmdHistory > 30 then table.remove(cmdHistory) end

					lastCmds[cmdName] = v
				end
				local cmdStartTime = tick()
				if infTimes then
					while lastBreakTime < cmdStartTime do
						local success,err = pcall(cmd.FUNC,args, speaker)
						if not success and _G.IY_DEBUG then
							warn("Command Error:", cmdName, err)
						end
						wait(cmdDelay)
					end
				else
					for rep = 1,num do
						if lastBreakTime > cmdStartTime then break end
						local success,err = pcall(function()
							cmd.FUNC(args, speaker)
						end)
						if not success and _G.IY_DEBUG then
							warn("Command Error:", cmdName, err)
						end
						if cmdDelay ~= 0 then wait(cmdDelay) end
					end
				end
			end
		end
	end)
end	

function addcmd(name,alias,func,plgn)
	cmds[#cmds+1]=
		{
			NAME=name;
			ALIAS=alias or {};
			FUNC=func;
			PLUGIN=plgn;
		}
end

function removecmd(cmd)
	if cmd ~= " " then
		for i = #cmds,1,-1 do
			if cmds[i].NAME == cmd or FindInTable(cmds[i].ALIAS,cmd) then
				table.remove(cmds, i)
				for a,c in pairs(CMDsF:GetChildren()) do
					if string.find(c.Text, "^"..cmd.."$") or string.find(c.Text, "^"..cmd.." ") or string.find(c.Text, " "..cmd.."$") or string.find(c.Text, " "..cmd.." ") then
						c.TextTransparency = 0.7
						c.MouseButton1Click:Connect(function()
							notify(c.Text, "Command has been disabled by you or a plugin")
						end)
					end
				end
			end
		end
	end
end

function overridecmd(name, func)
    local cmd = findCmd(name)
    if cmd and cmd.FUNC then cmd.FUNC = func end
end

function addbind(cmd,key,iskeyup,toggle)
	if toggle then
		binds[#binds+1]=
			{
				COMMAND=cmd;
				KEY=key;
				ISKEYUP=iskeyup;
				TOGGLE = toggle;
			}
	else
		binds[#binds+1]=
			{
				COMMAND=cmd;
				KEY=key;
				ISKEYUP=iskeyup;
			}
	end
end

function addcmdtext(text,name,desc)
	local newcmd = Example:Clone()
	local tooltipText = tostring(text)
	local tooltipDesc = tostring(desc)
	newcmd.Parent = CMDsF
	newcmd.Visible = false
	newcmd.Text = text
	newcmd.Name = 'PLUGIN_'..name
	table.insert(text1,newcmd)
	if desc and desc ~= '' then
		newcmd:SetAttribute("Title", tooltipText)
		newcmd:SetAttribute("Desc", tooltipDesc)
		newcmd.MouseButton1Down:Connect(function()
			if newcmd.Visible and newcmd.TextTransparency == 0 then
				Cmdbar:CaptureFocus()
				autoComplete(newcmd.Text)
				maximizeHolder()
			end
		end)
	end
end

local WorldToScreen = function(Object)
	local ObjectVector = workspace.CurrentCamera:WorldToScreenPoint(Object.Position)
	return Vector2.new(ObjectVector.X, ObjectVector.Y)
end

local MousePositionToVector2 = function()
	return Vector2.new(IYMouse.X, IYMouse.Y)
end

local GetClosestPlayerFromCursor = function()
	local found = nil
	local ClosestDistance = math.huge
	for i, v in pairs(Players:GetPlayers()) do
		if v ~= Players.LocalPlayer and v.Character and v.Character:FindFirstChildOfClass("Humanoid") then
			for k, x in pairs(v.Character:GetChildren()) do
				if string.find(x.Name, "Torso") then
					local Distance = (WorldToScreen(x) - MousePositionToVector2()).Magnitude
					if Distance < ClosestDistance then
						ClosestDistance = Distance
						found = v
					end
				end
			end
		end
	end
	return found
end

SpecialPlayerCases = {
	["all"] = function(speaker) return Players:GetPlayers() end,
	["others"] = function(speaker)
		local plrs = {}
		for i,v in pairs(Players:GetPlayers()) do
			if v ~= speaker then
				table.insert(plrs,v)
			end
		end
		return plrs
	end,
	["me"] = function(speaker)return {speaker} end,
	["#(%d+)"] = function(speaker,args,currentList)
		local returns = {}
		local randAmount = tonumber(args[1])
		local players = {unpack(currentList)}
		for i = 1,randAmount do
			if #players == 0 then break end
			local randIndex = math.random(1,#players)
			table.insert(returns,players[randIndex])
			table.remove(players,randIndex)
		end
		return returns
	end,
	["random"] = function(speaker,args,currentList)
		local players = Players:GetPlayers()
		local localplayer = Players.LocalPlayer
		table.remove(players, table.find(players, localplayer))
		return {players[math.random(1,#players)]}
	end,
	["%%(.+)"] = function(speaker,args)
		local returns = {}
		local team = args[1]
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team and string.sub(string.lower(plr.Team.Name),1,#team) == string.lower(team) then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["allies"] = function(speaker)
		local returns = {}
		local team = speaker.Team
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team == team then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["enemies"] = function(speaker)
		local returns = {}
		local team = speaker.Team
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team ~= team then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["team"] = function(speaker)
		local returns = {}
		local team = speaker.Team
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team == team then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["nonteam"] = function(speaker)
		local returns = {}
		local team = speaker.Team
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Team ~= team then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["friends"] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if plr:IsFriendsWith(speaker.UserId) and plr ~= speaker then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["nonfriends"] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if not plr:IsFriendsWith(speaker.UserId) and plr ~= speaker then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["guests"] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Guest then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["bacons"] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Character:FindFirstChild('Pal Hair') or plr.Character:FindFirstChild('Kate Hair') then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["age(%d+)"] = function(speaker,args)
		local returns = {}
		local age = tonumber(args[1])
		if not age == nil then return end
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.AccountAge <= age then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["nearest"] = function(speaker,args,currentList)
		local speakerChar = speaker.Character
		if not speakerChar or not getRoot(speakerChar) then return end
		local lowest = math.huge
		local NearestPlayer = nil
		for _,plr in pairs(currentList) do
			if plr ~= speaker and plr.Character then
				local distance = plr:DistanceFromCharacter(getRoot(speakerChar).Position)
				if distance < lowest then
					lowest = distance
					NearestPlayer = {plr}
				end
			end
		end
		return NearestPlayer
	end,
	["farthest"] = function(speaker,args,currentList)
		local speakerChar = speaker.Character
		if not speakerChar or not getRoot(speakerChar) then return end
		local highest = 0
		local Farthest = nil
		for _,plr in pairs(currentList) do
			if plr ~= speaker and plr.Character then
				local distance = plr:DistanceFromCharacter(getRoot(speakerChar).Position)
				if distance > highest then
					highest = distance
					Farthest = {plr}
				end
			end
		end
		return Farthest
	end,
	["group(%d+)"] = function(speaker,args)
		local returns = {}
		local groupID = tonumber(args[1])
		for _,plr in pairs(Players:GetPlayers()) do
			if plr:IsInGroup(groupID) then  
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["alive"] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["dead"] = function(speaker,args)
		local returns = {}
		for _,plr in pairs(Players:GetPlayers()) do
			if (not plr.Character or not plr.Character:FindFirstChildOfClass("Humanoid")) or plr.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then
				table.insert(returns,plr)
			end
		end
		return returns
	end,
	["rad(%d+)"] = function(speaker,args)
		local returns = {}
		local radius = tonumber(args[1])
		local speakerChar = speaker.Character
		if not speakerChar or not getRoot(speakerChar) then return end
		for _,plr in pairs(Players:GetPlayers()) do
			if plr.Character and getRoot(plr.Character) then
				local magnitude = (getRoot(plr.Character).Position-getRoot(speakerChar).Position).magnitude
				if magnitude <= radius then table.insert(returns,plr) end
			end
		end
		return returns
	end,
	["cursor"] = function(speaker)
		local plrs = {}
		local v = GetClosestPlayerFromCursor()
		if v ~= nil then table.insert(plrs, v) end
		return plrs
	end,
	["npcs"] = function(speaker,args)
		local returns = {}
		for _, v in pairs(workspace:GetDescendants()) do
			if v:IsA("Model") and getRoot(v) and v:FindFirstChildWhichIsA("Humanoid") and Players:GetPlayerFromCharacter(v) == nil then
				local clone = Instance.new("Player")
				clone.Name = v.Name .. " - " .. v:FindFirstChildWhichIsA("Humanoid").DisplayName
				clone.Character = v
				table.insert(returns, clone)
			end
		end
		return returns
	end,
}

function toTokens(str)
	local tokens = {}
	for op,name in string.gmatch(str,"([+-])([^+-]+)") do
		table.insert(tokens,{Operator = op,Name = name})
	end
	return tokens
end

function onlyIncludeInTable(tab,matches)
	local matchTable = {}
	local resultTable = {}
	for i,v in pairs(matches) do matchTable[v.Name] = true end
	for i,v in pairs(tab) do if matchTable[v.Name] then table.insert(resultTable,v) end end
	return resultTable
end

function removeTableMatches(tab,matches)
	local matchTable = {}
	local resultTable = {}
	for i,v in pairs(matches) do matchTable[v.Name] = true end
	for i,v in pairs(tab) do if not matchTable[v.Name] then table.insert(resultTable,v) end end
	return resultTable
end

function getPlayersByName(Name)
	local Name,Len,Found = string.lower(Name),#Name,{}
	for _,v in pairs(Players:GetPlayers()) do
		if Name:sub(0,1) == '@' then
			if string.sub(string.lower(v.Name),1,Len-1) == Name:sub(2) then
				table.insert(Found,v)
			end
		else
			if string.sub(string.lower(v.Name),1,Len) == Name or string.sub(string.lower(v.DisplayName),1,Len) == Name then
				table.insert(Found,v)
			end
		end
	end
	return Found
end

function getPlayer(list,speaker)
	if list == nil then return {speaker.Name} end
	local nameList = splitString(list,",")

	local foundList = {}

	for _,name in pairs(nameList) do
		if string.sub(name,1,1) ~= "+" and string.sub(name,1,1) ~= "-" then name = "+"..name end
		local tokens = toTokens(name)
		local initialPlayers = Players:GetPlayers()

		for i,v in pairs(tokens) do
			if v.Operator == "+" then
				local tokenContent = v.Name
				local foundCase = false
				for regex,case in pairs(SpecialPlayerCases) do
					local matches = {string.match(tokenContent,"^"..regex.."$")}
					if #matches > 0 then
						foundCase = true
						initialPlayers = onlyIncludeInTable(initialPlayers,case(speaker,matches,initialPlayers))
					end
				end
				if not foundCase then
					initialPlayers = onlyIncludeInTable(initialPlayers,getPlayersByName(tokenContent))
				end
			else
				local tokenContent = v.Name
				local foundCase = false
				for regex,case in pairs(SpecialPlayerCases) do
					local matches = {string.match(tokenContent,"^"..regex.."$")}
					if #matches > 0 then
						foundCase = true
						initialPlayers = removeTableMatches(initialPlayers,case(speaker,matches,initialPlayers))
					end
				end
				if not foundCase then
					initialPlayers = removeTableMatches(initialPlayers,getPlayersByName(tokenContent))
				end
			end
		end

		for i,v in pairs(initialPlayers) do table.insert(foundList,v) end
	end

	local foundNames = {}
	for i,v in pairs(foundList) do table.insert(foundNames,v.Name) end

	return foundNames
end

formatUsername = function(player)
    if player.DisplayName ~= player.Name then
        return string.format("%s (%s)", player.Name, player.DisplayName)
    end
    return player.Name
end

getprfx=function(strn)
	if strn:sub(1,string.len(prefix))==prefix then return{'cmd',string.len(prefix)+1}
	end return
end

function do_exec(str, plr)
	str = str:gsub('/e ', '')
	local t = getprfx(str)
	if not t then return end
	str = str:sub(t[2])
	if t[1]=='cmd' then
		execCmd(str, plr, true)
		IndexContents('',true,false,true)
		CMDsF.CanvasPosition = canvasPos
	end
end

lastTextBoxString,lastTextBoxCon,lastEnteredString = nil,nil,nil

UserInputService.TextBoxFocused:Connect(function(obj)
	if lastTextBoxCon then lastTextBoxCon:Disconnect() end
	if obj == Cmdbar then lastTextBoxString = nil return end
	lastTextBoxString = obj.Text
	lastTextBoxCon = obj:GetPropertyChangedSignal("Text"):Connect(function()
		if not (UserInputService:IsKeyDown(Enum.KeyCode.Return) or UserInputService:IsKeyDown(Enum.KeyCode.KeypadEnter)) then
			lastTextBoxString = obj.Text
		end
	end)
end)

UserInputService.InputBegan:Connect(function(input,gameProcessed)
	if gameProcessed then
		if Cmdbar and Cmdbar:IsFocused() then
			if input.KeyCode == Enum.KeyCode.Up then
				historyCount = historyCount + 1
				if historyCount > #cmdHistory then historyCount = #cmdHistory end
				Cmdbar.Text = cmdHistory[historyCount] or ""
				Cmdbar.CursorPosition = 1020
			elseif input.KeyCode == Enum.KeyCode.Down then
				historyCount = historyCount - 1
				if historyCount < 0 then historyCount = 0 end
				Cmdbar.Text = cmdHistory[historyCount] or ""
				Cmdbar.CursorPosition = 1020
			end
		elseif input.KeyCode == Enum.KeyCode.Return or input.KeyCode == Enum.KeyCode.KeypadEnter then
			lastEnteredString = lastTextBoxString
		end
	end
end)

Players.LocalPlayer.Chatted:Connect(function()
	wait()
	if lastEnteredString then
		local message = lastEnteredString
		lastEnteredString = nil
		do_exec(message, Players.LocalPlayer)
	end
end)

Cmdbar.PlaceholderText = "Command Bar ("..prefix..")"
Cmdbar:GetPropertyChangedSignal("Text"):Connect(function()
	if Cmdbar:IsFocused() then
		IndexContents(Cmdbar.Text,true,true)
	end
end)

local tabComplete = nil
tabAllowed = true
Cmdbar.FocusLost:Connect(function(enterpressed)
	if enterpressed then
		local cmdbarText = Cmdbar.Text:gsub("^"..prefix,"")
		execCmd(cmdbarText,Players.LocalPlayer,true)
	end
	if tabComplete then tabComplete:Disconnect() end
	wait()
	if not Cmdbar:IsFocused() then
		Cmdbar.Text = ""
		IndexContents('',true,false,true)
		if SettingsOpen == true then
			wait(0.2)
			Settings:TweenPosition(UDim2.new(0, 0, 0, 45), "InOut", "Quart", 0.2, true, nil)
			CMDsF.Visible = false
		end
	end
	CMDsF.CanvasPosition = canvasPos
end)

Cmdbar.Focused:Connect(function()
	historyCount = 0
	canvasPos = CMDsF.CanvasPosition
	if SettingsOpen == true then
		wait(0.2)
		CMDsF.Visible = true
		Settings:TweenPosition(UDim2.new(0, 0, 0, 220), "InOut", "Quart", 0.2, true, nil)
	end
	tabComplete = UserInputService.InputBegan:Connect(function(input,gameProcessed)
		if Cmdbar:IsFocused() then
			if tabAllowed == true and input.KeyCode == Enum.KeyCode.Tab and topCommand ~= nil then
				autoComplete(topCommand)
			end
		else
			tabComplete:Disconnect()
		end
	end)
end)

ESPenabled = false
CHMSenabled = false

function round(num, numDecimalPlaces)
	local mult = 10^(numDecimalPlaces or 0)
	return math.floor(num * mult + 0.5) / mult
end

function ESP(plr)
	task.spawn(function()
		for i,v in pairs(COREGUI:GetChildren()) do
			if v.Name == plr.Name..'_ESP' then
				v:Destroy()
			end
		end
		wait()
		if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_ESP') then
			local ESPholder = Instance.new("Folder")
			ESPholder.Name = plr.Name..'_ESP'
			ESPholder.Parent = COREGUI
			repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
			for b,n in pairs (plr.Character:GetChildren()) do
				if (n:IsA("BasePart")) then
					local a = Instance.new("BoxHandleAdornment")
					a.Name = plr.Name
					a.Parent = ESPholder
					a.Adornee = n
					a.AlwaysOnTop = true
					a.ZIndex = 10
					a.Size = n.Size
					a.Transparency = espTransparency
					a.Color = plr.TeamColor
				end
			end
			if plr.Character and plr.Character:FindFirstChild('Head') then
				local BillboardGui = Instance.new("BillboardGui")
				local TextLabel = Instance.new("TextLabel")
				BillboardGui.Adornee = plr.Character.Head
				BillboardGui.Name = plr.Name
				BillboardGui.Parent = ESPholder
				BillboardGui.Size = UDim2.new(0, 100, 0, 150)
				BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
				BillboardGui.AlwaysOnTop = true
				TextLabel.Parent = BillboardGui
				TextLabel.BackgroundTransparency = 1
				TextLabel.Position = UDim2.new(0, 0, 0, -50)
				TextLabel.Size = UDim2.new(0, 100, 0, 100)
				TextLabel.Font = Enum.Font.SourceSansSemibold
				TextLabel.TextSize = 20
				TextLabel.TextColor3 = Color3.new(1, 1, 1)
				TextLabel.TextStrokeTransparency = 0
				TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
				TextLabel.Text = 'Name: '..plr.Name
				TextLabel.ZIndex = 10
				local espLoopFunc
				local teamChange
				local addedFunc
				addedFunc = plr.CharacterAdded:Connect(function()
					if ESPenabled then
						espLoopFunc:Disconnect()
						teamChange:Disconnect()
						ESPholder:Destroy()
						repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
						ESP(plr)
						addedFunc:Disconnect()
					else
						teamChange:Disconnect()
						addedFunc:Disconnect()
					end
				end)
				teamChange = plr:GetPropertyChangedSignal("TeamColor"):Connect(function()
					if ESPenabled then
						espLoopFunc:Disconnect()
						addedFunc:Disconnect()
						ESPholder:Destroy()
						repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
						ESP(plr)
						teamChange:Disconnect()
					else
						teamChange:Disconnect()
					end
				end)
				local function espLoop()
					if COREGUI:FindFirstChild(plr.Name..'_ESP') then
						if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid") and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
							local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).magnitude)
							TextLabel.Text = 'Name: '..plr.Name..' | Health: '..round(plr.Character:FindFirstChildOfClass('Humanoid').Health, 1)..' | Studs: '..pos
						end
					else
						teamChange:Disconnect()
						addedFunc:Disconnect()
						espLoopFunc:Disconnect()
					end
				end
				espLoopFunc = RunService.RenderStepped:Connect(espLoop)
			end
		end
	end)
end

function CHMS(plr)
	task.spawn(function()
		for i,v in pairs(COREGUI:GetChildren()) do
			if v.Name == plr.Name..'_CHMS' then
				v:Destroy()
			end
		end
		wait()
		if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_CHMS') then
			local ESPholder = Instance.new("Folder")
			ESPholder.Name = plr.Name..'_CHMS'
			ESPholder.Parent = COREGUI
			repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
			for b,n in pairs (plr.Character:GetChildren()) do
				if (n:IsA("BasePart")) then
					local a = Instance.new("BoxHandleAdornment")
					a.Name = plr.Name
					a.Parent = ESPholder
					a.Adornee = n
					a.AlwaysOnTop = true
					a.ZIndex = 10
					a.Size = n.Size
					a.Transparency = espTransparency
					a.Color = plr.TeamColor
				end
			end
			local addedFunc
			local teamChange
			local CHMSremoved
			addedFunc = plr.CharacterAdded:Connect(function()
				if CHMSenabled then
					ESPholder:Destroy()
					teamChange:Disconnect()
					repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
					CHMS(plr)
					addedFunc:Disconnect()
				else
					teamChange:Disconnect()
					addedFunc:Disconnect()
				end
			end)
			teamChange = plr:GetPropertyChangedSignal("TeamColor"):Connect(function()
				if CHMSenabled then
					ESPholder:Destroy()
					addedFunc:Disconnect()
					repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
					CHMS(plr)
					teamChange:Disconnect()
				else
					teamChange:Disconnect()
				end
			end)
			CHMSremoved = ESPholder.AncestryChanged:Connect(function()
				teamChange:Disconnect()
				addedFunc:Disconnect()
				CHMSremoved:Disconnect()
			end)
		end
	end)
end

function Locate(plr)
	task.spawn(function()
		for i,v in pairs(COREGUI:GetChildren()) do
			if v.Name == plr.Name..'_LC' then
				v:Destroy()
			end
		end
		wait()
		if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_LC') then
			local ESPholder = Instance.new("Folder")
			ESPholder.Name = plr.Name..'_LC'
			ESPholder.Parent = COREGUI
			repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
			for b,n in pairs (plr.Character:GetChildren()) do
				if (n:IsA("BasePart")) then
					local a = Instance.new("BoxHandleAdornment")
					a.Name = plr.Name
					a.Parent = ESPholder
					a.Adornee = n
					a.AlwaysOnTop = true
					a.ZIndex = 10
					a.Size = n.Size
					a.Transparency = espTransparency
					a.Color = plr.TeamColor
				end
			end
			if plr.Character and plr.Character:FindFirstChild('Head') then
				local BillboardGui = Instance.new("BillboardGui")
				local TextLabel = Instance.new("TextLabel")
				BillboardGui.Adornee = plr.Character.Head
				BillboardGui.Name = plr.Name
				BillboardGui.Parent = ESPholder
				BillboardGui.Size = UDim2.new(0, 100, 0, 150)
				BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
				BillboardGui.AlwaysOnTop = true
				TextLabel.Parent = BillboardGui
				TextLabel.BackgroundTransparency = 1
				TextLabel.Position = UDim2.new(0, 0, 0, -50)
				TextLabel.Size = UDim2.new(0, 100, 0, 100)
				TextLabel.Font = Enum.Font.SourceSansSemibold
				TextLabel.TextSize = 20
				TextLabel.TextColor3 = Color3.new(1, 1, 1)
				TextLabel.TextStrokeTransparency = 0
				TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
				TextLabel.Text = 'Name: '..plr.Name
				TextLabel.ZIndex = 10
				local lcLoopFunc
				local addedFunc
				local teamChange
				addedFunc = plr.CharacterAdded:Connect(function()
					if ESPholder ~= nil and ESPholder.Parent ~= nil then
						lcLoopFunc:Disconnect()
						teamChange:Disconnect()
						ESPholder:Destroy()
						repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
						Locate(plr)
						addedFunc:Disconnect()
					else
						teamChange:Disconnect()
						addedFunc:Disconnect()
					end
				end)
				teamChange = plr:GetPropertyChangedSignal("TeamColor"):Connect(function()
					if ESPholder ~= nil and ESPholder.Parent ~= nil then
						lcLoopFunc:Disconnect()
						addedFunc:Disconnect()
						ESPholder:Destroy()
						repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
						Locate(plr)
						teamChange:Disconnect()
					else
						teamChange:Disconnect()
					end
				end)
				local function lcLoop()
					if COREGUI:FindFirstChild(plr.Name..'_LC') then
						if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid") and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
							local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).magnitude)
							TextLabel.Text = 'Name: '..plr.Name..' | Health: '..round(plr.Character:FindFirstChildOfClass('Humanoid').Health, 1)..' | Studs: '..pos
						end
					else
						teamChange:Disconnect()
						addedFunc:Disconnect()
						lcLoopFunc:Disconnect()
					end
				end
				lcLoopFunc = RunService.RenderStepped:Connect(lcLoop)
			end
		end
	end)
end

local bindsGUI = KeybindEditor
local awaitingInput = false
local keySelected = false

function refreshbinds()
	if Holder_2 then
		Holder_2:ClearAllChildren()
		Holder_2.CanvasSize = UDim2.new(0, 0, 0, 10)
		for i = 1, #binds do
			local YSize = 25
			local Position = ((i * YSize) - YSize)
			local newbind = Example_2:Clone()
			newbind.Parent = Holder_2
			newbind.Visible = true
			newbind.Position = UDim2.new(0,0,0, Position + 5)
			table.insert(shade2,newbind)
			table.insert(shade2,newbind.Text)
			table.insert(text1,newbind.Text)
			table.insert(shade3,newbind.Text.Delete)
			table.insert(text2,newbind.Text.Delete)
			local input = tostring(binds[i].KEY)
			local key
			if input == 'RightClick' or input == 'LeftClick' then
				key = input
			else
				key = input:sub(14)
			end
			if binds[i].TOGGLE then
				newbind.Text.Text = key.." > "..binds[i].COMMAND.." / "..binds[i].TOGGLE
			else
				newbind.Text.Text = key.." > "..binds[i].COMMAND.."  "..(binds[i].ISKEYUP and "(keyup)" or "(keydown)")
			end
			Holder_2.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newbind.Text.Delete.MouseButton1Click:Connect(function()
				unkeybind(binds[i].COMMAND,binds[i].KEY)
			end)
		end
	end
end

refreshbinds()

toggleOn = {}

function unkeybind(cmd,key)
	for i = #binds,1,-1 do
		if binds[i].COMMAND == cmd and binds[i].KEY == key then
			toggleOn[binds[i]] = nil
			table.remove(binds, i)
		end
	end
	refreshbinds()
	updatesaves()
	if key == 'RightClick' or key == 'LeftClick' then
		notify('Keybinds Updated','Unbinded '..key..' from '..cmd)
	else
		notify('Keybinds Updated','Unbinded '..key:sub(14)..' from '..cmd)
	end
end

PositionsFrame.Delete.MouseButton1Click:Connect(function()
	execCmd('cpos')
end)

function refreshwaypoints()
	if #WayPoints > 0 or #pWayPoints > 0 then
		PositionsHint:Destroy()
	end
	if Holder_4 then
		Holder_4:ClearAllChildren()
		Holder_4.CanvasSize = UDim2.new(0, 0, 0, 10)
		local YSize = 25
		local num = 1
		for i = 1, #WayPoints do
			local Position = ((num * YSize) - YSize)
			local newpoint = Example_4:Clone()
			newpoint.Parent = Holder_4
			newpoint.Visible = true
			newpoint.Position = UDim2.new(0,0,0, Position + 5)
			newpoint.Text.Text = WayPoints[i].NAME
			table.insert(shade2,newpoint)
			table.insert(shade2,newpoint.Text)
			table.insert(text1,newpoint.Text)
			table.insert(shade3,newpoint.Text.Delete)
			table.insert(text2,newpoint.Text.Delete)
			table.insert(shade3,newpoint.Text.TP)
			table.insert(text2,newpoint.Text.TP)
			Holder_4.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newpoint.Text.Delete.MouseButton1Click:Connect(function()
				execCmd('dpos '..WayPoints[i].NAME)
			end)
			newpoint.Text.TP.MouseButton1Click:Connect(function()
				execCmd("loadpos "..WayPoints[i].NAME)
			end)
			num = num+1
		end
		for i = 1, #pWayPoints do
			local Position = ((num * YSize) - YSize)
			local newpoint = Example_4:Clone()
			newpoint.Parent = Holder_4
			newpoint.Visible = true
			newpoint.Position = UDim2.new(0,0,0, Position + 5)
			newpoint.Text.Text = pWayPoints[i].NAME
			table.insert(shade2,newpoint)
			table.insert(shade2,newpoint.Text)
			table.insert(text1,newpoint.Text)
			table.insert(shade3,newpoint.Text.Delete)
			table.insert(text2,newpoint.Text.Delete)
			table.insert(shade3,newpoint.Text.TP)
			table.insert(text2,newpoint.Text.TP)
			Holder_4.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newpoint.Text.Delete.MouseButton1Click:Connect(function()
				execCmd('dpos '..pWayPoints[i].NAME)
			end)
			newpoint.Text.TP.MouseButton1Click:Connect(function()
				execCmd("loadpos "..pWayPoints[i].NAME)
			end)
			num = num+1
		end
	end
end

refreshwaypoints()

function refreshaliases()
	if #aliases > 0 then
		AliasHint:Destroy()
	end
	if Holder_3 then
		Holder_3:ClearAllChildren()
		Holder_3.CanvasSize = UDim2.new(0, 0, 0, 10)
		for i = 1, #aliases do
			local YSize = 25
			local Position = ((i * YSize) - YSize)
			local newalias = Example_3:Clone()
			newalias.Parent = Holder_3
			newalias.Visible = true
			newalias.Position = UDim2.new(0,0,0, Position + 5)
			newalias.Text.Text = aliases[i].CMD.." > "..aliases[i].ALIAS
			table.insert(shade2,newalias)
			table.insert(shade2,newalias.Text)
			table.insert(text1,newalias.Text)
			table.insert(shade3,newalias.Text.Delete)
			table.insert(text2,newalias.Text.Delete)
			Holder_3.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newalias.Text.Delete.MouseButton1Click:Connect(function()
				execCmd('removealias '..aliases[i].ALIAS)
			end)
		end
	end
end

local bindChosenKeyUp = false

BindTo.MouseButton1Click:Connect(function()
	awaitingInput = true
	BindTo.Text = 'Press something'
end)

BindTriggerSelect.MouseButton1Click:Connect(function()
	bindChosenKeyUp = not bindChosenKeyUp
	BindTriggerSelect.Text = bindChosenKeyUp and "KeyUp" or "KeyDown"
end)

newToggle = false
Cmdbar_3.Parent.Visible = false
On_2.MouseButton1Click:Connect(function()
	if newToggle == false then newToggle = true
		On_2.BackgroundTransparency = 0
		Cmdbar_3.Parent.Visible = true
		BindTriggerSelect.Visible = false
	else newToggle = false
		On_2.BackgroundTransparency = 1
		Cmdbar_3.Parent.Visible = false
		BindTriggerSelect.Visible = true
	end
end)

Add_2.MouseButton1Click:Connect(function()
	if keySelected then
		if string.find(Cmdbar_2.Text, "\\\\") or string.find(Cmdbar_3.Text, "\\\\") then
			notify('Keybind Error','Only use one backslash to keybind multiple commands into one keybind or command')
		else
			if newToggle and Cmdbar_3.Text ~= '' and Cmdbar_2.text ~= '' then
				addbind(Cmdbar_2.Text,keyPressed,false,Cmdbar_3.Text)
			elseif not newToggle and Cmdbar_2.text ~= '' then
				addbind(Cmdbar_2.Text,keyPressed,bindChosenKeyUp)
			else
				return
			end
			refreshbinds()
			updatesaves()
			if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
				notify('Keybinds Updated','Binded '..keyPressed..' to '..Cmdbar_2.Text..(newToggle and " / "..Cmdbar_3.Text or ""))
			else
				notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to '..Cmdbar_2.Text..(newToggle and " / "..Cmdbar_3.Text or ""))
			end
		end
	end
end)

Exit_2.MouseButton1Click:Connect(function()
	Cmdbar_2.Text = 'Command'
	Cmdbar_3.Text = 'Command 2'
	BindTo.Text = 'Click to bind'
	bindChosenKeyUp = false
	BindTriggerSelect.Text = "KeyDown"
	keySelected = false
	KeybindEditor:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
end)

function onInputBegan(input,gameProcessed)
	if awaitingInput then
		if input.UserInputType == Enum.UserInputType.Keyboard then
			keyPressed = tostring(input.KeyCode)
			BindTo.Text = keyPressed:sub(14)
		elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
			keyPressed = 'LeftClick'
			BindTo.Text = 'LeftClick'
		elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
			keyPressed = 'RightClick'
			BindTo.Text = 'RightClick'
		end
		awaitingInput = false
		keySelected = true
	end
	if not gameProcessed and #binds > 0 then
		for i,v in pairs(binds) do
			if not v.ISKEYUP then
				if (input.UserInputType == Enum.UserInputType.Keyboard and v.KEY:lower()==tostring(input.KeyCode):lower()) or (input.UserInputType == Enum.UserInputType.MouseButton1 and v.KEY:lower()=='leftclick') or (input.UserInputType == Enum.UserInputType.MouseButton2 and v.KEY:lower()=='rightclick') then
					if v.TOGGLE then
						local isOn = toggleOn[v] == true
						toggleOn[v] = not isOn
						if isOn then
							execCmd(v.TOGGLE,Players.LocalPlayer)
						else
							execCmd(v.COMMAND,Players.LocalPlayer)
						end
					else
						execCmd(v.COMMAND,Players.LocalPlayer)
					end
				end
			end
		end
	end
end

function onInputEnded(input,gameProcessed)
	if not gameProcessed and #binds > 0 then
		for i,v in pairs(binds) do
			if v.ISKEYUP then
				if (input.UserInputType == Enum.UserInputType.Keyboard and v.KEY:lower()==tostring(input.KeyCode):lower()) or (input.UserInputType == Enum.UserInputType.MouseButton1 and v.KEY:lower()=='leftclick') or (input.UserInputType == Enum.UserInputType.MouseButton2 and v.KEY:lower()=='rightclick') then
					execCmd(v.COMMAND,Players.LocalPlayer)
				end
			end
		end
	end
end

UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputEnded:Connect(onInputEnded)

ClickTP.Select.MouseButton1Click:Connect(function()
	if keySelected then
		addbind('clicktp',keyPressed,bindChosenKeyUp)
		refreshbinds()
		updatesaves()
		if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
			notify('Keybinds Updated','Binded '..keyPressed..' to click tp')
		else
			notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to click tp')
		end
	end
end)

ClickDelete.Select.MouseButton1Click:Connect(function()
	if keySelected then
		addbind('clickdel',keyPressed,bindChosenKeyUp)
		refreshbinds()
		updatesaves()
		if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
			notify('Keybinds Updated','Binded '..keyPressed..' to click delete')
		else
			notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to click delete')
		end
	end
end)

local function clicktpFunc()
	pcall(function()
		local character = Players.LocalPlayer.Character
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if humanoid and humanoid.SeatPart then
			humanoid.Sit = false
			wait(0.1)
		end

		local hipHeight = humanoid and humanoid.HipHeight > 0 and (humanoid.HipHeight + 1)
		local rootPart = getRoot(character)
		local rootPartPosition = rootPart.Position
		local hitPosition = IYMouse.Hit.Position
		local newCFrame = CFrame.new(
			hitPosition, 
			Vector3.new(rootPartPosition.X, hitPosition.Y, rootPartPosition.Z)
		) * CFrame.Angles(0, math.pi, 0)

		rootPart.CFrame = newCFrame + Vector3.new(0, hipHeight or 4, 0)
	end)
end

IYMouse.Button1Down:Connect(function()
	for i,v in pairs(binds) do
		if v.COMMAND == 'clicktp' then
			local input = v.KEY
			if input == 'RightClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) and Players.LocalPlayer.Character then
				clicktpFunc()
			elseif input == 'LeftClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and Players.LocalPlayer.Character then
				clicktpFunc()
			elseif UserInputService:IsKeyDown(Enum.KeyCode[input:sub(14)]) and Players.LocalPlayer.Character then
				clicktpFunc()
			end
		elseif v.COMMAND == 'clickdel' then
			local input = v.KEY
			if input == 'RightClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
				pcall(function() IYMouse.Target:Destroy() end)
			elseif input == 'LeftClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
				pcall(function() IYMouse.Target:Destroy() end)
			elseif UserInputService:IsKeyDown(Enum.KeyCode[input:sub(14)]) then
				pcall(function() IYMouse.Target:Destroy() end)
			end
		end
	end
end)

PluginsGUI = PluginEditor.background

function addPlugin(name)
	if name:lower() == 'plugin file name' or name:lower() == 'iy_fe.iy' or name == 'iy_fe' then
		notify('Plugin Error','Please enter a valid plugin')
	else
		local file
		local fileName
		if name:sub(-3) == '.iy' then
			pcall(function() file = readfile(name) end)
			fileName = name
		else
			pcall(function() file = readfile(name..'.iy') end)
			fileName = name..'.iy'
		end
		if file then
			if not FindInTable(PluginsTable, fileName) then
				table.insert(PluginsTable, fileName)
				LoadPlugin(fileName)
				refreshplugins()
				pcall(eventEditor.Refresh)
			else
				notify('Plugin Error','This plugin is already added')
			end
		else
			notify('Plugin Error','Cannot locate file "'..fileName..'". Is the file in the correct folder?')
		end
	end
end

function deletePlugin(name)
	local pName = name..'.iy'
	if name:sub(-3) == '.iy' then
		pName = name
	end
	for i = #cmds,1,-1 do
		if cmds[i].PLUGIN == pName then
			table.remove(cmds, i)
		end
	end
	for i,v in pairs(CMDsF:GetChildren()) do
		if v.Name == 'PLUGIN_'..pName then
			v:Destroy()
		end
	end
	for i,v in pairs(PluginsTable) do
		if v == pName then
			table.remove(PluginsTable, i)
			notify('Removed Plugin',pName..' was removed')
		end
	end
	IndexContents('',true)
	refreshplugins()
end

function refreshplugins(dontSave)
	if #PluginsTable > 0 then
		PluginsHint:Destroy()
	end
	if Holder_5 then
		Holder_5:ClearAllChildren()
		Holder_5.CanvasSize = UDim2.new(0, 0, 0, 10)
		for i,v in pairs(PluginsTable) do
			local pName = v
			local YSize = 25
			local Position = ((i * YSize) - YSize)
			local newplugin = Example_5:Clone()
			newplugin.Parent = Holder_5
			newplugin.Visible = true
			newplugin.Position = UDim2.new(0,0,0, Position + 5)
			newplugin.Text.Text = pName
			table.insert(shade2,newplugin)
			table.insert(shade2,newplugin.Text)
			table.insert(text1,newplugin.Text)
			table.insert(shade3,newplugin.Text.Delete)
			table.insert(text2,newplugin.Text.Delete)
			Holder_5.CanvasSize = UDim2.new(0,0,0, Position + 30)
			newplugin.Text.Delete.MouseButton1Click:Connect(function()
				deletePlugin(pName)
			end)
		end
		if not dontSave then
			updatesaves()
		end
	end
end

local PluginCache
function LoadPlugin(val,startup)
	local plugin

	function CatchedPluginLoad()
		plugin = loadfile(val)()
	end

	function handlePluginError(plerror)
		notify('Plugin Error','An error occurred with the plugin, "'..val..'" and it could not be loaded')
		if FindInTable(PluginsTable,val) then
			for i,v in pairs(PluginsTable) do
				if v == val then
					table.remove(PluginsTable,i)
				end
			end
		end
		updatesaves()

		print("Original Error: "..tostring(plerror))
		print("Plugin Error, stack traceback: "..tostring(debug.traceback()))

		plugin = nil

		return false
	end

	xpcall(CatchedPluginLoad, handlePluginError)

	if plugin ~= nil then
		if not startup then
			notify('Loaded Plugin',"Name: "..plugin["PluginName"].."\n".."Description: "..plugin["PluginDescription"])
		end
		addcmdtext('',val)
		addcmdtext(string.upper('--'..plugin["PluginName"]),val,plugin["PluginDescription"])
		if plugin["Commands"] then
			for i,v in pairs(plugin["Commands"]) do 
				local cmdExt = ''
				local cmdName = i
				local function handleNames()
					cmdName = i
					if findCmd(cmdName..cmdExt) then
						if isNumber(cmdExt) then
							cmdExt = cmdExt+1
						else
							cmdExt = 1
						end
						handleNames()
					else
						cmdName = cmdName..cmdExt
					end
				end
				handleNames()
				addcmd(cmdName, v["Aliases"], v["Function"], val)
				if v["ListName"] then
					local newName = v.ListName
					local cmdNames = {i,unpack(v.Aliases)}
					for i,v in pairs(cmdNames) do
						newName = newName:gsub(v,v..cmdExt)
					end
					addcmdtext(newName,val,v["Description"])
				else
					addcmdtext(cmdName,val,v["Description"])
				end
			end
		end
		IndexContents('',true)
	elseif plugin == nil then
		plugin = nil
	end
end

function FindPlugins()
	if PluginsTable ~= nil and type(PluginsTable) == "table" then
		for i,v in pairs(PluginsTable) do
			LoadPlugin(v,true)
		end
		refreshplugins(true)
	end
end

AddPlugin.MouseButton1Click:Connect(function()
	addPlugin(PluginsGUI.FileName.Text)
end)

Exit_3.MouseButton1Click:Connect(function()
	PluginEditor:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
	FileName.Text = 'Plugin File Name'
end)

Add_3.MouseButton1Click:Connect(function()
	PluginEditor:TweenPosition(UDim2.new(0.5, -180, 0, 310), "InOut", "Quart", 0.5, true, nil)
end)

Plugins.MouseButton1Click:Connect(function()
	if writefileExploit() then
		PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
		wait(0.5)
		SettingsHolder.Visible = false
	else
		notify('Incompatible Exploit','Your exploit is unable to use plugins (missing read/writefile)')
	end
end)

Close_4.MouseButton1Click:Connect(function()
	SettingsHolder.Visible = true
	PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
end)

local TeleportCheck = false
Players.LocalPlayer.OnTeleport:Connect(function(State)
	if KeepInfYield and (not TeleportCheck) and queueteleport then
		TeleportCheck = true
		queueteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()")
	end
end)

addcmd('addalias',{},function(args, speaker)
	if #args < 2 then return end
	local cmd = string.lower(args[1])
	local alias = string.lower(args[2])
	for i,v in pairs(cmds) do
		if v.NAME:lower()==cmd or FindInTable(v.ALIAS,cmd) then
			customAlias[alias] = v
			aliases[#aliases + 1] = {CMD = cmd, ALIAS = alias}
			notify('Aliases Modified',"Added "..alias.." as an alias to "..cmd)
			updatesaves()
			refreshaliases()
			break
		end
	end
end)

addcmd('removealias',{},function(args, speaker)
	if #args < 1 then return end
	local alias = string.lower(args[1])
	if customAlias[alias] then
		local cmd = customAlias[alias].NAME
		customAlias[alias] = nil
		for i = #aliases,1,-1 do
			if aliases[i].ALIAS == tostring(alias) then
				table.remove(aliases, i)
			end
		end
		notify('Aliases Modified',"Removed the alias "..alias.." from "..cmd)
		updatesaves()
		refreshaliases()
	end
end)

addcmd('clraliases',{},function(args, speaker)
	customAlias = {}
	aliases = {}
	notify('Aliases Modified','Removed all aliases')
	updatesaves()
	refreshaliases()
end)

addcmd('discord', {'support', 'help'}, function(args, speaker)
	if everyClipboard then
		toClipboard('https://discord.com/invite/dYHag43eeU')
		notify('Discord Invite', 'Copied to clipboard!\ndiscord.gg/dYHag43eeU')
	else
		notify('Discord Invite', 'discord.gg/dYHag43eeU')
	end
	if httprequest then
		httprequest({
			Url = 'http://127.0.0.1:6463/rpc?v=1',
			Method = 'POST',
			Headers = {
				['Content-Type'] = 'application/json',
				Origin = 'https://discord.com'
			},
			Body = HttpService:JSONEncode({
				cmd = 'INVITE_BROWSER',
				nonce = HttpService:GenerateGUID(false),
				args = {code = 'dYHag43eeU'}
			})
		})
	end
end)

addcmd('keepiy', {}, function(args, speaker)
	if queueteleport then
		KeepInfYield = true
		updatesaves()
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
	end
end)

addcmd('unkeepiy', {}, function(args, speaker)
	if queueteleport then
		KeepInfYield = false
		updatesaves()
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
	end
end)

addcmd('togglekeepiy', {}, function(args, speaker)
	if queueteleport then
		KeepInfYield = not KeepInfYield
		updatesaves()
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
	end
end)

local canOpenServerinfo = true
addcmd('serverinfo',{'info','sinfo'},function(args, speaker)
	if not canOpenServerinfo then return end
	canOpenServerinfo = false
	task.spawn(function()
		local FRAME = Instance.new("Frame")
		local shadow = Instance.new("Frame")
		local PopupText = Instance.new("TextLabel")
		local Exit = Instance.new("TextButton")
		local ExitImage = Instance.new("ImageLabel")
		local background = Instance.new("Frame")
		local TextLabel = Instance.new("TextLabel")
		local TextLabel2 = Instance.new("TextLabel")
		local TextLabel3 = Instance.new("TextLabel")
		local Time = Instance.new("TextLabel")
		local appearance = Instance.new("TextLabel")
		local maxplayers = Instance.new("TextLabel")
		local name = Instance.new("TextLabel")
		local placeid = Instance.new("TextLabel")
		local playerid = Instance.new("TextLabel")
		local players = Instance.new("TextLabel")
		local CopyApp = Instance.new("TextButton")
		local CopyPlrID = Instance.new("TextButton")
		local CopyPlcID = Instance.new("TextButton")
		local CopyPlcName = Instance.new("TextButton")

		FRAME.Name = randomString()
		FRAME.Parent = ScaledHolder
		FRAME.Active = true
		FRAME.BackgroundTransparency = 1
		FRAME.Position = UDim2.new(0.5, -130, 0, -500)
		FRAME.Size = UDim2.new(0, 250, 0, 20)
		FRAME.ZIndex = 10
		dragGUI(FRAME)

		shadow.Name = "shadow"
		shadow.Parent = FRAME
		shadow.BackgroundColor3 = currentShade2
		shadow.BorderSizePixel = 0
		shadow.Size = UDim2.new(0, 250, 0, 20)
		shadow.ZIndex = 10
		table.insert(shade2,shadow)

		PopupText.Name = "PopupText"
		PopupText.Parent = shadow
		PopupText.BackgroundTransparency = 1
		PopupText.Size = UDim2.new(1, 0, 0.95, 0)
		PopupText.ZIndex = 10
		PopupText.Font = Enum.Font.SourceSans
		PopupText.TextSize = 14
		PopupText.Text = "Server"
		PopupText.TextColor3 = currentText1
		PopupText.TextWrapped = true
		table.insert(text1,PopupText)

		Exit.Name = "Exit"
		Exit.Parent = shadow
		Exit.BackgroundTransparency = 1
		Exit.Position = UDim2.new(1, -20, 0, 0)
		Exit.Size = UDim2.new(0, 20, 0, 20)
		Exit.Text = ""
		Exit.ZIndex = 10

		ExitImage.Parent = Exit
		ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
		ExitImage.BackgroundTransparency = 1
		ExitImage.Position = UDim2.new(0, 5, 0, 5)
		ExitImage.Size = UDim2.new(0, 10, 0, 10)
		ExitImage.Image = "rbxassetid://5054663650"
		ExitImage.ZIndex = 10

		background.Name = "background"
		background.Parent = FRAME
		background.Active = true
		background.BackgroundColor3 = currentShade1
		background.BorderSizePixel = 0
		background.Position = UDim2.new(0, 0, 1, 0)
		background.Size = UDim2.new(0, 250, 0, 250)
		background.ZIndex = 10
		table.insert(shade1,background)

		TextLabel.Name = "Text Label"
		TextLabel.Parent = background
		TextLabel.BackgroundTransparency = 1
		TextLabel.BorderSizePixel = 0
		TextLabel.Position = UDim2.new(0, 5, 0, 80)
		TextLabel.Size = UDim2.new(0, 100, 0, 20)
		TextLabel.ZIndex = 10
		TextLabel.Font = Enum.Font.SourceSansLight
		TextLabel.TextSize = 20
		TextLabel.Text = "Run Time:"
		TextLabel.TextColor3 = currentText1
		TextLabel.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,TextLabel)

		TextLabel2.Name = "Text Label2"
		TextLabel2.Parent = background
		TextLabel2.BackgroundTransparency = 1
		TextLabel2.BorderSizePixel = 0
		TextLabel2.Position = UDim2.new(0, 5, 0, 130)
		TextLabel2.Size = UDim2.new(0, 100, 0, 20)
		TextLabel2.ZIndex = 10
		TextLabel2.Font = Enum.Font.SourceSansLight
		TextLabel2.TextSize = 20
		TextLabel2.Text = "Statistics:"
		TextLabel2.TextColor3 = currentText1
		TextLabel2.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,TextLabel2)

		TextLabel3.Name = "Text Label3"
		TextLabel3.Parent = background
		TextLabel3.BackgroundTransparency = 1
		TextLabel3.BorderSizePixel = 0
		TextLabel3.Position = UDim2.new(0, 5, 0, 10)
		TextLabel3.Size = UDim2.new(0, 100, 0, 20)
		TextLabel3.ZIndex = 10
		TextLabel3.Font = Enum.Font.SourceSansLight
		TextLabel3.TextSize = 20
		TextLabel3.Text = "Local Player:"
		TextLabel3.TextColor3 = currentText1
		TextLabel3.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,TextLabel3)

		Time.Name = "Time"
		Time.Parent = background
		Time.BackgroundTransparency = 1
		Time.BorderSizePixel = 0
		Time.Position = UDim2.new(0, 5, 0, 105)
		Time.Size = UDim2.new(0, 100, 0, 20)
		Time.ZIndex = 10
		Time.Font = Enum.Font.SourceSans
		Time.FontSize = Enum.FontSize.Size14
		Time.Text = "LOADING"
		Time.TextColor3 = currentText1
		Time.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,Time)

		appearance.Name = "appearance"
		appearance.Parent = background
		appearance.BackgroundTransparency = 1
		appearance.BorderSizePixel = 0
		appearance.Position = UDim2.new(0, 5, 0, 55)
		appearance.Size = UDim2.new(0, 100, 0, 20)
		appearance.ZIndex = 10
		appearance.Font = Enum.Font.SourceSans
		appearance.FontSize = Enum.FontSize.Size14
		appearance.Text = "Appearance: LOADING"
		appearance.TextColor3 = currentText1
		appearance.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,appearance)

		maxplayers.Name = "maxplayers"
		maxplayers.Parent = background
		maxplayers.BackgroundTransparency = 1
		maxplayers.BorderSizePixel = 0
		maxplayers.Position = UDim2.new(0, 5, 0, 175)
		maxplayers.Size = UDim2.new(0, 100, 0, 20)
		maxplayers.ZIndex = 10
		maxplayers.Font = Enum.Font.SourceSans
		maxplayers.FontSize = Enum.FontSize.Size14
		maxplayers.Text = "LOADING"
		maxplayers.TextColor3 = currentText1
		maxplayers.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,maxplayers)

		name.Name = "name"
		name.Parent = background
		name.BackgroundTransparency = 1
		name.BorderSizePixel = 0
		name.Position = UDim2.new(0, 5, 0, 215)
		name.Size = UDim2.new(0, 240, 0, 30)
		name.ZIndex = 10
		name.Font = Enum.Font.SourceSans
		name.FontSize = Enum.FontSize.Size14
		name.Text = "Place Name: LOADING"
		name.TextColor3 = currentText1
		name.TextWrapped = true
		name.TextXAlignment = Enum.TextXAlignment.Left
		name.TextYAlignment = Enum.TextYAlignment.Top
		table.insert(text1,name)

		placeid.Name = "placeid"
		placeid.Parent = background
		placeid.BackgroundTransparency = 1
		placeid.BorderSizePixel = 0
		placeid.Position = UDim2.new(0, 5, 0, 195)
		placeid.Size = UDim2.new(0, 100, 0, 20)
		placeid.ZIndex = 10
		placeid.Font = Enum.Font.SourceSans
		placeid.FontSize = Enum.FontSize.Size14
		placeid.Text = "Place ID: LOADING"
		placeid.TextColor3 = currentText1
		placeid.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,placeid)

		playerid.Name = "playerid"
		playerid.Parent = background
		playerid.BackgroundTransparency = 1
		playerid.BorderSizePixel = 0
		playerid.Position = UDim2.new(0, 5, 0, 35)
		playerid.Size = UDim2.new(0, 100, 0, 20)
		playerid.ZIndex = 10
		playerid.Font = Enum.Font.SourceSans
		playerid.FontSize = Enum.FontSize.Size14
		playerid.Text = "Player ID: LOADING"
		playerid.TextColor3 = currentText1
		playerid.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,playerid)

		players.Name = "players"
		players.Parent = background
		players.BackgroundTransparency = 1
		players.BorderSizePixel = 0
		players.Position = UDim2.new(0, 5, 0, 155)
		players.Size = UDim2.new(0, 100, 0, 20)
		players.ZIndex = 10
		players.Font = Enum.Font.SourceSans
		players.FontSize = Enum.FontSize.Size14
		players.Text = "LOADING"
		players.TextColor3 = currentText1
		players.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,players)

		CopyApp.Name = "CopyApp"
		CopyApp.Parent = background
		CopyApp.BackgroundColor3 = currentShade2
		CopyApp.BorderSizePixel = 0
		CopyApp.Position = UDim2.new(0, 210, 0, 55)
		CopyApp.Size = UDim2.new(0, 35, 0, 20)
		CopyApp.Font = Enum.Font.SourceSans
		CopyApp.TextSize = 14
		CopyApp.Text = "Copy"
		CopyApp.TextColor3 = currentText1
		CopyApp.ZIndex = 10
		table.insert(shade2,CopyApp)
		table.insert(text1,CopyApp)

		CopyPlrID.Name = "CopyPlrID"
		CopyPlrID.Parent = background
		CopyPlrID.BackgroundColor3 = currentShade2
		CopyPlrID.BorderSizePixel = 0
		CopyPlrID.Position = UDim2.new(0, 210, 0, 35)
		CopyPlrID.Size = UDim2.new(0, 35, 0, 20)
		CopyPlrID.Font = Enum.Font.SourceSans
		CopyPlrID.TextSize = 14
		CopyPlrID.Text = "Copy"
		CopyPlrID.TextColor3 = currentText1
		CopyPlrID.ZIndex = 10
		table.insert(shade2,CopyPlrID)
		table.insert(text1,CopyPlrID)

		CopyPlcID.Name = "CopyPlcID"
		CopyPlcID.Parent = background
		CopyPlcID.BackgroundColor3 = currentShade2
		CopyPlcID.BorderSizePixel = 0
		CopyPlcID.Position = UDim2.new(0, 210, 0, 195)
		CopyPlcID.Size = UDim2.new(0, 35, 0, 20)
		CopyPlcID.Font = Enum.Font.SourceSans
		CopyPlcID.TextSize = 14
		CopyPlcID.Text = "Copy"
		CopyPlcID.TextColor3 = currentText1
		CopyPlcID.ZIndex = 10
		table.insert(shade2,CopyPlcID)
		table.insert(text1,CopyPlcID)

		CopyPlcName.Name = "CopyPlcName"
		CopyPlcName.Parent = background
		CopyPlcName.BackgroundColor3 = currentShade2
		CopyPlcName.BorderSizePixel = 0
		CopyPlcName.Position = UDim2.new(0, 210, 0, 215)
		CopyPlcName.Size = UDim2.new(0, 35, 0, 20)
		CopyPlcName.Font = Enum.Font.SourceSans
		CopyPlcName.TextSize = 14
		CopyPlcName.Text = "Copy"
		CopyPlcName.TextColor3 = currentText1
		CopyPlcName.ZIndex = 10
		table.insert(shade2,CopyPlcName)
		table.insert(text1,CopyPlcName)

		local SINFOGUI = background
		FRAME:TweenPosition(UDim2.new(0.5, -130, 0, 100), "InOut", "Quart", 0.5, true, nil) 
		wait(0.5)
		Exit.MouseButton1Click:Connect(function()
			FRAME:TweenPosition(UDim2.new(0.5, -130, 0, -500), "InOut", "Quart", 0.5, true, nil) 
			wait(0.6)
			FRAME:Destroy()
			canOpenServerinfo = true
		end)
		local Asset = MarketplaceService:GetProductInfo(PlaceId)
		SINFOGUI.name.Text = "Place Name: " .. Asset.Name
		SINFOGUI.playerid.Text = "Player ID: " ..speaker.UserId
		SINFOGUI.maxplayers.Text = Players.MaxPlayers.. " Players Max"
		SINFOGUI.placeid.Text = "Place ID: " ..PlaceId

		CopyApp.MouseButton1Click:Connect(function()
			toClipboard(speaker.CharacterAppearanceId)
		end)
		CopyPlrID.MouseButton1Click:Connect(function()
			toClipboard(speaker.UserId)
		end)
		CopyPlcID.MouseButton1Click:Connect(function()
			toClipboard(PlaceId)
		end)
		CopyPlcName.MouseButton1Click:Connect(function()
			toClipboard(Asset.Name)
		end)

		repeat
			players = Players:GetPlayers()
			SINFOGUI.players.Text = #players.. " Player(s)"
			SINFOGUI.appearance.Text = "Appearance: " ..speaker.CharacterAppearanceId
			local seconds = math.floor(workspace.DistributedGameTime)
			local minutes = math.floor(workspace.DistributedGameTime / 60)
			local hours = math.floor(workspace.DistributedGameTime / 60 / 60)
			local seconds = seconds - (minutes * 60)
			local minutes = minutes - (hours * 60)
			if hours < 1 then if minutes < 1 then
					SINFOGUI.Time.Text = seconds .. " Second(s)" else
					SINFOGUI.Time.Text = minutes .. " Minute(s), " .. seconds .. " Second(s)"
				end
			else
				SINFOGUI.Time.Text = hours .. " Hour(s), " .. minutes .. " Minute(s), " .. seconds .. " Second(s)"
			end
			wait(1)
		until SINFOGUI.Parent == nil
	end)
end)

addcmd('jobid',{},function(args, speaker)
	local jobId = 'Roblox.GameLauncher.joinGameInstance('..PlaceId..', "'..JobId..'")'
	toClipboard(jobId)
end)

addcmd('notifyjobid',{},function(args, speaker)
	notify('JobId / PlaceId',JobId..' / '..PlaceId)
end)

addcmd('breakloops',{'break'},function(args, speaker)
	lastBreakTime = tick()
end)

addcmd('gametp',{'gameteleport'},function(args, speaker)
	TeleportService:Teleport(args[1])
end)

addcmd("rejoin", {"rj"}, function(args, speaker)
	if #Players:GetPlayers() <= 1 then
		Players.LocalPlayer:Kick("\nRejoining...")
		wait()
		TeleportService:Teleport(PlaceId, Players.LocalPlayer)
	else
		TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
	end
end)

addcmd("autorejoin", {"autorj"}, function(args, speaker)
	GuiService.ErrorMessageChanged:Connect(function()
		execCmd("rejoin")
	end)
	notify("Auto Rejoin", "Auto rejoin enabled")
end)

addcmd("serverhop", {"shop"}, function(args, speaker)
    -- thanks to NoobSploit for fixing
    if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)})
        local body = HttpService:JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
        else
            return notify("Serverhop", "Couldn't find a server.")
        end
    else
        notify("Incompatible Exploit", "Your exploit does not support this command (missing request)")
    end
end)

addcmd("exit", {}, function(args, speaker)
    game:Shutdown()
end)

local Noclipping = nil
addcmd('noclip',{},function(args, speaker)
	Clip = false
	wait(0.1)
	local function NoclipLoop()
		if Clip == false and speaker.Character ~= nil then
			for _, child in pairs(speaker.Character:GetDescendants()) do
				if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= floatName then
					child.CanCollide = false
				end
			end
		end
	end
	Noclipping = RunService.Stepped:Connect(NoclipLoop)
	if args[1] and args[1] == 'nonotify' then return end
	notify('Noclip','Noclip Enabled')
end)

addcmd('clip',{'unnoclip'},function(args, speaker)
	if Noclipping then
		Noclipping:Disconnect()
	end
	Clip = true
	if args[1] and args[1] == 'nonotify' then return end
	notify('Noclip','Noclip Disabled')
end)

addcmd('togglenoclip',{},function(args, speaker)
	if Clip then
		execCmd('noclip')
	else
		execCmd('clip')
	end
end)

FLYING = false
QEfly = true
iyflyspeed = 1
vehicleflyspeed = 1
function sFLY(vfly)
	repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	repeat wait() until IYMouse
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

	local T = getRoot(Players.LocalPlayer.Character)
	local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	local SPEED = 0

	local function FLY()
		FLYING = true
		local BG = Instance.new('BodyGyro')
		local BV = Instance.new('BodyVelocity')
		BG.P = 9e4
		BG.Parent = T
		BV.Parent = T
		BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
		BG.cframe = T.CFrame
		BV.velocity = Vector3.new(0, 0, 0)
		BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
		task.spawn(function()
			repeat wait()
				if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
					Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
				end
				if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
					SPEED = 50
				elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
					SPEED = 0
				end
				if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
					lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
				elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
				else
					BV.velocity = Vector3.new(0, 0, 0)
				end
				BG.cframe = workspace.CurrentCamera.CoordinateFrame
			until not FLYING
			CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
			lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
			SPEED = 0
			BG:Destroy()
			BV:Destroy()
			if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
				Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
			end
		end)
	end
	flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 's' then
			CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 'a' then
			CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 'd' then 
			CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
		elseif QEfly and KEY:lower() == 'e' then
			CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
		elseif QEfly and KEY:lower() == 'q' then
			CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
		end
		pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
	end)
	flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = 0
		elseif KEY:lower() == 's' then
			CONTROL.B = 0
		elseif KEY:lower() == 'a' then
			CONTROL.L = 0
		elseif KEY:lower() == 'd' then
			CONTROL.R = 0
		elseif KEY:lower() == 'e' then
			CONTROL.Q = 0
		elseif KEY:lower() == 'q' then
			CONTROL.E = 0
		end
	end)
	FLY()
end

function NOFLY()
	FLYING = false
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
	if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
		Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
	end
	pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
end

local velocityHandlerName = randomString()
local gyroHandlerName = randomString()
local mfly1
local mfly2

local unmobilefly = function(speaker)
	pcall(function()
		FLYING = false
		local root = getRoot(speaker.Character)
		root:FindFirstChild(velocityHandlerName):Destroy()
		root:FindFirstChild(gyroHandlerName):Destroy()
		speaker.Character:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
		mfly1:Disconnect()
		mfly2:Disconnect()
	end)
end

local mobilefly = function(speaker, vfly)
	unmobilefly(speaker)
	FLYING = true

	local root = getRoot(speaker.Character)
	local camera = workspace.CurrentCamera
	local v3none = Vector3.new()
	local v3zero = Vector3.new(0, 0, 0)
	local v3inf = Vector3.new(9e9, 9e9, 9e9)

	local controlModule = require(speaker.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
	local bv = Instance.new("BodyVelocity")
	bv.Name = velocityHandlerName
	bv.Parent = root
	bv.MaxForce = v3zero
	bv.Velocity = v3zero

	local bg = Instance.new("BodyGyro")
	bg.Name = gyroHandlerName
	bg.Parent = root
	bg.MaxTorque = v3inf
	bg.P = 1000
	bg.D = 50

	mfly1 = speaker.CharacterAdded:Connect(function()
		local bv = Instance.new("BodyVelocity")
		bv.Name = velocityHandlerName
		bv.Parent = root
		bv.MaxForce = v3zero
		bv.Velocity = v3zero

		local bg = Instance.new("BodyGyro")
		bg.Name = gyroHandlerName
		bg.Parent = root
		bg.MaxTorque = v3inf
		bg.P = 1000
		bg.D = 50
	end)

	mfly2 = RunService.RenderStepped:Connect(function()
		root = getRoot(speaker.Character)
		camera = workspace.CurrentCamera
		if speaker.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
			local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
			local VelocityHandler = root:FindFirstChild(velocityHandlerName)
			local GyroHandler = root:FindFirstChild(gyroHandlerName)

			VelocityHandler.MaxForce = v3inf
			GyroHandler.MaxTorque = v3inf
			if not vfly then humanoid.PlatformStand = true end
			GyroHandler.CFrame = camera.CoordinateFrame
			VelocityHandler.Velocity = v3none

			local direction = controlModule:GetMoveVector()
			if direction.X > 0 then
				VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
			end
			if direction.X < 0 then
				VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
			end
			if direction.Z > 0 then
				VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
			end
			if direction.Z < 0 then
				VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
			end
		end
	end)
end

addcmd('fly',{},function(args, speaker)
	if not IsOnMobile then
		NOFLY()
		wait()
		sFLY()
	else
		mobilefly(speaker)
	end
	if args[1] and isNumber(args[1]) then
		iyflyspeed = args[1]
	end
end)

addcmd('flyspeed',{'flysp'},function(args, speaker)
	local speed = args[1] or 1
	if isNumber(speed) then
		iyflyspeed = speed
	end
end)

addcmd('unfly',{'nofly','novfly','unvehiclefly','novehiclefly','unvfly'},function(args, speaker)
	if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
end)

addcmd('vfly',{'vehiclefly'},function(args, speaker)
	if not IsOnMobile then
		NOFLY()
		wait()
		sFLY(true)
	else
		mobilefly(speaker, true)
	end
	if args[1] and isNumber(args[1]) then
		vehicleflyspeed = args[1]
	end
end)

addcmd('togglevfly',{},function(args, speaker)
	if FLYING then
		if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
	else
		if not IsOnMobile then sFLY(true) else mobilefly(speaker, true) end
	end
end)

addcmd('vflyspeed',{'vflysp','vehicleflyspeed','vehicleflysp'},function(args, speaker)
	local speed = args[1] or 1
	if isNumber(speed) then
		vehicleflyspeed = speed
	end
end)

addcmd('qefly',{'flyqe'},function(args, speaker)
	if args[1] == 'false' then
		QEfly = false
	else
		QEfly = true
	end
end)

addcmd('togglefly',{},function(args, speaker)
	if FLYING then
		if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
	else
		if not IsOnMobile then sFLY() else mobilefly(speaker) end
	end
end)

CFspeed = 50
addcmd('cframefly', {'cfly'}, function(args, speaker)
	-- Full credit to peyton#9148 (apeyton)
	speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
	local Head = speaker.Character:WaitForChild("Head")
	Head.Anchored = true
	if CFloop then CFloop:Disconnect() end
	CFloop = RunService.Heartbeat:Connect(function(deltaTime)
		local moveDirection = speaker.Character:FindFirstChildOfClass('Humanoid').MoveDirection * (CFspeed * deltaTime)
		local headCFrame = Head.CFrame
		local cameraCFrame = workspace.CurrentCamera.CFrame
		local cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position
		cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
		local cameraPosition = cameraCFrame.Position
		local headPosition = headCFrame.Position

		local objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
		Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
	end)
end)

addcmd('uncframefly',{'uncfly'},function(args, speaker)
	if CFloop then
		CFloop:Disconnect()
		speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
		local Head = speaker.Character:WaitForChild("Head")
		Head.Anchored = false
	end
end)

addcmd('cframeflyspeed',{'cflyspeed'},function(args, speaker)
	if isNumber(args[1]) then
		CFspeed = args[1]
	end
end)

Floating = false
floatName = randomString()
addcmd('float', {'platform'},function(args, speaker)
	Floating = true
	local pchar = speaker.Character
	if pchar and not pchar:FindFirstChild(floatName) then
		task.spawn(function()
			local Float = Instance.new('Part')
			Float.Name = floatName
			Float.Parent = pchar
			Float.Transparency = 1
			Float.Size = Vector3.new(2,0.2,1.5)
			Float.Anchored = true
			local FloatValue = -3.1
			Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0,FloatValue,0)
			notify('Float','Float Enabled (Q = down & E = up)')
			qUp = IYMouse.KeyUp:Connect(function(KEY)
				if KEY == 'q' then
					FloatValue = FloatValue + 0.5
				end
			end)
			eUp = IYMouse.KeyUp:Connect(function(KEY)
				if KEY == 'e' then
					FloatValue = FloatValue - 1.5
				end
			end)
			qDown = IYMouse.KeyDown:Connect(function(KEY)
				if KEY == 'q' then
					FloatValue = FloatValue - 0.5
				end
			end)
			eDown = IYMouse.KeyDown:Connect(function(KEY)
				if KEY == 'e' then
					FloatValue = FloatValue + 1.5
				end
			end)
			floatDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function()
				FloatingFunc:Disconnect()
				Float:Destroy()
				qUp:Disconnect()
				eUp:Disconnect()
				qDown:Disconnect()
				eDown:Disconnect()
				floatDied:Disconnect()
			end)
			local function FloatPadLoop()
				if pchar:FindFirstChild(floatName) and getRoot(pchar) then
					Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0,FloatValue,0)
				else
					FloatingFunc:Disconnect()
					Float:Destroy()
					qUp:Disconnect()
					eUp:Disconnect()
					qDown:Disconnect()
					eDown:Disconnect()
					floatDied:Disconnect()
				end
			end			
			FloatingFunc = RunService.Heartbeat:Connect(FloatPadLoop)
		end)
	end
end)

addcmd('unfloat',{'nofloat','unplatform','noplatform'},function(args, speaker)
	Floating = false
	local pchar = speaker.Character
	notify('Float','Float Disabled')
	if pchar:FindFirstChild(floatName) then
		pchar:FindFirstChild(floatName):Destroy()
	end
	if floatDied then
		FloatingFunc:Disconnect()
		qUp:Disconnect()
		eUp:Disconnect()
		qDown:Disconnect()
		eDown:Disconnect()
		floatDied:Disconnect()
	end
end)

addcmd('togglefloat',{},function(args, speaker)
	if Floating then
		execCmd('unfloat')
	else
		execCmd('float')
	end
end)

swimming = false
local oldgrav = workspace.Gravity
local swimbeat = nil
addcmd('swim',{},function(args, speaker)
	if not swimming and speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid") then
		oldgrav = workspace.Gravity
		workspace.Gravity = 0
		local swimDied = function()
			workspace.Gravity = oldgrav
			swimming = false
		end
		local Humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
		gravReset = Humanoid.Died:Connect(swimDied)
		local enums = Enum.HumanoidStateType:GetEnumItems()
		table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
		for i, v in pairs(enums) do
			Humanoid:SetStateEnabled(v, false)
		end
		Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
		swimbeat = RunService.Heartbeat:Connect(function()
			pcall(function()
				speaker.Character.HumanoidRootPart.Velocity = ((Humanoid.MoveDirection ~= Vector3.new() or UserInputService:IsKeyDown(Enum.KeyCode.Space)) and speaker.Character.HumanoidRootPart.Velocity or Vector3.new())
			end)
		end)
		swimming = true
	end
end)

addcmd('unswim',{'noswim'},function(args, speaker)
	if speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid") then
		workspace.Gravity = oldgrav
		swimming = false
		if gravReset then
			gravReset:Disconnect()
		end
		if swimbeat ~= nil then
			swimbeat:Disconnect()
			swimbeat = nil
		end
		local Humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
		local enums = Enum.HumanoidStateType:GetEnumItems()
		table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
		for i, v in pairs(enums) do
			Humanoid:SetStateEnabled(v, true)
		end
	end
end)

addcmd('toggleswim',{},function(args, speaker)
	if swimming then
		execCmd('unswim')
	else
		execCmd('swim')
	end
end)

addcmd('setwaypoint',{'swp','setwp','spos','saveposition','savepos'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if getRoot(speaker.Character) then
		notify('Modified Waypoints',"Created waypoint: "..getstring(1))
		local torso = getRoot(speaker.Character)
		WayPoints[#WayPoints + 1] = {NAME = WPName, COORD = {math.floor(torso.Position.X), math.floor(torso.Position.Y), math.floor(torso.Position.Z)}, GAME = PlaceId}
		if AllWaypoints ~= nil then
			AllWaypoints[#AllWaypoints + 1] = {NAME = WPName, COORD = {math.floor(torso.Position.X), math.floor(torso.Position.Y), math.floor(torso.Position.Z)}, GAME = PlaceId}
		end
	end	
	refreshwaypoints()
	updatesaves()
end)

addcmd('waypointpos',{'wpp','setwaypointposition','setpos','setwaypoint','setwaypointpos'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if getRoot(speaker.Character) then
		notify('Modified Waypoints',"Created waypoint: "..getstring(1))
		WayPoints[#WayPoints + 1] = {NAME = WPName, COORD = {args[2], args[3], args[4]}, GAME = PlaceId}
		if AllWaypoints ~= nil then
			AllWaypoints[#AllWaypoints + 1] = {NAME = WPName, COORD = {args[2], args[3], args[4]}, GAME = PlaceId}
		end
	end	
	refreshwaypoints()
	updatesaves()
end)

addcmd('waypoints',{'positions'},function(args, speaker)
	if SettingsOpen == false then SettingsOpen = true
		Settings:TweenPosition(UDim2.new(0, 0, 0, 45), "InOut", "Quart", 0.5, true, nil)
		CMDsF.Visible = false
	end
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
	PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
	wait(0.5)
	SettingsHolder.Visible = false
	maximizeHolder()
end)

waypointParts = {}
addcmd('showwaypoints',{'showwp','showwps'},function(args, speaker)
	execCmd('hidewaypoints')
	wait()
	for i,_ in pairs(WayPoints) do
		local x = WayPoints[i].COORD[1]
		local y = WayPoints[i].COORD[2]
		local z = WayPoints[i].COORD[3]
		local part = Instance.new("Part")
		part.Size = Vector3.new(5,5,5)
		part.CFrame = CFrame.new(x,y,z)
		part.Parent = workspace
		part.Anchored = true
		part.CanCollide = false
		table.insert(waypointParts,part)
		local view = Instance.new("BoxHandleAdornment")
		view.Adornee = part
		view.AlwaysOnTop = true
		view.ZIndex = 10
		view.Size = part.Size
		view.Parent = part
	end
	for i,v in pairs(pWayPoints) do
		local view = Instance.new("BoxHandleAdornment")
		view.Adornee = pWayPoints[i].COORD[1]
		view.AlwaysOnTop = true
		view.ZIndex = 10
		view.Size = pWayPoints[i].COORD[1].Size
		view.Parent = pWayPoints[i].COORD[1]
		table.insert(waypointParts,view)
	end
end)

addcmd('hidewaypoints',{'hidewp','hidewps'},function(args, speaker)
	for i,v in pairs(waypointParts) do
		v:Destroy()
	end
	waypointParts = {}
end)

addcmd('waypoint',{'wp','lpos','loadposition','loadpos'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				local x = WayPoints[i].COORD[1]
				local y = WayPoints[i].COORD[2]
				local z = WayPoints[i].COORD[3]
				getRoot(speaker.Character).CFrame = CFrame.new(x,y,z)
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				getRoot(speaker.Character).CFrame = CFrame.new(pWayPoints[i].COORD[1].Position)
			end
		end
	end
end)

tweenSpeed = 1
addcmd('tweenspeed',{'tspeed'},function(args, speaker)
	local newSpeed = args[1] or 1
	if tonumber(newSpeed) then
		tweenSpeed = tonumber(newSpeed)
	end
end)

addcmd('tweenwaypoint',{'twp'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			local x = WayPoints[i].COORD[1]
			local y = WayPoints[i].COORD[2]
			local z = WayPoints[i].COORD[3]
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(x,y,z)}):Play()
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(pWayPoints[i].COORD[1].Position)}):Play()
			end
		end
	end
end)

addcmd('walktowaypoint',{'wtwp'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			local x = WayPoints[i].COORD[1]
			local y = WayPoints[i].COORD[2]
			local z = WayPoints[i].COORD[3]
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(x,y,z)
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(pWayPoints[i].COORD[1].Position)
			end
		end
	end
end)

addcmd('deletewaypoint',{'dwp','dpos','deleteposition','deletepos'},function(args, speaker)
	for i,v in pairs(WayPoints) do
		if v.NAME:lower() == tostring(getstring(1)):lower() then
			notify('Modified Waypoints',"Deleted waypoint: " .. v.NAME)
			table.remove(WayPoints, i)
		end
	end
	if AllWaypoints ~= nil and #AllWaypoints > 0 then
		for i,v in pairs(AllWaypoints) do
			if v.NAME:lower() == tostring(getstring(1)):lower() then
				if not v.GAME or v.GAME == PlaceId then
					table.remove(AllWaypoints, i)
				end
			end
		end
	end
	for i,v in pairs(pWayPoints) do
		if v.NAME:lower() == tostring(getstring(1)):lower() then
			notify('Modified Waypoints',"Deleted waypoint: " .. v.NAME)
			table.remove(pWayPoints, i)
		end
	end
	refreshwaypoints()
	updatesaves()
end)

addcmd('clearwaypoints',{'cwp','clearpositions','cpos','clearpos'},function(args, speaker)
	WayPoints = {}
	pWayPoints = {}
	refreshwaypoints()
	updatesaves()
	AllWaypoints = {}
	notify('Modified Waypoints','Removed all waypoints')
end)

addcmd('cleargamewaypoints',{'cgamewp'},function(args, speaker)
	for i,v in pairs(WayPoints) do
		if v.GAME == PlaceId then
			table.remove(WayPoints, i)
		end
	end
	if AllWaypoints ~= nil and #AllWaypoints > 0 then
		for i,v in pairs(AllWaypoints) do
			if v.GAME == PlaceId then
				table.remove(AllWaypoints, i)
			end
		end
	end
	for i,v in pairs(pWayPoints) do
		if v.GAME == PlaceId then
			table.remove(pWayPoints, i)
		end
	end
	refreshwaypoints()
	updatesaves()
	notify('Modified Waypoints','Deleted game waypoints')
end)


local coreGuiTypeNames = {
	-- predefined aliases
	["inventory"] = Enum.CoreGuiType.Backpack,
	["leaderboard"] = Enum.CoreGuiType.PlayerList,
	["emotes"] = Enum.CoreGuiType.EmotesMenu
}

-- Load the full list of enums
for _, enumItem in ipairs(Enum.CoreGuiType:GetEnumItems()) do
	coreGuiTypeNames[enumItem.Name:lower()] = enumItem
end

addcmd('enable',{},function(args, speaker)
	local input = args[1] and args[1]:lower()
	if input then
		if input == "reset" then
			StarterGui:SetCore("ResetButtonCallback", true)
		else
			local coreGuiType = coreGuiTypeNames[input]
			if coreGuiType then
				StarterGui:SetCoreGuiEnabled(coreGuiType, true)
			end
		end
	end
end)

addcmd('disable',{},function(args, speaker)
	local input = args[1] and args[1]:lower()
	if input then
		if input == "reset" then
			StarterGui:SetCore("ResetButtonCallback", false)
		else
			local coreGuiType = coreGuiTypeNames[input]
			if coreGuiType then
				StarterGui:SetCoreGuiEnabled(coreGuiType, false)
			end
		end
	end
end)


local invisGUIS = {}
addcmd('showguis',{},function(args, speaker)
	for i,v in pairs(speaker:FindFirstChildWhichIsA("PlayerGui"):GetDescendants()) do
		if (v:IsA("Frame") or v:IsA("ImageLabel") or v:IsA("ScrollingFrame")) and not v.Visible then
			v.Visible = true
			if not FindInTable(invisGUIS,v) then
				table.insert(invisGUIS,v)
			end
		end
	end
end)

addcmd('unshowguis',{},function(args, speaker)
	for i,v in pairs(invisGUIS) do
		v.Visible = false
	end
	invisGUIS = {}
end)

local hiddenGUIS = {}
addcmd('hideguis',{},function(args, speaker)
	for i,v in pairs(speaker:FindFirstChildWhichIsA("PlayerGui"):GetDescendants()) do
		if (v:IsA("Frame") or v:IsA("ImageLabel") or v:IsA("ScrollingFrame")) and v.Visible then
			v.Visible = false
			if not FindInTable(hiddenGUIS,v) then
				table.insert(hiddenGUIS,v)
			end
		end
	end
end)

addcmd('unhideguis',{},function(args, speaker)
	for i,v in pairs(hiddenGUIS) do
		v.Visible = true
	end
	hiddenGUIS = {}
end)

function deleteGuisAtPos()
	pcall(function()
		local guisAtPosition = Players.LocalPlayer.PlayerGui:GetGuiObjectsAtPosition(IYMouse.X, IYMouse.Y)
		for _, gui in pairs(guisAtPosition) do
			if gui.Visible == true then
				gui:Destroy()
			end
		end
	end)
end

local deleteGuiInput
addcmd('guidelete',{},function(args, speaker)
	deleteGuiInput = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
		if not gameProcessedEvent then
			if input.KeyCode == Enum.KeyCode.Backspace then
				deleteGuisAtPos()
			end
		end
	end)
	notify('GUI Delete Enabled','Hover over a GUI and press backspace to delete it')
end)

addcmd('unguidelete',{'noguidelete'},function(args, speaker)
	if deleteGuiInput then deleteGuiInput:Disconnect() end
	notify('GUI Delete Disabled','GUI backspace delete has been disabled')
end)

local wasStayOpen = StayOpen
addcmd('hideiy',{},function(args, speaker)
	isHidden = true
	wasStayOpen = StayOpen
	if StayOpen == true then
		StayOpen = false
		On.BackgroundTransparency = 1
	end
	minimizeNum = 0
	minimizeHolder()
	if not (args[1] and tostring(args[1]) == 'nonotify') then notify('IY Hidden','You can press the prefix key to access the command bar') end
end)

addcmd('showiy',{'unhideiy'},function(args, speaker)
	isHidden = false
	minimizeNum = -20
	if wasStayOpen then
		maximizeHolder()
		StayOpen = true
		On.BackgroundTransparency = 0
	else
		minimizeHolder()
	end
end)

addcmd('rec', {'record'}, function(args, speaker)
	return COREGUI:ToggleRecording()
end)

addcmd('screenshot', {'scrnshot'}, function(args, speaker)
	return COREGUI:TakeScreenshot()
end)

addcmd('togglefs', {'togglefullscreen'}, function(args, speaker)
	return GuiService:ToggleFullscreen()
end)

addcmd('inspect', {'examine'}, function(args, speaker)
	for _, v in ipairs(getPlayer(args[1], speaker)) do
		GuiService:CloseInspectMenu()
		GuiService:InspectPlayerFromUserId(Players[v].UserId)
	end
end)

addcmd("savegame", {"saveplace"}, function(args, speaker)
    if saveinstance then
        notify("Loading", "Downloading game. This will take a while")
        saveinstance()
        notify("Game Saved", "Saved place to the workspace folder within your exploit folder.")
    else
        notify("Incompatible Exploit", "Your exploit does not support this command (missing saveinstance)")
    end
end)

addcmd('clearerror',{'clearerrors'},function(args, speaker)
	GuiService:ClearError()
end)

addcmd('clientantikick',{'antikick'},function(args, speaker)
	if not hookmetamethod then 
		return notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
	end
	local LocalPlayer = Players.LocalPlayer
	local oldhmmi
	local oldhmmnc
	oldhmmi = hookmetamethod(game, "__index", function(self, method)
		if self == LocalPlayer and method:lower() == "kick" then
			return error("Expected ':' not '.' calling member function Kick", 2)
		end
		return oldhmmi(self, method)
	end)
	oldhmmnc = hookmetamethod(game, "__namecall", function(self, ...)
		if self == LocalPlayer and getnamecallmethod():lower() == "kick" then
			return
		end
		return oldhmmnc(self, ...)
	end)

	notify('Client Antikick','Client anti kick is now active (only effective on localscript kick)')
end)

allow_rj = true
addcmd('clientantiteleport',{'antiteleport'},function(args, speaker)
	if not hookmetamethod then 
		return notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
	end
	local TeleportService = TeleportService
	local oldhmmi
	local oldhmmnc
	oldhmmi = hookmetamethod(game, "__index", function(self, method)
		if self == TeleportService then
			if method:lower() == "teleport" then
				return error("Expected ':' not '.' calling member function Kick", 2)
			elseif method == "TeleportToPlaceInstance" then
				return error("Expected ':' not '.' calling member function TeleportToPlaceInstance", 2)
			end
		end
		return oldhmmi(self, method)
	end)
	oldhmmnc = hookmetamethod(game, "__namecall", function(self, ...)
		if self == TeleportService and getnamecallmethod():lower() == "teleport" or getnamecallmethod() == "TeleportToPlaceInstance" then
			return
		end
		return oldhmmnc(self, ...)
	end)

	notify('Client AntiTP','Client anti teleport is now active (only effective on localscript teleport)')
end)

addcmd('allowrejoin',{'allowrj'},function(args, speaker)
	if args[1] and args[1] == 'false' then
		allow_rj = false
		notify('Client AntiTP','Allow rejoin set to false')
	else
		allow_rj = true
		notify('Client AntiTP','Allow rejoin set to true')
	end
end)

addcmd('cancelteleport',{'canceltp'},function(args, speaker)
	TeleportService:TeleportCancel()
end)

addcmd('volume',{'vol'},function(args, speaker)
	local level = args[1]/10
	UserSettings():GetService("UserGameSettings").MasterVolume = level
end)

addcmd('antilag',{'boostfps','lowgraphics'},function(args, speaker)
	local Terrain = workspace:FindFirstChildOfClass('Terrain')
	Terrain.WaterWaveSize = 0
	Terrain.WaterWaveSpeed = 0
	Terrain.WaterReflectance = 0
	Terrain.WaterTransparency = 0
	Lighting.GlobalShadows = false
	Lighting.FogEnd = 9e9
	settings().Rendering.QualityLevel = 1
	for i,v in pairs(game:GetDescendants()) do
		if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
			v.Material = "Plastic"
			v.Reflectance = 0
		elseif v:IsA("Decal") then
			v.Transparency = 1
		elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
			v.Lifetime = NumberRange.new(0)
		elseif v:IsA("Explosion") then
			v.BlastPressure = 1
			v.BlastRadius = 1
		end
	end
	for i,v in pairs(Lighting:GetDescendants()) do
		if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
			v.Enabled = false
		end
	end
	workspace.DescendantAdded:Connect(function(child)
		task.spawn(function()
			if child:IsA('ForceField') then
				RunService.Heartbeat:Wait()
				child:Destroy()
			elseif child:IsA('Sparkles') then
				RunService.Heartbeat:Wait()
				child:Destroy()
			elseif child:IsA('Smoke') or child:IsA('Fire') then
				RunService.Heartbeat:Wait()
				child:Destroy()
			end
		end)
	end)
end)

addcmd("setfpscap", {"fpscap", "maxfps"}, function(args, speaker)
    if fpscaploop then
        task.cancel(fpscaploop)
        fpscaploop = nil
    end

    local fpsCap = 60
    local num = tonumber(args[1]) or 1e6
    if num == "none" then
        return
    elseif num > 0 then
        fpsCap = num
    else
        return notify("Invalid argument", "Please provide a number above 0 or 'none'.")
    end

    if setfpscap and type(setfpscap) == "function" then
        setfpscap(fpsCap)
    else
        fpscaploop = task.spawn(function()
            local timer = os.clock()
            while true do
                if os.clock() >= timer + 1 / fpsCap then
                    timer = os.clock()
                    task.wait()
                end
            end
        end)
    end
end)

addcmd('notify',{},function(args, speaker)
	notify(getstring(1))
end)

addcmd('lastcommand',{'lastcmd'},function(args, speaker)
	if cmdHistory[1]:sub(1,11) ~= 'lastcommand' and cmdHistory[1]:sub(1,7) ~= 'lastcmd' then
		execCmd(cmdHistory[1])
	end
end)

addcmd('esp',{},function(args, speaker)
	if not CHMSenabled then
		ESPenabled = true
		for i,v in pairs(Players:GetPlayers()) do
			if v.Name ~= speaker.Name then
				ESP(v)
			end
		end
	else
		notify('ESP','Disable chams (nochams) before using esp')
	end
end)

addcmd('noesp',{'unesp'},function(args, speaker)
	ESPenabled = false
	for i,c in pairs(COREGUI:GetChildren()) do
		if string.sub(c.Name, -4) == '_ESP' then
			c:Destroy()
		end
	end
end)

addcmd('esptransparency',{},function(args, speaker)
	espTransparency = (args[1] and isNumber(args[1]) and args[1]) or 0.3
	updatesaves()
end)

local espParts = {}
local partEspTrigger = nil
function partAdded(part)
	if #espParts > 0 then
		if FindInTable(espParts,part.Name:lower()) then
			local a = Instance.new("BoxHandleAdornment")
			a.Name = part.Name:lower().."_PESP"
			a.Parent = part
			a.Adornee = part
			a.AlwaysOnTop = true
			a.ZIndex = 0
			a.Size = part.Size
			a.Transparency = espTransparency
			a.Color = BrickColor.new("Lime green")
		end
	else
		partEspTrigger:Disconnect()
		partEspTrigger = nil
	end
end

addcmd('partesp',{},function(args, speaker)
	local partEspName = getstring(1):lower()
	if not FindInTable(espParts,partEspName) then
		table.insert(espParts,partEspName)
		for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA("BasePart") and v.Name:lower() == partEspName then
				local a = Instance.new("BoxHandleAdornment")
				a.Name = partEspName.."_PESP"
				a.Parent = v
				a.Adornee = v
				a.AlwaysOnTop = true
				a.ZIndex = 0
				a.Size = v.Size
				a.Transparency = espTransparency
				a.Color = BrickColor.new("Lime green")
			end
		end
	end
	if partEspTrigger == nil then
		partEspTrigger = workspace.DescendantAdded:Connect(partAdded)
	end
end)

addcmd('unpartesp',{'nopartesp'},function(args, speaker)
	if args[1] then
		local partEspName = getstring(1):lower()
		if FindInTable(espParts,partEspName) then
			table.remove(espParts, GetInTable(espParts, partEspName))
		end
		for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA("BoxHandleAdornment") and v.Name == partEspName..'_PESP' then
				v:Destroy()
			end
		end
	else
		partEspTrigger:Disconnect()
		partEspTrigger = nil
		espParts = {}
		for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA("BoxHandleAdornment") and v.Name:sub(-5) == '_PESP' then
				v:Destroy()
			end
		end
	end
end)

addcmd('chams',{},function(args, speaker)
	if not ESPenabled then
		CHMSenabled = true
		for i,v in pairs(Players:GetPlayers()) do
			if v.Name ~= speaker.Name then
				CHMS(v)
			end
		end
	else
		notify('Chams','Disable ESP (noesp) before using chams')
	end
end)

addcmd('nochams',{'unchams'},function(args, speaker)
	CHMSenabled = false
	for i,v in pairs(Players:GetPlayers()) do
		local chmsplr = v
		for i,c in pairs(COREGUI:GetChildren()) do
			if c.Name == chmsplr.Name..'_CHMS' then
				c:Destroy()
			end
		end
	end
end)

addcmd('locate',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		Locate(Players[v])
	end
end)

addcmd('nolocate',{'unlocate'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	if args[1] then
		for i,v in pairs(players) do
			for i,c in pairs(COREGUI:GetChildren()) do
				if c.Name == Players[v].Name..'_LC' then
					c:Destroy()
				end
			end
		end
	else
		for i,c in pairs(COREGUI:GetChildren()) do
			if string.sub(c.Name, -3) == '_LC' then
				c:Destroy()
			end
		end
	end
end)

viewing = nil
addcmd('view',{'spectate'},function(args, speaker)
	StopFreecam()
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		if viewDied then
			viewDied:Disconnect()
			viewChanged:Disconnect()
		end
		viewing = Players[v]
		workspace.CurrentCamera.CameraSubject = viewing.Character
		notify('Spectate','Viewing ' .. Players[v].Name)
		local function viewDiedFunc()
			repeat wait() until Players[v].Character ~= nil and getRoot(Players[v].Character)
			workspace.CurrentCamera.CameraSubject = viewing.Character
		end
		viewDied = Players[v].CharacterAdded:Connect(viewDiedFunc)
		local function viewChangedFunc()
			workspace.CurrentCamera.CameraSubject = viewing.Character
		end
		viewChanged = workspace.CurrentCamera:GetPropertyChangedSignal("CameraSubject"):Connect(viewChangedFunc)
	end
end)

addcmd('viewpart',{'viewp'},function(args, speaker)
	StopFreecam()
	if args[1] then
		for i,v in pairs(workspace:GetDescendants()) do
			if v.Name:lower() == getstring(1):lower() and v:IsA("BasePart") then
				wait(0.1)
				workspace.CurrentCamera.CameraSubject = v
			end
		end
	end
end)

addcmd('unview',{'unspectate'},function(args, speaker)
	StopFreecam()
	if viewing ~= nil then
		viewing = nil
		notify('Spectate','View turned off')
	end
	if viewDied then
		viewDied:Disconnect()
		viewChanged:Disconnect()
	end
	workspace.CurrentCamera.CameraSubject = speaker.Character
end)


fcRunning = false
local Camera = workspace.CurrentCamera
workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
	local newCamera = workspace.CurrentCamera
	if newCamera then
		Camera = newCamera
	end
end)

local INPUT_PRIORITY = Enum.ContextActionPriority.High.Value

Spring = {} do
	Spring.__index = Spring

	function Spring.new(freq, pos)
		local self = setmetatable({}, Spring)
		self.f = freq
		self.p = pos
		self.v = pos*0
		return self
	end

	function Spring:Update(dt, goal)
		local f = self.f*2*math.pi
		local p0 = self.p
		local v0 = self.v

		local offset = goal - p0
		local decay = math.exp(-f*dt)

		local p1 = goal + (v0*dt - offset*(f*dt + 1))*decay
		local v1 = (f*dt*(offset*f - v0) + v0)*decay

		self.p = p1
		self.v = v1

		return p1
	end

	function Spring:Reset(pos)
		self.p = pos
		self.v = pos*0
	end
end

local cameraPos = Vector3.new()
local cameraRot = Vector2.new()

local velSpring = Spring.new(5, Vector3.new())
local panSpring = Spring.new(5, Vector2.new())

Input = {} do

	keyboard = {
		W = 0,
		A = 0,
		S = 0,
		D = 0,
		E = 0,
		Q = 0,
		Up = 0,
		Down = 0,
		LeftShift = 0,
	}

	mouse = {
		Delta = Vector2.new(),
	}

	NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1)
	PAN_MOUSE_SPEED = Vector2.new(1, 1)*(math.pi/64)
	NAV_ADJ_SPEED = 0.75
	NAV_SHIFT_MUL = 0.25

	navSpeed = 1

	function Input.Vel(dt)
		navSpeed = math.clamp(navSpeed + dt*(keyboard.Up - keyboard.Down)*NAV_ADJ_SPEED, 0.01, 4)

		local kKeyboard = Vector3.new(
			keyboard.D - keyboard.A,
			keyboard.E - keyboard.Q,
			keyboard.S - keyboard.W
		)*NAV_KEYBOARD_SPEED

		local shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift)

		return (kKeyboard)*(navSpeed*(shift and NAV_SHIFT_MUL or 1))
	end

	function Input.Pan(dt)
		local kMouse = mouse.Delta*PAN_MOUSE_SPEED
		mouse.Delta = Vector2.new()
		return kMouse
	end

	do
		function Keypress(action, state, input)
			keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
			return Enum.ContextActionResult.Sink
		end

		function MousePan(action, state, input)
			local delta = input.Delta
			mouse.Delta = Vector2.new(-delta.y, -delta.x)
			return Enum.ContextActionResult.Sink
		end

		function Zero(t)
			for k, v in pairs(t) do
				t[k] = v*0
			end
		end

		function Input.StartCapture()
			ContextActionService:BindActionAtPriority("FreecamKeyboard",Keypress,false,INPUT_PRIORITY,
				Enum.KeyCode.W,
				Enum.KeyCode.A,
				Enum.KeyCode.S,
				Enum.KeyCode.D,
				Enum.KeyCode.E,
				Enum.KeyCode.Q,
				Enum.KeyCode.Up,
				Enum.KeyCode.Down
			)
			ContextActionService:BindActionAtPriority("FreecamMousePan",MousePan,false,INPUT_PRIORITY,Enum.UserInputType.MouseMovement)
		end

		function Input.StopCapture()
			navSpeed = 1
			Zero(keyboard)
			Zero(mouse)
			ContextActionService:UnbindAction("FreecamKeyboard")
			ContextActionService:UnbindAction("FreecamMousePan")
		end
	end
end

function GetFocusDistance(cameraFrame)
	local znear = 0.1
	local viewport = Camera.ViewportSize
	local projy = 2*math.tan(cameraFov/2)
	local projx = viewport.x/viewport.y*projy
	local fx = cameraFrame.rightVector
	local fy = cameraFrame.upVector
	local fz = cameraFrame.lookVector

	local minVect = Vector3.new()
	local minDist = 512

	for x = 0, 1, 0.5 do
		for y = 0, 1, 0.5 do
			local cx = (x - 0.5)*projx
			local cy = (y - 0.5)*projy
			local offset = fx*cx - fy*cy + fz
			local origin = cameraFrame.p + offset*znear
			local _, hit = workspace:FindPartOnRay(Ray.new(origin, offset.unit*minDist))
			local dist = (hit - origin).magnitude
			if minDist > dist then
				minDist = dist
				minVect = offset.unit
			end
		end
	end

	return fz:Dot(minVect)*minDist
end

local function StepFreecam(dt)
	local vel = velSpring:Update(dt, Input.Vel(dt))
	local pan = panSpring:Update(dt, Input.Pan(dt))

	local zoomFactor = math.sqrt(math.tan(math.rad(70/2))/math.tan(math.rad(cameraFov/2)))

	cameraRot = cameraRot + pan*Vector2.new(0.75, 1)*8*(dt/zoomFactor)
	cameraRot = Vector2.new(math.clamp(cameraRot.x, -math.rad(90), math.rad(90)), cameraRot.y%(2*math.pi))

	local cameraCFrame = CFrame.new(cameraPos)*CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0)*CFrame.new(vel*Vector3.new(1, 1, 1)*64*dt)
	cameraPos = cameraCFrame.p

	Camera.CFrame = cameraCFrame
	Camera.Focus = cameraCFrame*CFrame.new(0, 0, -GetFocusDistance(cameraCFrame))
	Camera.FieldOfView = cameraFov
end

local PlayerState = {} do
	mouseBehavior = ""
	mouseIconEnabled = ""
	cameraType = ""
	cameraFocus = ""
	cameraCFrame = ""
	cameraFieldOfView = ""

	function PlayerState.Push()
		cameraFieldOfView = Camera.FieldOfView
		Camera.FieldOfView = 70

		cameraType = Camera.CameraType
		Camera.CameraType = Enum.CameraType.Custom

		cameraCFrame = Camera.CFrame
		cameraFocus = Camera.Focus

		mouseIconEnabled = UserInputService.MouseIconEnabled
		UserInputService.MouseIconEnabled = true

		mouseBehavior = UserInputService.MouseBehavior
		UserInputService.MouseBehavior = Enum.MouseBehavior.Default
	end

	function PlayerState.Pop()
		Camera.FieldOfView = 70

		Camera.CameraType = cameraType
		cameraType = nil

		Camera.CFrame = cameraCFrame
		cameraCFrame = nil

		Camera.Focus = cameraFocus
		cameraFocus = nil

		UserInputService.MouseIconEnabled = mouseIconEnabled
		mouseIconEnabled = nil

		UserInputService.MouseBehavior = mouseBehavior
		mouseBehavior = nil
	end
end

function StartFreecam(pos)
	if fcRunning then
		StopFreecam()
	end
	local cameraCFrame = Camera.CFrame
	if pos then
		cameraCFrame = pos
	end
	cameraRot = Vector2.new()
	cameraPos = cameraCFrame.p
	cameraFov = Camera.FieldOfView

	velSpring:Reset(Vector3.new())
	panSpring:Reset(Vector2.new())

	PlayerState.Push()
	RunService:BindToRenderStep("Freecam", Enum.RenderPriority.Camera.Value, StepFreecam)
	Input.StartCapture()
	fcRunning = true
end

function StopFreecam()
	if not fcRunning then return end
	Input.StopCapture()
	RunService:UnbindFromRenderStep("Freecam")
	PlayerState.Pop()
	workspace.Camera.FieldOfView = 70
	fcRunning = false
end

addcmd('freecam',{'fc'},function(args, speaker)
	StartFreecam()
end)

addcmd('freecampos',{'fcpos','fcp','freecamposition','fcposition'},function(args, speaker)
	if not args[1] then return end
	local freecamPos = CFrame.new(args[1],args[2],args[3])
	StartFreecam(freecamPos)
end)

addcmd('freecamwaypoint',{'fcwp'},function(args, speaker)
	local WPName = tostring(getstring(1))
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			local x = WayPoints[i].COORD[1]
			local y = WayPoints[i].COORD[2]
			local z = WayPoints[i].COORD[3]
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				StartFreecam(CFrame.new(x,y,z))
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				StartFreecam(CFrame.new(pWayPoints[i].COORD[1].Position))
			end
		end
	end
end)

addcmd('freecamgoto',{'fcgoto','freecamtp','fctp'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		StartFreecam(getRoot(Players[v].Character).CFrame)
	end
end)

addcmd('unfreecam',{'nofreecam','unfc','nofc'},function(args, speaker)
	StopFreecam()
end)

addcmd('freecamspeed',{'fcspeed'},function(args, speaker)
	local FCspeed = args[1] or 1
	if isNumber(FCspeed) then
		NAV_KEYBOARD_SPEED = Vector3.new(FCspeed, FCspeed, FCspeed)
	end
end)

addcmd('notifyfreecamposition',{'notifyfcpos'},function(args, speaker)
	if fcRunning then
		local X,Y,Z = workspace.CurrentCamera.CFrame.Position.X,workspace.CurrentCamera.CFrame.Position.Y,workspace.CurrentCamera.CFrame.Position.Z
		local Format, Round = string.format, math.round
		notify("Current Position", Format("%s, %s, %s", Round(X), Round(Y), Round(Z)))
	end
end)

addcmd('copyfreecamposition',{'copyfcpos'},function(args, speaker)
	if fcRunning then
		local X,Y,Z = workspace.CurrentCamera.CFrame.Position.X,workspace.CurrentCamera.CFrame.Position.Y,workspace.CurrentCamera.CFrame.Position.Z
		local Format, Round = string.format, math.round
		toClipboard(Format("%s, %s, %s", Round(X), Round(Y), Round(Z)))
	end
end)

addcmd('gotocamera',{'gotocam','tocam'},function(args, speaker)
	getRoot(speaker.Character).CFrame = workspace.Camera.CFrame
end)

addcmd('tweengotocamera',{'tweengotocam','tgotocam','ttocam'},function(args, speaker)
	TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = workspace.Camera.CFrame}):Play()
end)

addcmd('fov',{},function(args, speaker)
	local fov = args[1] or 70
	if isNumber(fov) then
		workspace.CurrentCamera.FieldOfView = fov
	end
end)

local preMaxZoom = Players.LocalPlayer.CameraMaxZoomDistance
local preMinZoom = Players.LocalPlayer.CameraMinZoomDistance
addcmd('lookat',{},function(args, speaker)
	if speaker.CameraMaxZoomDistance ~= 0.5 then
		preMaxZoom = speaker.CameraMaxZoomDistance
		preMinZoom = speaker.CameraMinZoomDistance
	end
	speaker.CameraMaxZoomDistance = 0.5
	speaker.CameraMinZoomDistance = 0.5
	wait()
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local target = Players[v].Character
		if target and target:FindFirstChild('Head') then
			workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.p, target.Head.CFrame.p)
			wait(0.1)
		end
	end
	speaker.CameraMaxZoomDistance = preMaxZoom
	speaker.CameraMinZoomDistance = preMinZoom
end)

addcmd('fixcam',{'restorecam'},function(args, speaker)
	StopFreecam()
	execCmd('unview')
	workspace.CurrentCamera:remove()
	wait(.1)
	repeat wait() until speaker.Character ~= nil
	workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA('Humanoid')
	workspace.CurrentCamera.CameraType = "Custom"
	speaker.CameraMinZoomDistance = 0.5
	speaker.CameraMaxZoomDistance = 400
	speaker.CameraMode = "Classic"
	speaker.Character.Head.Anchored = false
end)

addcmd('enableshiftlock',{'enablesl'},function(args, speaker)
	speaker.DevEnableMouseLock = true
	notify('Shiftlock','Shift lock is now available')
end)

addcmd('firstp',{},function(args, speaker)
	speaker.CameraMode = "LockFirstPerson"
end)

addcmd('thirdp',{},function(args, speaker)
	speaker.CameraMode = "Classic"
end)

addcmd('noclipcam', {'nccam'}, function(args, speaker)
	local sc = (debug and debug.setconstant) or setconstant
	local gc = (debug and debug.getconstants) or getconstants
	if not sc or not getgc or not gc then
		return notify('Incompatible Exploit', 'Your exploit does not support this command (missing setconstant or getconstants or getgc)')
	end
	local pop = speaker.PlayerScripts.PlayerModule.CameraModule.ZoomController.Popper
	for _, v in pairs(getgc()) do
		if type(v) == 'function' and getfenv(v).script == pop then
			for i, v1 in pairs(gc(v)) do
				if tonumber(v1) == .25 then
					sc(v, i, 0)
				elseif tonumber(v1) == 0 then
					sc(v, i, .25)
				end
			end
		end
	end
end)

addcmd('maxzoom',{},function(args, speaker)
	speaker.CameraMaxZoomDistance = args[1]
end)

addcmd('minzoom',{},function(args, speaker)
	speaker.CameraMinZoomDistance = args[1]
end)

addcmd('camdistance',{},function(args, speaker)
	local camMax = speaker.CameraMaxZoomDistance
	local camMin = speaker.CameraMinZoomDistance
	if camMax < tonumber(args[1]) then
		camMax = args[1]
	end
	speaker.CameraMaxZoomDistance = args[1]
	speaker.CameraMinZoomDistance = args[1]
	wait()
	speaker.CameraMaxZoomDistance = camMax
	speaker.CameraMinZoomDistance = camMin
end)

addcmd('unlockws',{'unlockworkspace'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA("BasePart") then
			v.Locked = false
		end
	end
end)

addcmd('lockws',{'lockworkspace'},function(args, speaker) 
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA("BasePart") then
			v.Locked = true
		end
	end
end)

addcmd('delete',{'remove'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() then
			v:Destroy()
		end
	end
	notify('Item(s) Deleted','Deleted ' ..getstring(1))
end)

addcmd('deleteclass',{'removeclass','deleteclassname','removeclassname','dc'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() then
			v:Destroy()
		end
	end
	notify('Item(s) Deleted','Deleted items with ClassName ' ..getstring(1))
end)

addcmd('chardelete',{'charremove','cd'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() then
			v:Destroy()
		end
	end
	notify('Item(s) Deleted','Deleted ' ..getstring(1))
end)

addcmd('chardeleteclass',{'charremoveclass','chardeleteclassname','charremoveclassname','cdc'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() then
			v:Destroy()
		end
	end
	notify('Item(s) Deleted','Deleted items with ClassName ' ..getstring(1))
end)

addcmd('deletevelocity',{'dv','removevelocity','removeforces'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA("BodyVelocity") or v:IsA("BodyGyro") or v:IsA("RocketPropulsion") or v:IsA("BodyThrust") or v:IsA("BodyAngularVelocity") or v:IsA("AngularVelocity") or v:IsA("BodyForce") or v:IsA("VectorForce") or v:IsA("LineForce") then
			v:Destroy()
		end
	end
end)

addcmd('deleteinvisparts',{'deleteinvisibleparts','dip'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA("BasePart") and v.Transparency == 1 and v.CanCollide then
			v:Destroy()
		end
	end
end)

local shownParts = {}
addcmd('invisibleparts',{'invisparts'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA("BasePart") and v.Transparency == 1 then
			if not table.find(shownParts,v) then
				table.insert(shownParts,v)
			end
			v.Transparency = 0
		end
	end
end)

addcmd('uninvisibleparts',{'uninvisparts'},function(args, speaker)
	for i,v in pairs(shownParts) do
		v.Transparency = 1
	end
	shownParts = {}
end)

addcmd('btools',{},function(args, speaker)
	for i = 1, 4 do
		local Tool = Instance.new("HopperBin")
		Tool.BinType = i
		Tool.Name = randomString()
		Tool.Parent = speaker:FindFirstChildOfClass("Backpack")
	end
end)

addcmd('f3x',{'fex'},function(args, speaker)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/f3x.lua"))()
end)

addcmd('partpath',{'partname'},function(args, speaker)
	selectPart()
end)

addcmd('antiafk',{'antiidle'},function(args, speaker)
	local GC = getconnections or get_signal_cons
	if GC then
		for i,v in pairs(GC(Players.LocalPlayer.Idled)) do
			if v["Disable"] then
				v["Disable"](v)
			elseif v["Disconnect"] then
				v["Disconnect"](v)
			end
		end
	else
		local VirtualUser = cloneref(game:GetService("VirtualUser"))
		Players.LocalPlayer.Idled:Connect(function()
			VirtualUser:CaptureController()
			VirtualUser:ClickButton2(Vector2.new())
		end)
	end
	if not (args[1] and tostring(args[1]) == 'nonotify') then notify('Anti Idle','Anti idle is enabled') end
end)

addcmd("datalimit", {}, function(args, speaker)
    local kbps = tonumber(args[1])
    if kbps then
        local NetworkClient = cloneref(game:GetService("NetworkClient"))
        NetworkClient:SetOutgoingKBPSLimit(kbps)
    end
end)

addcmd("replicationlag", {"backtrack"}, function(args, speaker)
	if tonumber(args[1]) then
		settings():GetService("NetworkSettings").IncomingReplicationLag = args[1]
	end
end)

addcmd("noprompts", {"nopurchaseprompts"}, function(args, speaker)
	COREGUI.PurchasePromptApp.Enabled = false
end)

addcmd("showprompts", {"showpurchaseprompts"}, function(args, speaker)
	COREGUI.PurchasePromptApp.Enabled = true
end)

promptNewRig = function(speaker, rig)
	local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
	if humanoid then
		AvatarEditorService:PromptSaveAvatar(humanoid.HumanoidDescription, Enum.HumanoidRigType[rig])
		local result = AvatarEditorService.PromptSaveAvatarCompleted:Wait()
		if result == Enum.AvatarPromptResult.Success then
			execCmd("reset")
		end
	end
end

addcmd("promptr6", {}, function(args, speaker)
	promptNewRig(speaker, "R6")
end)

addcmd("promptr15", {}, function(args, speaker)
	promptNewRig(speaker, "R15")
end)

addcmd("wallwalk", {"walkonwalls"}, function(args, speaker)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/wallwalker.lua"))()
end)

addcmd('age',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local ages = {}
	for i,v in pairs(players) do
		local p = Players[v]
		table.insert(ages, p.Name.."'s age is: "..p.AccountAge)
	end
	notify('Account Age',table.concat(ages, ',\n'))
end)

addcmd('chatage',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local ages = {}
	for i,v in pairs(players) do
		local p = Players[v]
		table.insert(ages, p.Name.."'s age is: "..p.AccountAge)
	end
	local chatString = table.concat(ages, ', ')
	chatMessage(chatString)
end)

addcmd('joindate',{'jd'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local dates = {}
	notify("Loading",'Hold on a sec')
	for i,v in pairs(players) do
		local user = game:HttpGet("https://users.roblox.com/v1/users/"..Players[v].UserId)
		local json = HttpService:JSONDecode(user)
		local date = json["created"]:sub(1,10)
		local splitDates = string.split(date,"-")
		table.insert(dates,Players[v].Name.." joined: "..splitDates[2].."/"..splitDates[3].."/"..splitDates[1])
	end
	notify('Join Date (Month/Day/Year)',table.concat(dates, ',\n'))
end)

addcmd('chatjoindate',{'cjd'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local dates = {}
	notify("Loading",'Hold on a sec')
	for i,v in pairs(players) do
		local user = game:HttpGet("https://users.roblox.com/v1/users/"..Players[v].UserId)
		local json = HttpService:JSONDecode(user)
		local date = json["created"]:sub(1,10)
		local splitDates = string.split(date,"-")
		table.insert(dates,Players[v].Name.." joined: "..splitDates[2].."/"..splitDates[3].."/"..splitDates[1])
	end
	local chatString = table.concat(dates, ', ')
	chatMessage(chatString)
end)

addcmd('copyname',{'copyuser'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local name = tostring(Players[v].Name)
		toClipboard(name)
	end
end)

addcmd('userid',{'id'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local id = tostring(Players[v].UserId)
		notify('User ID',id)
	end
end)

addcmd('copyid',{'copyuserid'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local id = tostring(Players[v].UserId)
		toClipboard(id)
	end
end)

addcmd('creatorid',{'creator'},function(args, speaker)
	if game.CreatorType == Enum.CreatorType.User then
		notify('Creator ID',game.CreatorId)
	elseif game.CreatorType == Enum.CreatorType.Group then
		local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
		speaker.UserId = OwnerID
		notify('Creator ID',OwnerID)
	end
end)

addcmd('copycreatorid',{'copycreator'},function(args, speaker)
	if game.CreatorType == Enum.CreatorType.User then
		toClipboard(game.CreatorId)
		notify('Copied ID','Copied creator ID to clipboard')
	elseif game.CreatorType == Enum.CreatorType.Group then
		local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
		toClipboard(OwnerID)
		notify('Copied ID','Copied creator ID to clipboard')
	end
end)

addcmd('setcreatorid',{'setcreator'},function(args, speaker)
	if game.CreatorType == Enum.CreatorType.User then
		speaker.UserId = game.CreatorId
		notify('Set ID','Set UserId to '..game.CreatorId)
	elseif game.CreatorType == Enum.CreatorType.Group then
		local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
		speaker.UserId = OwnerID
		notify('Set ID','Set UserId to '..OwnerID)
	end
end)

addcmd('appearanceid',{'aid'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local aid = tostring(Players[v].CharacterAppearanceId)
		notify('Appearance ID',aid)
	end
end)

addcmd('copyappearanceid',{'caid'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		local aid = tostring(Players[v].CharacterAppearanceId)
		toClipboard(aid)
	end
end)

addcmd('norender',{},function(args, speaker)
	RunService:Set3dRenderingEnabled(false)
end)

addcmd('render',{},function(args, speaker)
	RunService:Set3dRenderingEnabled(true)
end)

addcmd('2022materials',{'use2022materials'},function(args, speaker)
	if sethidden then
		sethidden(MaterialService, "Use2022Materials", true)
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
	end
end)

addcmd('un2022materials',{'unuse2022materials'},function(args, speaker)
	if sethidden then
		sethidden(MaterialService, "Use2022Materials", false)
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
	end
end)

addcmd('goto',{'to'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)
		end
	end
	execCmd('breakvelocity')
end)

addcmd('tweengoto',{'tgoto','tto','tweento'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)}):Play()
		end
	end
	execCmd('breakvelocity')
end)

addcmd('vehiclegoto',{'vgoto','vtp','vehicletp'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			local seat = speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart
			local vehicleModel = seat:FindFirstAncestorWhichIsA("Model")
			vehicleModel:MoveTo(getRoot(Players[v].Character).Position)
		end
	end
end)

addcmd('pulsetp',{'ptp'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			local startPos = getRoot(speaker.Character).CFrame
			local seconds = args[2] or 1
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)
			wait(seconds)
			getRoot(speaker.Character).CFrame = startPos
		end
	end
	execCmd('breakvelocity')
end)

local vnoclipParts = {}
addcmd('vehiclenoclip',{'vnoclip'},function(args, speaker)
	vnoclipParts = {}
	local seat = speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart
	local vehicleModel = seat.Parent
	repeat
		if vehicleModel.ClassName ~= "Model" then
			vehicleModel = vehicleModel.Parent
		end
	until vehicleModel.ClassName == "Model"
	wait(0.1)
	execCmd('noclip')
	for i,v in pairs(vehicleModel:GetDescendants()) do
		if v:IsA("BasePart") and v.CanCollide then
			table.insert(vnoclipParts,v)
			v.CanCollide = false
		end
	end
end)

addcmd("vehicleclip", {"vclip", "unvnoclip", "unvehiclenoclip"}, function(args, speaker)
	execCmd("clip")
	for i, v in pairs(vnoclipParts) do
		v.CanCollide = true
	end
	vnoclipParts = {}
end)

addcmd("togglevnoclip", {}, function(args, speaker)
	execCmd(Clip and "vnoclip" or "vclip")
end)

addcmd('clientbring',{'cbring'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if Players[v].Character:FindFirstChildOfClass('Humanoid') then
				Players[v].Character:FindFirstChildOfClass('Humanoid').Sit = false
			end
			wait()
			getRoot(Players[v].Character).CFrame = getRoot(speaker.Character).CFrame + Vector3.new(3,1,0)
		end
	end
end)

local bringT = {}
addcmd('loopbring',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			if Players[v].Name ~= speaker.Name and not FindInTable(bringT, Players[v].Name) then
				table.insert(bringT, Players[v].Name)
				local plrName = Players[v].Name
				local pchar=Players[v].Character
				local distance = 3
				if args[2] and isNumber(args[2]) then
					distance = args[2]
				end
				local lDelay = 0
				if args[3] and isNumber(args[3]) then
					lDelay = args[3]
				end
				repeat
					for i,c in pairs(players) do
						if Players:FindFirstChild(v) then
							pchar = Players[v].Character
							if pchar~= nil and Players[v].Character ~= nil and getRoot(pchar) and speaker.Character ~= nil and getRoot(speaker.Character) then
								getRoot(pchar).CFrame = getRoot(speaker.Character).CFrame + Vector3.new(distance,1,0)
							end
							wait(lDelay)
						else 
							for a,b in pairs(bringT) do if b == plrName then table.remove(bringT, a) end end
						end
					end
				until not FindInTable(bringT, plrName)
			end
		end)
	end
end)

addcmd('unloopbring',{'noloopbring'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			for a,b in pairs(bringT) do if b == Players[v].Name then table.remove(bringT, a) end end
		end)
	end
end)

local walkto = false
local waypointwalkto = false
addcmd('walkto',{'follow'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			walkto = true
			repeat wait()
				speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(Players[v].Character).Position)
			until Players[v].Character == nil or not getRoot(Players[v].Character) or walkto == false
		end
	end
end)

addcmd('pathfindwalkto',{'pathfindfollow'},function(args, speaker)
	walkto = false
	wait()
	local players = getPlayer(args[1], speaker)
	local hum = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	local path = PathService:CreatePath()
	for i,v in pairs(players)do
		if Players[v].Character ~= nil then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			walkto = true
			repeat wait()
				local success, response = pcall(function()
					path:ComputeAsync(getRoot(speaker.Character).Position, getRoot(Players[v].Character).Position)
					local waypoints = path:GetWaypoints()
					local distance 
					for waypointIndex, waypoint in pairs(waypoints) do
						local waypointPosition = waypoint.Position
						hum:MoveTo(waypointPosition)
						repeat 
							distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
							wait()
						until
						distance <= 5
					end	 
				end)
				if not success then
					speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(Players[v].Character).Position)
				end
			until Players[v].Character == nil or not getRoot(Players[v].Character) or walkto == false
		end
	end
end)

addcmd('pathfindwalktowaypoint',{'pathfindwalktowp'},function(args, speaker)
	waypointwalkto = false
	wait()
	local WPName = tostring(getstring(1))
	local hum = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	local path = PathService:CreatePath()
	if speaker.Character then
		for i,_ in pairs(WayPoints) do
			if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				local TrueCoords = Vector3.new(WayPoints[i].COORD[1], WayPoints[i].COORD[2], WayPoints[i].COORD[3])
				waypointwalkto = true
				repeat wait()
					local success, response = pcall(function()
						path:ComputeAsync(getRoot(speaker.Character).Position, TrueCoords)
						local waypoints = path:GetWaypoints()
						local distance 
						for waypointIndex, waypoint in pairs(waypoints) do
							local waypointPosition = waypoint.Position
							hum:MoveTo(waypointPosition)
							repeat 
								distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
								wait()
							until
							distance <= 5
						end
					end)
					if not success then
						speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(TrueCoords)
					end
				until not speaker.Character or waypointwalkto == false
			end
		end
		for i,_ in pairs(pWayPoints) do
			if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				local TrueCoords = pWayPoints[i].COORD[1].Position
				waypointwalkto = true
				repeat wait()
					local success, response = pcall(function()
						path:ComputeAsync(getRoot(speaker.Character).Position, TrueCoords)
						local waypoints = path:GetWaypoints()
						local distance 
						for waypointIndex, waypoint in pairs(waypoints) do
							local waypointPosition = waypoint.Position
							hum:MoveTo(waypointPosition)
							repeat 
								distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
								wait()
							until
							distance <= 5
						end
					end)
					if not success then
						speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(TrueCoords)
					end
				until not speaker.Character or waypointwalkto == false
			end
		end
	end
end)

addcmd('unwalkto',{'nowalkto','unfollow','nofollow'},function(args, speaker)
	walkto = false
	waypointwalkto = false
end)

addcmd("orbit", {}, function(args, speaker)
    execCmd("unorbit nonotify")
    local target = Players:FindFirstChild(getPlayer(args[1], speaker)[1])
    local root = getRoot(speaker.Character)
    local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
    if target and target.Character and getRoot(target.Character) and root and humanoid then
        local rotation = 0
        local speed = tonumber(args[2]) or 0.2
        local distance = tonumber(args[3]) or 6
        orbit1 = RunService.Heartbeat:Connect(function()
            pcall(function()
                rotation = rotation + speed
                root.CFrame = CFrame.new(getRoot(target.Character).Position) * CFrame.Angles(0, math.rad(rotation), 0) * CFrame.new(distance, 0, 0)
            end)
        end)
        orbit2 = RunService.RenderStepped:Connect(function()
            pcall(function()
                root.CFrame = CFrame.new(root.Position, getRoot(target.Character).Position)
            end)
        end)
        orbit3 = humanoid.Died:Connect(function() execCmd("unorbit") end)
        orbit4 = humanoid.Seated:Connect(function(value) if value then execCmd("unorbit") end end)
        notify("Orbit", "Started orbiting " .. formatUsername(target))
    end
end)

addcmd("unorbit", {}, function(args, speaker)
    if orbit1 then orbit1:Disconnect() end
    if orbit2 then orbit2:Disconnect() end
    if orbit3 then orbit3:Disconnect() end
    if orbit4 then orbit4:Disconnect() end
    if args[1] ~= "nonotify" then notify("Orbit", "Stopped orbiting player") end
end)

addcmd('freeze',{'fr'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	if players ~= nil then
		for i,v in pairs(players) do
			task.spawn(function()
				for i, x in next, Players[v].Character:GetDescendants() do
					if x:IsA("BasePart") and not x.Anchored then
						x.Anchored = true
					end
				end
			end)
		end
	end
end)


addcmd('thaw',{'unfreeze','unfr'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	if players ~= nil then
		for i,v in pairs(players) do
			task.spawn(function()
				for i, x in next, Players[v].Character:GetDescendants() do
					if x.Name ~= floatName and x:IsA("BasePart") and x.Anchored then
						x.Anchored = false
					end
				end
			end)
		end
	end
end)

oofing = false
addcmd('loopoof',{},function(args, speaker)
	oofing = true
	repeat wait(0.1)
		for i,v in pairs(Players:GetPlayers()) do
			if v.Character ~= nil and v.Character:FindFirstChild'Head' then
				for _,x in pairs(v.Character.Head:GetChildren()) do
					if x:IsA'Sound' then x.Playing = true end
				end
			end
		end
	until oofing == false
end)

addcmd('unloopoof',{},function(args, speaker)
	oofing = false
end)

local notifiedRespectFiltering = false
addcmd('muteboombox',{},function(args, speaker)
	if not notifiedRespectFiltering and SoundService.RespectFilteringEnabled then notifiedRespectFiltering = true notify('RespectFilteringEnabled','RespectFilteringEnabled is set to true (the command will still work but may only be clientsided)') end
	local players = getPlayer(args[1], speaker)
	if players ~= nil then
		for i,v in pairs(players) do
			task.spawn(function()
				for i, x in next, Players[v].Character:GetDescendants() do
					if x:IsA("Sound") and x.Playing == true then
						x.Playing = false
					end
				end
				for i, x in next, Players[v]:FindFirstChildOfClass("Backpack"):GetDescendants() do
					if x:IsA("Sound") and x.Playing == true then
						x.Playing = false
					end
				end
			end)
		end
	end
end)

addcmd('unmuteboombox',{},function(args, speaker)
	if not notifiedRespectFiltering and SoundService.RespectFilteringEnabled then notifiedRespectFiltering = true notify('RespectFilteringEnabled','RespectFilteringEnabled is set to true (the command will still work but may only be clientsided)') end
	local players = getPlayer(args[1], speaker)
	if players ~= nil then
		for i,v in pairs(players) do
			task.spawn(function()
				for i, x in next, Players[v].Character:GetDescendants() do
					if x:IsA("Sound") and x.Playing == false then
						x.Playing = true
					end
				end
			end)
		end
	end
end)

addcmd('reset',{},function(args, speaker)
	speaker.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
end)

addcmd('freezeanims',{},function(args, speaker)
	local Humanoid = speaker.Character:FindFirstChildOfClass("Humanoid") or speaker.Character:FindFirstChildOfClass("AnimationController")
	local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
	for _, v in pairs(ActiveTracks) do
		v:AdjustSpeed(0)
	end
end)

addcmd('unfreezeanims',{},function(args, speaker)
	local Humanoid = speaker.Character:FindFirstChildOfClass("Humanoid") or speaker.Character:FindFirstChildOfClass("AnimationController")
	local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
	for _, v in pairs(ActiveTracks) do
		v:AdjustSpeed(1)
	end
end)




addcmd('respawn',{},function(args, speaker)
	respawn(speaker)
end)

addcmd('refresh',{'re'},function(args, speaker)
	refresh(speaker)
end)

addcmd('god',{},function(args, speaker)
	permadeath(speaker)
	local Cam = workspace.CurrentCamera
	local Pos, Char = Cam.CFrame, speaker.Character
	local Human = Char and Char.FindFirstChildWhichIsA(Char, "Humanoid")
	local nHuman = Human.Clone(Human)
	nHuman.Parent, speaker.Character = Char, nil
	nHuman.SetStateEnabled(nHuman, 15, false)
	nHuman.SetStateEnabled(nHuman, 1, false)
	nHuman.SetStateEnabled(nHuman, 0, false)
	nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human)
	speaker.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos
	nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
	local Script = Char.FindFirstChild(Char, "Animate")
	if Script then
		Script.Disabled = true
		wait()
		Script.Disabled = false
	end
	nHuman.Health = nHuman.MaxHealth
end)

invisRunning = false
addcmd('invisible',{'invis'},function(args, speaker)
	if invisRunning then return end
	invisRunning = true
	permadeath(speaker)
	-- Full credit to AmokahFox @V3rmillion
	local Player = speaker
	repeat wait(.1) until Player.Character
	local Character = Player.Character
	Character.Archivable = true
	local IsInvis = false
	local IsRunning = true
	local InvisibleCharacter = Character:Clone()
	InvisibleCharacter.Parent = Lighting
	local Void = workspace.FallenPartsDestroyHeight
	InvisibleCharacter.Name = ""
	local CF

	local invisFix = RunService.Stepped:Connect(function()
		pcall(function()
			local IsInteger
			if tostring(Void):find'-' then
				IsInteger = true
			else
				IsInteger = false
			end
			local Pos = Player.Character.HumanoidRootPart.Position
			local Pos_String = tostring(Pos)
			local Pos_Seperate = Pos_String:split(', ')
			local X = tonumber(Pos_Seperate[1])
			local Y = tonumber(Pos_Seperate[2])
			local Z = tonumber(Pos_Seperate[3])
			if IsInteger == true then
				if Y <= Void then
					Respawn()
				end
			elseif IsInteger == false then
				if Y >= Void then
					Respawn()
				end
			end
		end)
	end)

	for i,v in pairs(InvisibleCharacter:GetDescendants())do
		if v:IsA("BasePart") then
			if v.Name == "HumanoidRootPart" then
				v.Transparency = 1
			else
				v.Transparency = .5
			end
		end
	end

	function Respawn()
		IsRunning = false
		if IsInvis == true then
			pcall(function()
				Player.Character = Character
				wait()
				Character.Parent = workspace
				Character:FindFirstChildWhichIsA'Humanoid':Destroy()
				IsInvis = false
				InvisibleCharacter.Parent = nil
				invisRunning = false
			end)
		elseif IsInvis == false then
			pcall(function()
				Player.Character = Character
				wait()
				Character.Parent = workspace
				Character:FindFirstChildWhichIsA'Humanoid':Destroy()
				TurnVisible()
			end)
		end
	end

	local invisDied
	invisDied = InvisibleCharacter:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
		Respawn()
		invisDied:Disconnect()
	end)

	if IsInvis == true then return end
	IsInvis = true
	CF = workspace.CurrentCamera.CFrame
	local CF_1 = Player.Character.HumanoidRootPart.CFrame
	Character:MoveTo(Vector3.new(0,math.pi*1000000,0))
	workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
	wait(.2)
	workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
	InvisibleCharacter = InvisibleCharacter
	Character.Parent = Lighting
	InvisibleCharacter.Parent = workspace
	InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
	Player.Character = InvisibleCharacter
	execCmd('fixcam')
	Player.Character.Animate.Disabled = true
	Player.Character.Animate.Disabled = false

	function TurnVisible()
		if IsInvis == false then return end
		invisFix:Disconnect()
		invisDied:Disconnect()
		CF = workspace.CurrentCamera.CFrame
		Character = Character
		local CF_1 = Player.Character.HumanoidRootPart.CFrame
		Character.HumanoidRootPart.CFrame = CF_1
		InvisibleCharacter:Destroy()
		Player.Character = Character
		Character.Parent = workspace
		IsInvis = false
		Player.Character.Animate.Disabled = true
		Player.Character.Animate.Disabled = false
		invisDied = Character:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
			Respawn()
			invisDied:Disconnect()
		end)
		invisRunning = false
	end
	notify('Invisible','You now appear invisible to other players')
end)

addcmd("visible", {"vis","uninvisible"}, function(args, speaker)
	TurnVisible()
end)

addcmd("toggleinvis", {}, function(args, speaker)
	execCmd(invisRunning and "visible" or "invisible")
end)

addcmd('toolinvisible',{'toolinvis','tinvis'},function(args, speaker)
	local Char  = Players.LocalPlayer.Character
	local touched = false
	local tpdback = false
	local box = Instance.new('Part')
	box.Anchored = true
	box.CanCollide = true
	box.Size = Vector3.new(10,1,10)
	box.Position = Vector3.new(0,10000,0)
	box.Parent = workspace
	local boxTouched = box.Touched:connect(function(part)
		if (part.Parent.Name == Players.LocalPlayer.Name) then
			if touched == false then
				touched = true
				local function apply()
					local no = Char.HumanoidRootPart:Clone()
					wait(.25)
					Char.HumanoidRootPart:Destroy()
					no.Parent = Char
					Char:MoveTo(loc)
					touched = false
				end
				if Char then
					apply()
				end
			end
		end
	end)
	repeat wait() until Char
	local cleanUp
	cleanUp = Players.LocalPlayer.CharacterAdded:connect(function(char)
		boxTouched:Disconnect()
		box:Destroy()
		cleanUp:Disconnect()
	end)
	loc = Char.HumanoidRootPart.Position
	Char:MoveTo(box.Position + Vector3.new(0,.5,0))
end)

addcmd("strengthen", {}, function(args, speaker)
	for _, child in pairs(speaker.Character:GetDescendants()) do
		if child.ClassName == "Part" then
			if args[1] then
				child.CustomPhysicalProperties = PhysicalProperties.new(args[1], 0.3, 0.5)
			else
				child.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
			end
		end
	end
end)

addcmd("weaken", {}, function(args, speaker)
	for _, child in pairs(speaker.Character:GetDescendants()) do
		if child.ClassName == "Part" then
			if args[1] then
				child.CustomPhysicalProperties = PhysicalProperties.new(-args[1], 0.3, 0.5)
			else
				child.CustomPhysicalProperties = PhysicalProperties.new(0, 0.3, 0.5)
			end
		end
	end
end)

addcmd("unweaken", {"unstrengthen"}, function(args, speaker)
	for _, child in pairs(speaker.Character:GetDescendants()) do
		if child.ClassName == "Part" then
			child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
		end
	end
end)

addcmd("breakvelocity", {}, function(args, speaker)
	local BeenASecond, V3 = false, Vector3.new(0, 0, 0)
	delay(1, function()
		BeenASecond = true
	end)
	while not BeenASecond do
		for _, v in ipairs(speaker.Character:GetDescendants()) do
			if v:IsA("BasePart") then
				v.Velocity, v.RotVelocity = V3, V3
			end
		end
		wait()
	end
end)

addcmd('jpower',{'jumppower','jp'},function(args, speaker)
	local jpower = args[1] or 50
	if isNumber(jpower) then
		if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
			speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = jpower
		else
			speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = jpower
		end
	end
end)

addcmd("maxslopeangle", {"msa"}, function(args, speaker)
	local sangle = args[1] or 89
	if isNumber(sangle) then
		speaker.Character:FindFirstChildWhichIsA("Humanoid").MaxSlopeAngle = sangle
	end
end)

addcmd("gravity", {"grav"}, function(args, speaker)
	local grav = args[1] or 196.2
	if isNumber(grav) then
		workspace.Gravity = grav
	end
end)

addcmd("hipheight", {"hheight"}, function(args, speaker)
	speaker.Character:FindFirstChildWhichIsA("Humanoid").HipHeight = args[1] or (r15(speaker) and 2.1 or 0)
end)

addcmd("dance", {}, function(args, speaker)
	pcall(execCmd, "undance")
	local dances = {"27789359", "30196114", "248263260", "45834924", "33796059", "28488254", "52155728"}
	if r15(speaker) then
		dances = {"3333432454", "4555808220", "4049037604", "4555782893", "10214311282", "10714010337", "10713981723", "10714372526", "10714076981", "10714392151", "11444443576"}
	end
	local animation = Instance.new("Animation")
	animation.AnimationId = "rbxassetid://" .. dances[math.random(1, #dances)]
	danceTrack = speaker.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(animation)
	danceTrack.Looped = true
	danceTrack:Play()
end)

addcmd("undance", {"nodance"}, function(args, speaker)
	danceTrack:Stop()
	danceTrack:Destroy()
end)

addcmd('nolimbs',{'rlimbs'},function(args, speaker)
	if r15(speaker) then
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") and
				v.Name == "RightUpperLeg" or
				v.Name == "LeftUpperLeg" or
				v.Name == "RightUpperArm" or
				v.Name == "LeftUpperArm" then
				v:Destroy()
			end
		end
	else
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") and
				v.Name == "Right Leg" or
				v.Name == "Left Leg" or
				v.Name == "Right Arm" or
				v.Name == "Left Arm" then
				v:Destroy()
			end
		end
	end
end)

addcmd('noarms',{'rarms'},function(args, speaker)
	if r15(speaker) then
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") and
				v.Name == "RightUpperArm" or
				v.Name == "LeftUpperArm" then
				v:Destroy()
			end
		end
	else
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") and
				v.Name == "Right Arm" or
				v.Name == "Left Arm" then
				v:Destroy()
			end
		end
	end
end)

addcmd('nolegs',{'rlegs'},function(args, speaker)
	if r15(speaker) then
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") and
				v.Name == "RightUpperLeg" or
				v.Name == "LeftUpperLeg" then
				v:Destroy()
			end
		end
	else
		for i,v in pairs(speaker.Character:GetChildren()) do
			if v:IsA("BasePart") and
				v.Name == "Right Leg" or
				v.Name == "Left Leg" then
				v:Destroy()
			end
		end
	end
end)

addcmd("sit", {}, function(args, speaker)
	speaker.Character:FindFirstChildWhichIsA("Humanoid").Sit = true
end)

addcmd("lay", {"laydown"}, function(args, speaker)
	local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
	humanoid.Sit = true
	task.wait(0.1)
	humanoid.RootPart.CFrame = humanoid.RootPart.CFrame * CFrame.Angles(math.pi * 0.5, 0, 0)
	for _, v in ipairs(humanoid:GetPlayingAnimationTracks()) do
		v:Stop()
	end
end)

addcmd("sitwalk", {}, function(args, speaker)
	local anims = speaker.Character.Animate
	local sit = anims.sit:FindFirstChildWhichIsA("Animation").AnimationId
	anims.idle:FindFirstChildWhichIsA("Animation").AnimationId = sit
	anims.walk:FindFirstChildWhichIsA("Animation").AnimationId = sit
	anims.run:FindFirstChildWhichIsA("Animation").AnimationId = sit
	anims.jump:FindFirstChildWhichIsA("Animation").AnimationId = sit
	speaker.Character:FindFirstChildWhichIsA("Humanoid").HipHeight = not r15(speaker) and -1.5 or 0.5
end)

addcmd("nosit", {}, function(args, speaker)
    speaker.Character:FindFirstChildWhichIsA("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Seated, false)
end)

addcmd("unnosit", {}, function(args, speaker)
    speaker.Character:FindFirstChildWhichIsA("Humanoid"):SetStateEnabled(Enum.HumanoidStateType.Seated, true)
end)

addcmd("jump", {}, function(args, speaker)
	speaker.Character:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
end)

local infJump
infJumpDebounce = false
addcmd("infjump", {"infinitejump"}, function(args, speaker)
	if infJump then infJump:Disconnect() end
	infJumpDebounce = false
	infJump = UserInputService.JumpRequest:Connect(function()
		if not infJumpDebounce then
			infJumpDebounce = true
			speaker.Character:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
			wait()
			infJumpDebounce = false
		end
	end)
end)

addcmd("uninfjump", {"uninfinitejump", "noinfjump", "noinfinitejump"}, function(args, speaker)
	if infJump then infJump:Disconnect() end
	infJumpDebounce = false
end)

local flyjump
addcmd("flyjump", {}, function(args, speaker)
	if flyjump then flyjump:Disconnect() end
	flyjump = UserInputService.JumpRequest:Connect(function()
		speaker.Character:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
	end)
end)

addcmd("unflyjump", {"noflyjump"}, function(args, speaker)
	if flyjump then flyjump:Disconnect() end
end)

local HumanModCons = {}
addcmd('autojump',{'ajump'},function(args, speaker)
	local Char = speaker.Character
	local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
	local function autoJump()
		if Char and Human then
			local check1 = workspace:FindPartOnRay(Ray.new(Human.RootPart.Position-Vector3.new(0,1.5,0), Human.RootPart.CFrame.lookVector*3), Human.Parent)
			local check2 = workspace:FindPartOnRay(Ray.new(Human.RootPart.Position+Vector3.new(0,1.5,0), Human.RootPart.CFrame.lookVector*3), Human.Parent)
			if check1 or check2 then
				Human.Jump = true
			end
		end
	end
	autoJump()
	HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)
	HumanModCons.ajCA = (HumanModCons.ajCA and HumanModCons.ajCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
		Char, Human = nChar, nChar:WaitForChild("Humanoid")
		autoJump()
		HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)
	end)
end)

addcmd('unautojump',{'noautojump', 'noajump', 'unajump'},function(args, speaker)
	HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or nil
	HumanModCons.ajCA = (HumanModCons.ajCA and HumanModCons.ajCA:Disconnect() and false) or nil
end)

addcmd('edgejump',{'ejump'},function(args, speaker)
	local Char = speaker.Character
	local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
	-- Full credit to NoelGamer06 @V3rmillion
	local state
	local laststate
	local lastcf
	local function edgejump()
		if Char and Human then
			laststate = state
			state = Human:GetState()
			if laststate ~= state and state == Enum.HumanoidStateType.Freefall and laststate ~= Enum.HumanoidStateType.Jumping then
				Char.HumanoidRootPart.CFrame = lastcf
				Char.HumanoidRootPart.Velocity = Vector3.new(Char.HumanoidRootPart.Velocity.X, Human.JumpPower or Human.JumpHeight, Char.HumanoidRootPart.Velocity.Z)
			end
			lastcf = Char.HumanoidRootPart.CFrame
		end
	end
	edgejump()
	HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
	HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
		Char, Human = nChar, nChar:WaitForChild("Humanoid")
		edgejump()
		HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
	end)
end)

addcmd('unedgejump',{'noedgejump', 'noejump', 'unejump'},function(args, speaker)
	HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or nil
	HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or nil
end)

addcmd("team", {}, function(args, speaker)
    local teamName = getstring(1)
    local team = nil
    local root = speaker.Character and getRoot(speaker.Character)
    for _, v in ipairs(Teams:GetChildren()) do
        if v.Name:lower():match(teamName:lower()) then
            team = v
            break
        end
    end
    if not team then
        return notify("Invalid Team", teamName .. " is not a valid team")
    end
    if root and firetouchinterest then
        for _, v in ipairs(workspace:GetDescendants()) do
            if v:IsA("SpawnLocation") and v.BrickColor == team.TeamColor and v.AllowTeamChangeOnTouch == true then
                firetouchinterest(v, root, 0)
                firetouchinterest(v, root, 1)
                break
            end
        end
    else
        speaker.Team = team
    end
end)

addcmd('nobgui',{'unbgui','nobillboardgui','unbillboardgui','noname','rohg'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants())do
		if v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
			v:Destroy()
		end
	end
end)

addcmd('loopnobgui',{'loopunbgui','loopnobillboardgui','loopunbillboardgui','loopnoname','looprohg'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants())do
		if v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
			v:Destroy()
		end
	end
	local function charPartAdded(part)
		if part:IsA("BillboardGui") or part:IsA("SurfaceGui") then
			wait()
			part:Destroy()
		end
	end
	charPartTrigger = speaker.Character.DescendantAdded:Connect(charPartAdded)
end)

addcmd('unloopnobgui',{'unloopunbgui','unloopnobillboardgui','unloopunbillboardgui','unloopnoname','unlooprohg'},function(args, speaker)
	if charPartTrigger then
		charPartTrigger:Disconnect()
	end
end)

addcmd('spasm',{},function(args, speaker)
	if not r15(speaker) then
		local pchar=speaker.Character
		local AnimationId = "33796059"
		SpasmAnim = Instance.new("Animation")
		SpasmAnim.AnimationId = "rbxassetid://"..AnimationId
		Spasm = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(SpasmAnim)
		Spasm:Play()
		Spasm:AdjustSpeed(99)
	else
		notify('R6 Required','This command requires the r6 rig type')
	end
end)

addcmd('unspasm',{'nospasm'},function(args, speaker)
	Spasm:Stop()
	SpasmAnim:Destroy()
end)

addcmd('headthrow',{},function(args, speaker)
	if not r15(speaker) then
		local AnimationId = "35154961"
		local Anim = Instance.new("Animation")
		Anim.AnimationId = "rbxassetid://"..AnimationId
		local k = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
		k:Play(0)
		k:AdjustSpeed(1)
	else
		notify('R6 Required','This command requires the r6 rig type')
	end
end)

addcmd('animation',{'anim'},function(args, speaker)
	if not r15(speaker) then
		local pchar=speaker.Character
		local AnimationId = tostring(args[1])
		local Anim = Instance.new("Animation")
		Anim.AnimationId = "rbxassetid://"..AnimationId
		local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
		k:Play()
		if args[2] then
			k:AdjustSpeed(tostring(args[2]))
		end
	else
		notify('R6 Required','This command requires the r6 rig type')
	end
end)

addcmd('noanim',{},function(args, speaker)
	speaker.Character.Animate.Disabled = true
end)

addcmd('reanim',{},function(args, speaker)
	speaker.Character.Animate.Disabled = false
end)

addcmd('animspeed',{},function(args, speaker)
	local Char = speaker.Character
	local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

	for i,v in next, Hum:GetPlayingAnimationTracks() do
		v:AdjustSpeed(tonumber(args[1] or 1))
	end
end)

addcmd('copyanimation',{'copyanim','copyemote'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for _,v in ipairs(players)do
		local char = Players[v].Character
		for _, v1 in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks()) do
			v1:Stop()
		end
		for _, v1 in pairs(Players[v].Character:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks()) do
			if not string.find(v1.Animation.AnimationId, "507768375") then
				local ANIM = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(v1.Animation)
				ANIM:Play(.1, 1, v1.Speed)
				ANIM.TimePosition = v1.TimePosition
				task.spawn(function()
					v1.Stopped:Wait()
					ANIM:Stop()
					ANIM:Destroy()
				end)
			end
		end
	end
end)

addcmd("copyanimationid", {"copyanimid", "copyemoteid"}, function(args, speaker)
    local copyAnimId = function(player)
        local found = "Animations Copied"

        for _, v in pairs(player.Character:FindFirstChildWhichIsA("Humanoid"):GetPlayingAnimationTracks()) do
            local animationId = v.Animation.AnimationId
            local assetId = animationId:find("rbxassetid://") and animationId:match("%d+")

            if not string.find(animationId, "507768375") and not string.find(animationId, "180435571") then
                if assetId then
                    local success, result = pcall(function()
                        return MarketplaceService:GetProductInfo(tonumber(assetId)).Name
                    end)
                    local name = success and result or "Failed to get name"
                    found = found .. "\n\nName: " .. name .. "\nAnimation Id: " .. animationId
                else
                    found = found .. "\n\nAnimation Id: " .. animationId
                end
            end
        end

        if found ~= "Animations Copied" then
            toClipboard(found)
        else
            notify("Animations", "No animations to copy")
        end
    end

    if args[1] then
        copyAnimId(Players[getPlayer(args[1], speaker)[1]])
    else
        copyAnimId(speaker)
    end
end)

addcmd('stopanimations',{'stopanims','stopanim'},function(args, speaker)
	local Char = speaker.Character
	local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

	for i,v in next, Hum:GetPlayingAnimationTracks() do
		v:Stop()
	end
end)

addcmd('refreshanimations', {'refreshanimation', 'refreshanims', 'refreshanim'}, function(args, speaker)
	local Char = speaker.Character or speaker.CharacterAdded:Wait()
	local Human = Char and Char:WaitForChild('Humanoid', 15)
	local Animate = Char and Char:WaitForChild('Animate', 15)
	if not Human or not Animate then
		return notify('Refresh Animations', 'Failed to get Animate/Humanoid')
	end
	Animate.Disabled = true
	for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
		v:Stop()
	end
	Animate.Disabled = false
end)

addcmd('allowcustomanim', {'allowcustomanimations'}, function(args, speaker)
	StarterPlayer.AllowCustomAnimations = true
	execCmd('refreshanimations')
end)

addcmd('unallowcustomanim', {'unallowcustomanimations'}, function(args, speaker)
	StarterPlayer.AllowCustomAnimations = false
	execCmd('refreshanimations')
end)

addcmd('loopanimation', {'loopanim'},function(args, speaker)
	local Char = speaker.Character
	local Human = Char and Char.FindFirstChildWhichIsA(Char, "Humanoid")
	for _, v in ipairs(Human.GetPlayingAnimationTracks(Human)) do
		v.Looped = true
	end
end)

addcmd('tpposition',{'tppos'},function(args, speaker)
	if #args < 3 then return end
	local tpX,tpY,tpZ = tonumber((args[1]:gsub(",", ""))),tonumber((args[2]:gsub(",", ""))),tonumber((args[3]:gsub(",", "")))
	local char = speaker.Character
	if char and getRoot(char) then
		getRoot(char).CFrame = CFrame.new(tpX,tpY,tpZ)
	end
end)

addcmd('tweentpposition',{'ttppos'},function(args, speaker)
	if #args < 3 then return end
	local tpX,tpY,tpZ = tonumber((args[1]:gsub(",", ""))),tonumber((args[2]:gsub(",", ""))),tonumber((args[3]:gsub(",", "")))
	local char = speaker.Character
	if char and getRoot(char) then
		TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(tpX,tpY,tpZ)}):Play()
	end
end)

addcmd('offset',{},function(args, speaker)
	if #args < 3 then
		return 
	end
	if speaker.Character then
		speaker.Character:TranslateBy(Vector3.new(tonumber(args[1]) or 0, tonumber(args[2]) or 0, tonumber(args[3]) or 0))
	end
end)

addcmd('tweenoffset',{'toffset'},function(args, speaker)
	if #args < 3 then return end
	local tpX,tpY,tpZ = tonumber(args[1]),tonumber(args[2]),tonumber(args[3])
	local char = speaker.Character
	if char and getRoot(char) then
		TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(tpX,tpY,tpZ)}):Play()
	end
end)

addcmd('clickteleport',{},function(args, speaker)
	if speaker == Players.LocalPlayer then
		notify('Click TP','Go to Settings>Keybinds>Add to set up click tp')
	end
end)

addcmd("mouseteleport", {"mousetp"}, function(args, speaker)
    local root = getRoot(speaker.Character)
    local pos = IYMouse.Hit
    if root and pos then
        root.CFrame = CFrame.new(pos.X, pos.Y + 3, pos.Z, select(4, root.CFrame:components()))
    end
end)

addcmd('tptool', {'teleporttool'}, function(args, speaker)
	local TpTool = Instance.new("Tool")
	TpTool.Name = "Teleport Tool"
	TpTool.RequiresHandle = false
	TpTool.Parent = speaker.Backpack
	TpTool.Activated:Connect(function()
		local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
		local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
		if not Char or not HRP then
			return warn("Failed to find HumanoidRootPart")
		end
		HRP.CFrame = CFrame.new(IYMouse.Hit.X, IYMouse.Hit.Y + 3, IYMouse.Hit.Z, select(4, HRP.CFrame:components()))
	end)
end)

addcmd('clickdelete',{},function(args, speaker)
	if speaker == Players.LocalPlayer then
		notify('Click Delete','Go to Settings>Keybinds>Add to set up click delete')
	end
end)

addcmd('getposition',{'getpos','notifypos','notifyposition'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		local char = Players[v].Character
		local pos = char and (getRoot(char) or char:FindFirstChildWhichIsA("BasePart"))
		pos = pos and pos.Position
		if not pos then
			return notify('Getposition Error','Missing character')
		end
		local roundedPos = math.round(pos.X) .. ", " .. math.round(pos.Y) .. ", " .. math.round(pos.Z)
		notify('Current Position',roundedPos)
	end
end)

addcmd('copyposition',{'copypos'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		local char = Players[v].Character
		local pos = char and (getRoot(char) or char:FindFirstChildWhichIsA("BasePart"))
		pos = pos and pos.Position
		if not pos then
			return notify('Getposition Error','Missing character')
		end
		local roundedPos = math.round(pos.X) .. ", " .. math.round(pos.Y) .. ", " .. math.round(pos.Z)
		toClipboard(roundedPos)
	end
end)

addcmd('walktopos',{'walktoposition'},function(args, speaker)
	if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
		speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
		wait(.1)
	end
	speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(args[1],args[2],args[3])
end)

addcmd('speed',{'ws','walkspeed'},function(args, speaker)
	if args[2] then
		local speed = args[2] or 16
		if isNumber(speed) then
			speaker.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = speed
		end
	else
		local speed = args[1] or 16
		if isNumber(speed) then
			speaker.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = speed
		end
	end
end)

addcmd('spoofspeed',{'spoofws','spoofwalkspeed'},function(args, speaker)
	if args[1] and isNumber(args[1]) then
		if hookmetamethod then
			local char = speaker.Character
			local setspeed;
			local index; index = hookmetamethod(game, "__index", function(self, key)
				local keyclean = key:gsub("\0", "")
				if (keyclean == "WalkSpeed" or keyclean == "walkSpeed") and self:IsA("Humanoid") and self:IsDescendantOf(char) and not checkcaller() then
					return setspeed or args[1]
				end
				return index(self, key)
			end)
			local newindex; newindex = hookmetamethod(game, "__newindex", function(self, key, value)
				local keyclean = string.gsub(key, "\0", "")
				if (keyclean == "WalkSpeed" or keyclean == "walkSpeed") and self:IsA("Humanoid") and self:IsDescendantOf(char) and not checkcaller() then
					setspeed = tonumber(value)
					return setspeed
				end
				return newindex(self, key, value)
			end)
		else
			notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
		end
	end
end)

addcmd('loopspeed',{'loopws'},function(args, speaker)
	local speed = args[1] or 16
	if args[2] then
		speed = args[2] or 16
	end
	if isNumber(speed) then
		local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
		local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
		local function WalkSpeedChange()
			if Char and Human then
				Human.WalkSpeed = speed
			end
		end
		WalkSpeedChange()
		HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
		HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
			Char, Human = nChar, nChar:WaitForChild("Humanoid")
			WalkSpeedChange()
			HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
		end)
	end
end)

addcmd('unloopspeed',{'unloopws'},function(args, speaker)
	HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil
	HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil
end)

addcmd('spoofjumppower',{'spoofjp'},function(args, speaker)
	if args[1] and isNumber(args[1]) then
		if hookmetamethod then
			local char = speaker.Character
			local setpower;
			local index; index = hookmetamethod(game, "__index", function(self, key)
				local keyclean = key:gsub("\0", "")
				if (keyclean == "JumpPower" or keyclean == "jumpPower") and self:IsA("Humanoid") and self:IsDescendantOf(char) and not checkcaller() then
					return setpower or args[1]
				end
				return index(self, key)
			end)
			local newindex; newindex = hookmetamethod(game, "__newindex", function(self, key, value)
				local keyclean = string.gsub(key, "\0", "")
				if (keyclean == "JumpPower" or keyclean == "jumpPower") and self:IsA("Humanoid") and self:IsDescendantOf(char) and not checkcaller() then
					setpower = tonumber(value)
					return setpower
				end
				return newindex(self, key, value)
			end)
		else
			notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
		end
	end
end)

addcmd('loopjumppower',{'loopjp','loopjpower'},function(args, speaker)
	local jpower = args[1] or 50
	if isNumber(jpower) then
		local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
		local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
		local function JumpPowerChange()
			if Char and Human then
				if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
					speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = jpower
				else
					speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = jpower
				end
			end
		end
		JumpPowerChange()
		HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange)
		HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
			Char, Human = nChar, nChar:WaitForChild("Humanoid")
			JumpPowerChange()
			HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange)
		end)
	end
end)

addcmd('unloopjumppower',{'unloopjp','unloopjpower'},function(args, speaker)
	local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
	local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
	HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or nil
	HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or nil
	if Char and Human then
		if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
			speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = 50
		else
			speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = 50
		end
	end
end)

addcmd('tools',{'gears'},function(args, speaker)
	local function copy(instance)
		for i,c in pairs(instance:GetChildren())do
			if c:IsA('Tool') or c:IsA('HopperBin') then
				c:Clone().Parent = speaker:FindFirstChildOfClass("Backpack")
			end
			copy(c)
		end
	end
	copy(Lighting)
	local function copy(instance)
		for i,c in pairs(instance:GetChildren())do
			if c:IsA('Tool') or c:IsA('HopperBin') then
				c:Clone().Parent = speaker:FindFirstChildOfClass("Backpack")
			end
			copy(c)
		end
	end
	copy(ReplicatedStorage)
	notify('Tools','Copied tools from ReplicatedStorage and Lighting')
end)

addcmd('notools',{'rtools','clrtools','removetools','deletetools','dtools'},function(args, speaker)
	for i,v in pairs(speaker:FindFirstChildOfClass("Backpack"):GetDescendants()) do
		if v:IsA('Tool') or v:IsA('HopperBin') then
			v:Destroy()
		end
	end
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA('Tool') or v:IsA('HopperBin') then
			v:Destroy()
		end
	end
end)

addcmd('deleteselectedtool',{'dst'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA('Tool') or v:IsA('HopperBin') then
			v:Destroy()
		end
	end
end)

addcmd("console", {}, function(args, speaker)
    StarterGui:SetCore("DevConsoleVisible", true)
end)

addcmd('oldconsole',{},function(args, speaker)
	-- Thanks wally!!
	notify("Loading",'Hold on a sec')
	local _, str = pcall(function()
		return game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/console.lua", true)
	end)

	local s, e = loadstring(str)
	if typeof(s) ~= "function" then
		return
	end

	local success, message = pcall(s)
	if (not success) then
		if printconsole then
			printconsole(message)
		elseif printoutput then
			printoutput(message)
		end
	end
	wait(1)
	notify('Console','Press F9 to open the console')
end)

addcmd('explorer', {'dex'}, function(args, speaker)
	notify('Loading', 'Hold on a sec')
	loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
end)

addcmd('olddex', {'odex'}, function(args, speaker)
	notify('Loading old explorer', 'Hold on a sec')

	local getobjects = function(a)
		local Objects = {}
		if a then
			local b = InsertService:LoadLocalAsset(a)
			if b then 
				table.insert(Objects, b) 
			end
		end
		return Objects
	end

	local Dex = getobjects("rbxassetid://10055842438")[1]
	Dex.Parent = PARENT

	local function Load(Obj, Url)
		local function GiveOwnGlobals(Func, Script)
			-- Fix for this edit of dex being poorly made
			-- I (Alex) would like to commemorate whoever added this dex in somehow finding the worst dex to ever exist
			local Fenv, RealFenv, FenvMt = {}, {
				script = Script,
				getupvalue = function(a, b)
					return nil -- force it to use globals
				end,
				getreg = function() -- It loops registry for some idiotic reason so stop it from doing that and just use a global
					return {} -- force it to use globals
				end,
				getprops = getprops or function(inst)
					if getproperties then
						local props = getproperties(inst)
						if props[1] and gethiddenproperty then
							local results = {}
							for _,name in pairs(props) do
								local success, res = pcall(gethiddenproperty, inst, name)
								if success then
									results[name] = res
								end
							end

							return results
						end

						return props
					end

					return {}
				end
			}, {}
			FenvMt.__index = function(a,b)
				return RealFenv[b] == nil and getgenv()[b] or RealFenv[b]
			end
			FenvMt.__newindex = function(a, b, c)
				if RealFenv[b] == nil then 
					getgenv()[b] = c 
				else 
					RealFenv[b] = c 
				end
			end
			setmetatable(Fenv, FenvMt)
			pcall(setfenv, Func, Fenv)
			return Func
		end

		local function LoadScripts(_, Script)
			if Script:IsA("LocalScript") then
				task.spawn(function()
					GiveOwnGlobals(loadstring(Script.Source,"="..Script:GetFullName()), Script)()
				end)
			end
			table.foreach(Script:GetChildren(), LoadScripts)
		end

		LoadScripts(nil, Obj)
	end

	Load(Dex)
end)

addcmd('DexPlusPlus',{'Dex++'},function(args, speaker)
	notify("Loading",'Hold on a sec')
	loadstring(game:HttpGet("https://github.com/AZYsGithub/DexPlusPlus/releases/latest/download/out.lua"))()
end)

addcmd('remotespy',{'rspy'},function(args, speaker)
	notify("Loading",'Hold on a sec')
	loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua"))()
end)

addcmd('remotespyC',{'rspyC'},function(args, speaker)
	notify("Loading",'Hold on a sec')
loadstring(game:HttpGet("https://raw.githubusercontent.com/anotheraltacchere/infYld/refs/heads/main/rspyC"))()
end)

addcmd('getattribute',{'attributes'},function(args, speaker)
	notify("Loading",'Hold on a sec')
	-- Services
local OrionLib = loadstring(game:HttpGet(("https://raw.githubusercontent.com/Giangplay/Script/main/Orion_Library_PE_V2.lua")))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- Constants
local VALUE_TYPES = {
    "StringValue",
    "BoolValue",
    "IntValue",
    "NumberValue",
    "Vector3Value",
    "CFrameValue",
    "Color3Value",
    "BrickColorValue",
    "ObjectValue",
    "RayValue",
    "InstanceValue"
}

local PROPERTY_CATEGORIES = {
    Appearance = {"Color", "Material", "Transparency", "Reflectance", "Surface", "Texture"},
    Physics = {"CanCollide", "Anchored", "Mass", "Friction", "Elasticity"},
    Data = {"Value", "Name", "ClassName", "Parent"},
    UI = {"Size", "Position", "AnchorPoint", "TextSize", "Font"},
    Security = {"Locked", "Archivable", "RobloxLocked"},
    Network = {"NetworkOwner", "NetworkClient"},
}

-- Utility Functions
local Utilities = {}

function Utilities.DeepCopy(original)
    local copy = {}
    for k, v in pairs(original) do
        if type(v) == "table" then
            copy[k] = Utilities.DeepCopy(v)
        else
            copy[k] = v
        end
    end
    return copy
end

function Utilities.FormatValue(value, valueType)
    if value == nil then return "nil" end
    
    if typeof(value) == "Instance" then
        return string.format("%s (%s)", value.Name, value.ClassName)
    elseif typeof(value) == "CFrame" then
        local pos = value.Position
        return string.format("CFrame(%.2f, %.2f, %.2f)", pos.X, pos.Y, pos.Z)
    elseif typeof(value) == "Vector3" then
        return string.format("Vector3(%.2f, %.2f, %.2f)", value.X, value.Y, value.Z)
    elseif typeof(value) == "Color3" then
        return string.format("RGB(%.2f, %.2f, %.2f)", value.R, value.G, value.B)
    elseif typeof(value) == "BrickColor" then
        return string.format("BrickColor: %s", value.Name)
    elseif typeof(value) == "EnumItem" then
        return string.format("%s.%s", tostring(value.EnumType), value.Name)
    elseif type(value) == "table" then
        local result = "{"
        for k, v in pairs(value) do
            result = result .. string.format("[%s]=%s, ", tostring(k), tostring(v))
        end
        return result .. "}"
    end
    
    return tostring(value)
end

function Utilities.GetValueType(value)
    local valueType = typeof(value)
    if valueType == "Instance" then
        return value.ClassName
    end
    return valueType
end

-- Property Inspector Class
local PropertyInspector = {}
PropertyInspector.__index = PropertyInspector

function PropertyInspector.new()
    local self = setmetatable({}, PropertyInspector)
    self.currentObject = nil
    self.lastResults = ""
    self.watchedProperties = {}
    self.propertyChangedConnections = {}
    self:InitializeUI()
    return self
end

function PropertyInspector:InitializeUI()
    self.window = OrionLib:MakeWindow({
        Name = "Advanced Property Inspector",
        HidePremium = false,
        SaveConfig = true,
        ConfigFolder = "AdvancedInspector"
    })
    
    -- Main Tab
    self.mainTab = self.window:MakeTab({
        Name = "Inspector",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })
    
    -- Debug Tab
    self.debugTab = self.window:MakeTab({
        Name = "Debug",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })
    
    -- Watch Tab
    self.watchTab = self.window:MakeTab({
        Name = "Watch",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })
    
    self:SetupMainTab()
    self:SetupDebugTab()
    self:SetupWatchTab()
end

function PropertyInspector:SetupMainTab()
    -- Path input
    self.mainTab:AddTextbox({
        Name = "Object Path",
        Default = "",
        TextDisappear = false,
        Callback = function(Value)
            self:FindObject(Value)
        end
    })
    
    -- Quick access buttons
    self.mainTab:AddDropdown({
        Name = "Quick Access",
        Default = "1",
        Options = {"LocalPlayer", "Camera", "Workspace", "Lighting", "ReplicatedStorage"},
        Callback = function(Value)
            self:FindObject("game:GetService('" .. Value .. "')")
        end
    })
    
    -- Inspect button
    self.mainTab:AddButton({
        Name = "Inspect",
        Callback = function()
            self:InspectCurrent()
        end
    })
    
    -- Copy button
    self.mainTab:AddButton({
        Name = "Copy Results",
        Callback = function()
            self:CopyResults()
        end
    })
end

function PropertyInspector:SetupDebugTab()
    -- Value type filter
    self.debugTab:AddDropdown({
        Name = "Filter by Type",
        Default = "All",
        Options = {"All", unpack(VALUE_TYPES)},
        Callback = function(Value)
            self.typeFilter = Value
            self:InspectCurrent()
        end
    })
    
    -- Property category filter
    local categories = {"All"}
    for category, _ in pairs(PROPERTY_CATEGORIES) do
        table.insert(categories, category)
    end
    
    self.debugTab:AddDropdown({
        Name = "Filter by Category",
        Default = "All",
        Options = categories,
        Callback = function(Value)
            self.categoryFilter = Value
            self:InspectCurrent()
        end
    })
    
    -- Debug settings
    self.debugTab:AddToggle({
        Name = "Show Hidden Properties",
        Default = false,
        Callback = function(Value)
            self.showHidden = Value
            self:InspectCurrent()
        end
    })
    
    self.debugTab:AddToggle({
        Name = "Monitor Property Changes",
        Default = false,
        Callback = function(Value)
            self.monitorChanges = Value
            self:SetupPropertyMonitoring()
        end
    })
end

function PropertyInspector:SetupWatchTab()
    self.watchTab:AddParagraph("Property Watch", "Add properties to monitor:")
    
    -- Property input
    self.watchTab:AddTextbox({
        Name = "Property Name",
        Default = "",
        TextDisappear = false,
        Callback = function(Value)
            self.propertyToWatch = Value
        end
    })
    
    -- Add watch button
    self.watchTab:AddButton({
        Name = "Add Watch",
        Callback = function()
            self:AddPropertyWatch(self.propertyToWatch)
        end
    })
    
    -- Clear watches button
    self.watchTab:AddButton({
        Name = "Clear All Watches",
        Callback = function()
            self:ClearPropertyWatches()
        end
    })
end

function PropertyInspector:FindObject(path)
    local success, result = pcall(function()
        -- Method 1: Direct loadstring
        local object = loadstring("return " .. path)()
        if object then return object end
        
        -- Method 2: GetService
        object = game:GetService(path)
        if object then return object end
        
        -- Method 3: Path traversal
        local parts = string.split(path, ".")
        local current = game
        
        for _, part in ipairs(parts) do
            local indexMatch = part:match("%[(%d+)%]")
            if indexMatch then
                part = part:gsub("%[%d+%]", "")
                current = current[part][tonumber(indexMatch)]
            else
                current = current:FindFirstChild(part) or current[part]
            end
            
            if not current then return nil end
        end
        
        return current
    end)
    
    if success and result then
        self.currentObject = result
        self:NotifySuccess("Object found: " .. result.Name)
        self:InspectCurrent()
    else
        self:NotifyError("Object not found. Check path.")
    end
end

function PropertyInspector:InspectCurrent()
    if not self.currentObject then
        self:NotifyError("No object selected")
        return
    end
    
    local result = self:GenerateInspectionReport()
    self.lastResults = result
    self.mainTab:AddParagraph("Inspection Results", result)
end

function PropertyInspector:GenerateInspectionReport()
    local object = self.currentObject
    local result = "=== Object Information ===\n"
    result = result .. string.format("Name: %s\n", object.Name)
    result = result .. string.format("Class: %s\n", object.ClassName)
    result = result .. string.format("Path: %s\n\n", object:GetFullName())
    
    -- Value objects
    if table.find(VALUE_TYPES, object.ClassName) then
        result = result .. "=== Value Data ===\n"
        result = result .. string.format("Value: %s\n", Utilities.FormatValue(object.Value))
        result = result .. string.format("Value Type: %s\n\n", Utilities.GetValueType(object.Value))
    end
    
    -- Properties by category
    for category, properties in pairs(PROPERTY_CATEGORIES) do
        if self.categoryFilter == "All" or self.categoryFilter == category then
            result = result .. string.format("=== %s Properties ===\n", category)
            for _, propName in ipairs(properties) do
                local success, value = pcall(function() return object[propName] end)
                if success then
                    result = result .. string.format("%s: %s\n", propName, Utilities.FormatValue(value))
                end
            end
            result = result .. "\n"
        end
    end
    
    -- Attributes
    result = result .. "=== Attributes ===\n"
    local attributes = object:GetAttributes()
    if not next(attributes) then
        result = result .. "No attributes found\n"
    else
        for name, value in pairs(attributes) do
            result = result .. string.format("%s: %s\n", name, Utilities.FormatValue(value))
        end
    end
    
    -- Children count
    if object:IsA("Instance") then
        result = result .. string.format("\nChildren Count: %d\n", #object:GetChildren())
    end
    
    return result
end

function PropertyInspector:AddPropertyWatch(propertyName)
    if not self.currentObject or not propertyName then return end
    
    local success, initialValue = pcall(function()
        return self.currentObject[propertyName]
    end)
    
    if success then
        self.watchedProperties[propertyName] = initialValue
        self:SetupPropertyMonitoring()
        self:NotifySuccess("Added watch for " .. propertyName)
    else
        self:NotifyError("Invalid property: " .. propertyName)
    end
end

function PropertyInspector:SetupPropertyMonitoring()
    if not self.currentObject or not self.monitorChanges then return end
    
    -- Clean up existing connections
    for _, connection in pairs(self.propertyChangedConnections) do
        connection:Disconnect()
    end
    self.propertyChangedConnections = {}
    
    -- Setup new monitoring
    for propName, initialValue in pairs(self.watchedProperties) do
        local connection = self.currentObject:GetPropertyChangedSignal(propName):Connect(function()
            local newValue = self.currentObject[propName]
            if newValue ~= initialValue then
                self:NotifyPropertyChange(propName, initialValue, newValue)
                self.watchedProperties[propName] = newValue
            end
        end)
        table.insert(self.propertyChangedConnections, connection)
    end
end

function PropertyInspector:ClearPropertyWatches()
    self.watchedProperties = {}
    for _, connection in pairs(self.propertyChangedConnections) do
        connection:Disconnect()
    end
    self.propertyChangedConnections = {}
    self:NotifySuccess("Cleared all property watches")
end

function PropertyInspector:NotifySuccess(message)
    OrionLib:MakeNotification({
        Name = "Success",
        Content = message,
        Image = "rbxassetid://4483345998",
        Time = 5
    })
end

function PropertyInspector:NotifyError(message)
    OrionLib:MakeNotification({
        Name = "Error",
        Content = message,
        Image = "rbxassetid://4483345998",
        Time = 5
    })
end

function PropertyInspector:NotifyPropertyChange(propName, oldValue, newValue)
    OrionLib:MakeNotification({
        Name = "Property Changed",
        Content = string.format("%s: %s -> %s", propName, 
            Utilities.FormatValue(oldValue), 
            Utilities.FormatValue(newValue)),
        Image = "rbxassetid://4483345998",
        Time = 5
    })
end

function PropertyInspector:CopyResults()
    if self.lastResults ~= "" then
        setclipboard(self.lastResults)
        self:NotifySuccess("Results copied to clipboard!")
    else
        self:NotifyError("No results to copy")
    end
end

-- Initialize
local inspector = PropertyInspector.new()
OrionLib:Init()

-- Cleanup
game:GetService("Players").PlayerRemoving:Connect(function(player)
    if player == game:GetService("Players").LocalPlayer then
        inspector:ClearPropertyWatches()
        OrionLib:Destroy()
    end
end)
end)

addcmd('bashdex',{'dexkeyless'},function(args, speaker)
	notify("Loading",'Hold on a sec')
getgenv().Key = "Bash" loadstring(game:HttpGet("https://raw.githubusercontent.com/crceck123/roblox-script/main/MC_IY%20Dex.txt"))()
end)

addcmd('keyboard',{'keyboard script'},function(args, speaker)
	loadstring(game:HttpGet("https://raw.githubusercontent.com/advxzivhsjjdhxhsidifvsh/mobkeyboard/main/main.txt", true))()
end)

addcmd('gamepass',{'freegamepass'},function(args, speaker)
	loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-dev-product-33218"))()
end)

addcmd('loopfriendrequestall',{'loopfriend'},function(args, speaker)
	local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local sentRequests = {} -- Track who has been requested

local function sendFriendRequest(player)
    if player ~= LocalPlayer and not sentRequests[player.UserId] then
        LocalPlayer:RequestFriendship(player)
        sentRequests[player.UserId] = true -- Mark as sent
    end
end

-- Send requests to all current players
for _, player in ipairs(Players:GetPlayers()) do
    sendFriendRequest(player)
end

-- Send request to new players as they join
Players.PlayerAdded:Connect(function(player)
    task.wait(2) -- Small delay to ensure they are fully loaded
    sendFriendRequest(player)
end)

-- Re-attempt every 10 seconds (avoids hitting rate limit)
task.spawn(function()
    while true do
        task.wait(10)
        for _, player in ipairs(Players:GetPlayers()) do
            sendFriendRequest(player)
        end
    end
end)
end)

addcmd('Chatspynew',{'CSpynew'},function(args, speaker)
local ChatSpy = {
    Enabled = true
}

local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to display spy message in chat
local function displaySpyMessage(playerName, message, isPrivate)
    if not ChatSpy.Enabled then return end
    
    -- Format the spy message
    local spyText = string.format(
        "👁️ [ChatSpy] %s%s: %s",
        isPrivate and "🔒 " or "",
        playerName,
        message
    )
    
    -- Display in TextChatService
    local channel = TextChatService.TextChannels.RBXGeneral
    channel:DisplaySystemMessage(spyText)
end

-- Hook Chat Messages (Including Private Messages)
local function hookPlayer(player)
    player.Chatted:Connect(function(msg)
        if player == LocalPlayer then return end -- Don't spy on own messages
        
        -- Check for private messages
        local isPrivate = string.sub(msg, 1, 3) == "/w " or 
                         string.sub(msg, 1, 3) == "/pm " or
                         string.sub(msg, 1, 5) == "/tell " or
                         string.sub(msg, 1, 9) == "/whisper "
        
        displaySpyMessage(player.Name, msg, isPrivate)
    end)
end

-- Initialize
local function init()
    -- Hook existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            hookPlayer(player)
        end
    end
    
    -- Hook new players
    Players.PlayerAdded:Connect(function(player)
        if player ~= LocalPlayer then
            hookPlayer(player)
        end
    end)
    
    -- Show enabled message
    TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage("👁️ [ChatSpy] Chat spy has been enabled! Monitoring all messages...")
end

init()

return ChatSpy
end)

addcmd('chatspyold',{'CSpyold'},function(args, speaker)
--This script reveals ALL hidden messages in the default chat

enabled = true --chat "/spy" to toggle!
spyOnMyself = true --if true will check your messages too
public = false --if true will chat the logs publicly (fun, risky)
publicItalics = true --if true will use /me to stand out
privateProperties = { --customize private logs
	Color = Color3.fromRGB(0,255,255); 
	Font = Enum.Font.SourceSansBold;
	TextSize = 18;
}


local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local player = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or Players.LocalPlayer
local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

local function onChatted(p,msg)
	if _G.chatSpyInstance == instance then
		if p==player and msg:lower():sub(1,4)=="/spy" then
			enabled = not enabled
			wait(0.3)
			privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
			StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
		elseif enabled and (spyOnMyself==true or p~=player) then
			msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
			local hidden = true
			local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
				if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and public==false and Players[packet.FromSpeaker].Team==player.Team)) then
					hidden = false
				end
			end)
			wait(1)
			conn:Disconnect()
			if hidden and enabled then
				if public then
					saymsg:FireServer((publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
				else
					privateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
					StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
				end
			end
		end
	end
end

for _,p in ipairs(Players:GetPlayers()) do
	p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end
Players.PlayerAdded:Connect(function(p)
	p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end)
privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
if not player.PlayerGui:FindFirstChild("Chat") then wait(3) end
local chatFrame = player.PlayerGui.Chat.Frame
chatFrame.ChatChannelParentFrame.Visible = true
chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
end)

addcmd('Samurai GUI',{'zo'},function(args, speaker)
-- Simple Roblox Script Combiner
-- Just paste your scripts between the [[ and ]] markers below
-- You can add as many scripts as you want

-- Script 1
local script1 = [[
        --// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

--// Variables
local player = Players.LocalPlayer
local guiName = "BlockingGui"
local defaultDelay = 0.09
local running = false
local loopThread = nil  -- Store loop reference to properly stop it

--// Function to Create GUI
local function createGUI()
    -- Remove previous GUI if exists
    local playerGui = player:FindFirstChild("PlayerGui")
    if not playerGui then return end
    local oldGui = playerGui:FindFirstChild(guiName)
    if oldGui then 
        oldGui:SetAttribute("KeepRunning", false)  -- Stop function
        task.wait(0.1)
        oldGui:Destroy()
    end

    -- GUI Container
    local gui = Instance.new("ScreenGui")
    gui.Name = guiName
    gui.Parent = playerGui

    -- Main Frame
    local frame = Instance.new("Frame", gui)
    frame.Size = UDim2.new(0, 180, 0, 80)

    -- Restore Saved Position
    local savedPos = playerGui:GetAttribute("BlockingGuiPosition")
    frame.Position = savedPos or UDim2.new(0.4, 0, 0.4, 0)  -- Default if no saved position
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

    -- Drag Handle (Top Bar)
    local dragBar = Instance.new("Frame", frame)
    dragBar.Size = UDim2.new(1, 0, 0.3, 0)
    dragBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)

    local dragText = Instance.new("TextLabel", dragBar)
    dragText.Size = UDim2.new(1, 0, 1, 0)
    dragText.Text = "Drag Here"
    dragText.TextColor3 = Color3.new(1, 1, 1)
    dragText.BackgroundTransparency = 1

    -- Toggle Button
    local button = Instance.new("TextButton", frame)
    button.Size = UDim2.new(1, 0, 0.35, 0)
    button.Position = UDim2.new(0, 0, 0.3, 0)
    button.TextColor3 = Color3.new(1, 1, 1)

    -- Delay Input Box
    local delayInput = Instance.new("TextBox", frame)
    delayInput.Size = UDim2.new(1, 0, 0.35, 0)
    delayInput.Position = UDim2.new(0, 0, 0.65, 0)
    delayInput.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    delayInput.TextColor3 = Color3.new(1, 1, 1)
    delayInput.ClearTextOnFocus = false

    -- Restore Running State
    running = playerGui:GetAttribute("BlockingRunning") or false
    button.Text = running and "Stop" or "Start"
    button.BackgroundColor3 = running and Color3.fromRGB(200, 50, 50) or Color3.fromRGB(50, 200, 50)

    -- Restore Delay Time
    local delayTime = playerGui:GetAttribute("BlockingDelay") or defaultDelay
    delayInput.Text = tostring(delayTime)

    -- Dragging System
    local dragging, dragStart, startPos
    local function onInputChanged(input)
        if dragging and (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            frame.Position = newPos
            playerGui:SetAttribute("BlockingGuiPosition", newPos)  -- Save Position
        end
    end

    dragBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragBar.InputChanged:Connect(onInputChanged)
    UserInputService.InputChanged:Connect(onInputChanged)

    -- Function to modify "Blocking" attribute
    local function checkAndModify()
        while running do
            local char = player.Character
            local backpack = player:FindFirstChildOfClass("Backpack")
            if char then
                local item1 = char:FindFirstChild("<TN~!1>")
                if item1 then
                    item1:SetAttribute("Blocking", false)
                end
            end
            if backpack then
                local item2 = backpack:FindFirstChild("<TN~!1>")
                if item2 then
                    item2:SetAttribute("Blocking", false)
                end
            end
            task.wait(delayTime)
        end
    end

    -- Toggle Button Click
    button.MouseButton1Click:Connect(function()
        running = not running
        playerGui:SetAttribute("BlockingRunning", running)  -- Store state properly
        button.Text = running and "Stop" or "Start"
        button.BackgroundColor3 = running and Color3.fromRGB(200, 50, 50) or Color3.fromRGB(50, 200, 50)

        if running then
            if loopThread then  -- Stop old thread if it exists
                task.cancel(loopThread)
            end
            loopThread = task.spawn(checkAndModify)
        else
            if loopThread then
                task.cancel(loopThread)  -- Stop function properly
                loopThread = nil
            end
        end
    end)

    -- Update Delay Time
    delayInput.FocusLost:Connect(function()
        local newDelay = tonumber(delayInput.Text)
        if newDelay and newDelay > 0 then
            delayTime = newDelay
            playerGui:SetAttribute("BlockingDelay", delayTime)  -- Save Delay
        else
            delayInput.Text = tostring(delayTime)  -- Reset if invalid
        end
    end)

    -- Start function if running was true before respawn
    if running and not loopThread then
        loopThread = task.spawn(checkAndModify)
    end
end

--// Create GUI on script start
createGUI()

--// Recreate GUI after respawn
player.CharacterAdded:Connect(function()
    task.wait(1)  -- Small delay to ensure PlayerGui loads
    createGUI()
end)
]]

-- Script 2
local script2 = [[
--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

--// Variables
local player = Players.LocalPlayer
local guiName = "RemoveObjectGui"
local running = false
local loopThread = nil  -- Store loop reference

--// Function to Create GUI
local function createGUI()
    -- Remove previous GUI if exists
    local playerGui = player:FindFirstChild("PlayerGui")
    if not playerGui then return end
    local oldGui = playerGui:FindFirstChild(guiName)
    if oldGui then 
        oldGui:SetAttribute("KeepRunning", false)  -- Stop function
        task.wait(0.1)
        oldGui:Destroy()
    end

    -- GUI Container
    local gui = Instance.new("ScreenGui")
    gui.Name = guiName
    gui.Parent = playerGui

    -- Main Frame
    local frame = Instance.new("Frame", gui)
    frame.Size = UDim2.new(0, 200, 0, 70)

    -- Restore Saved Position
    local savedPos = playerGui:GetAttribute("RemoveObjectGuiPosition")
    frame.Position = savedPos or UDim2.new(0.5, 0, 0.5, 0)  -- Default if no saved position
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

    -- Title Label
    local title = Instance.new("TextLabel", frame)
    title.Size = UDim2.new(1, 0, 0.3, 0)
    title.Text = "Remove Unwanted Objects"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.BackgroundTransparency = 1
    title.TextScaled = true

    -- Drag Handle (Top Bar)
    local dragBar = Instance.new("Frame", frame)
    dragBar.Size = UDim2.new(1, 0, 0.3, 0)
    dragBar.Position = UDim2.new(0, 0, 0.3, 0)
    dragBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)

    local dragText = Instance.new("TextLabel", dragBar)
    dragText.Size = UDim2.new(1, 0, 1, 0)
    dragText.Text = "Drag Here"
    dragText.TextColor3 = Color3.new(1, 1, 1)
    dragText.BackgroundTransparency = 1

    -- Toggle Button
    local button = Instance.new("TextButton", frame)
    button.Size = UDim2.new(1, 0, 0.4, 0)
    button.Position = UDim2.new(0, 0, 0.6, 0)
    button.TextColor3 = Color3.new(1, 1, 1)

    -- Restore Running State
    running = playerGui:GetAttribute("RemoveObjectRunning") or false
    button.Text = running and "Stop" or "Start"
    button.BackgroundColor3 = running and Color3.fromRGB(200, 50, 50) or Color3.fromRGB(50, 200, 50)

    -- Dragging System
    local dragging, dragStart, startPos
    local function onInputChanged(input)
        if dragging and (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            frame.Position = newPos
            playerGui:SetAttribute("RemoveObjectGuiPosition", newPos)  -- Save Position
        end
    end

    dragBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragBar.InputChanged:Connect(onInputChanged)
    UserInputService.InputChanged:Connect(onInputChanged)

    -- Function to Remove Objects
    local function removeObjects()
        while running do
            local mainMap = workspace:FindFirstChild("MainMapFolder")
            if mainMap then
                local mainArea = mainMap:FindFirstChild("MainArea")
                if mainArea then
                    local decoration = mainArea:FindFirstChild("Decoration")
                    if decoration then
                        for _, obj in pairs(decoration:GetChildren()) do
                            if obj.Name ~= "Rocks" then
                                obj:Destroy()
                            end
                        end
                    end

                    local interactables = mainArea:FindFirstChild("Interactables")
                    if interactables then
                        for _, obj in pairs(interactables:GetChildren()) do
                            if obj.Name ~= "Gong" then
                                obj:Destroy()
                            end
                        end
                    end
                end
            end
            task.wait(1)  -- Runs every second
        end
    end

    -- Toggle Button Click
    button.MouseButton1Click:Connect(function()
        running = not running
        playerGui:SetAttribute("RemoveObjectRunning", running)  -- Store state properly
        button.Text = running and "Stop" or "Start"
        button.BackgroundColor3 = running and Color3.fromRGB(200, 50, 50) or Color3.fromRGB(50, 200, 50)

        if running then
            if loopThread then  -- Stop old thread if it exists
                task.cancel(loopThread)
            end
            loopThread = task.spawn(removeObjects)
        else
            if loopThread then
                task.cancel(loopThread)  -- Stop function properly
                loopThread = nil
            end
        end
    end)

    -- Start function if running was true before respawn
    if running and not loopThread then
        loopThread = task.spawn(removeObjects)
    end
end

--// Create GUI on script start
createGUI()

--// Recreate GUI after respawn
player.CharacterAdded:Connect(function()
    task.wait(1)  -- Small delay to ensure PlayerGui loads
    createGUI()
end)
]]

-- Script 3
local script3 = [[
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Camera = workspace.CurrentCamera

-- Configuration
local settings = {
    maxDistance = 7,
    showHighlight = true,
    targetMode = "Nearest",
    weaponOutEnabled = false,
    weaponOutDistance = 10,
    weaponV2Enabled = false,
    guiLocked = false,
    checkSpeed = 0.1,
    extremeFast = false,
    doBlockAnimation = false,
    alwaysWhileEquipped = false,
    animStopDelay = 0.6,
    animStopMethod = "Both", -- "Stunned", "Parry", "Both"
    rspyEnabled = false,
    rspyUpdateDelay = 12
}

local HIGHLIGHT_COLOR = Color3.fromRGB(255, 255, 255)
local HIGHLIGHT_FILL_TRANSPARENCY = 0.9
local HIGHLIGHT_OUTLINE_TRANSPARENCY = 0
local CROSSHAIR_OFFSET = Vector2.new(0, -30)

-- RSpy System Variables
local currentRemotePath = "k\239\188\151l\239\188\148ZO\227\129\158wat\227\129\155\227\129\134\227\129\160"
local spiedRemotePath = nil
local originalNamecall = nil
local configFolder = "TargetTrackerConfig"
local configFile = "remote_config.txt"

-- Animation System Variables
local cachedAnimation = nil
local cachedAnimationId = nil
local lastAnimationUpdate = 0
local currentAnimationTrack = nil
local animationStartTime = 0

-- File system functions
local function saveRemoteToConfig(remotePath)
    if not isfolder then return end
    if not writefile then return end
    
    if not isfolder(configFolder) then
        makefolder(configFolder)
    end
    
    writefile(configFolder .. "/" .. configFile, remotePath)
end

local function loadRemoteFromConfig()
    if not isfile then return nil end
    if not readfile then return nil end
    
    if isfile(configFolder .. "/" .. configFile) then
        return readfile(configFolder .. "/" .. configFile)
    end
    
    return nil
end

-- RSpy System
local function setupRSpy()
    if originalNamecall then return end
    
    local hookfunction = hookfunction
    local getnamecallmethod = getnamecallmethod
    
    if not hookfunction or not getnamecallmethod then
        warn("Executor doesn't support required functions - RSpy disabled")
        return
    end
    
    originalNamecall = hookfunction(getrawmetatable(game).__namecall, function(...)
        local method = getnamecallmethod()
        local self = ...
        local args = {...}
        
        if method == "FireServer" and typeof(self) == "Instance" then
            -- Check if this matches our attack pattern
            if #args >= 4 then
                local arg1 = args[2]
                local arg2 = args[3]
                local arg3 = args[4]
                
                -- Pattern: String, Tool/Part, Part/Tool, CFrame
                if typeof(arg1) == "string" and 
                   (typeof(arg2) == "Instance") and 
                   (typeof(arg3) == "Instance") and
                   (arg1:find("HIT") or arg1:find("WOAH") or arg1:find("BLOCK")) then
                    
                    -- Found potential remote
                    local remoteName = self.Name
                    if remoteName ~= spiedRemotePath then
                        spiedRemotePath = remoteName
                        currentRemotePath = remoteName
                        saveRemoteToConfig(remoteName)
                        print("[RSpy] New remote detected:", remoteName)
                    end
                end
            end
        end
        
        return originalNamecall(...)
    end)
end

local function destroyRSpy()
    if originalNamecall then
        hookfunction(getrawmetatable(game).__namecall, originalNamecall)
        originalNamecall = nil
    end
end

-- Initialize remote from config
local function initializeRemote()
    local savedRemote = loadRemoteFromConfig()
    if savedRemote and savedRemote ~= "" then
        currentRemotePath = savedRemote
        print("[Config] Loaded remote:", savedRemote)
    end
end

-- Animation System
local function findBlockAnimation()
    local tool = nil
    
    -- Check character first
    if LocalPlayer.Character then
        tool = LocalPlayer.Character:FindFirstChild("<TN~!1>")
    end
    
    -- Check backpack if not in character
    if not tool and LocalPlayer:FindFirstChild("Backpack") then
        tool = LocalPlayer.Backpack:FindFirstChild("<TN~!1>")
    end
    
    if tool then
        local blockValue = tool:FindFirstChild("Block")
        if blockValue and blockValue:IsA("StringValue") then
            return blockValue.Value
        end
    end
    
    return nil
end

local function updateCachedAnimation()
    local animId = findBlockAnimation()
    
    if animId and animId ~= cachedAnimationId then
        cachedAnimationId = animId
        
        -- Create animation object
        local anim = Instance.new("Animation")
        anim.AnimationId = animId
        cachedAnimation = anim
        
        print("[Animation] Cached new animation:", animId)
    end
end

local function playBlockAnimation()
    if not settings.doBlockAnimation then return end
    if not LocalPlayer.Character then return end
    
    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    -- Check if weapon is equipped
    local weaponEquipped = LocalPlayer.Character:FindFirstChild("<TN~!1>")
    if not weaponEquipped then return end
    
    -- If already playing and "always while equipped" is off, don't restart
    if currentAnimationTrack and currentAnimationTrack.IsPlaying and not settings.alwaysWhileEquipped then
        return
    end
    
    if cachedAnimation then
        -- Stop previous animation
        if currentAnimationTrack then
            currentAnimationTrack:Stop()
        end
        
        -- Load and play new animation
        currentAnimationTrack = humanoid:LoadAnimation(cachedAnimation)
        currentAnimationTrack:Play()
        animationStartTime = tick()
    end
end

local function stopBlockAnimation()
    if currentAnimationTrack and currentAnimationTrack.IsPlaying then
        currentAnimationTrack:Stop()
        currentAnimationTrack = nil
    end
end

local function checkAnimationStopConditions(target)
    if not currentAnimationTrack or not currentAnimationTrack.IsPlaying then
        return
    end
    
    local shouldStop = false
    local currentTime = tick()
    
    -- Check time-based stop
    if currentTime - animationStartTime >= settings.animStopDelay then
        shouldStop = true
    end
    
    -- Check target conditions
    if target and target.Character then
        local targetTool = target.Character:FindFirstChildOfClass("Tool")
        
        if targetTool then
            if settings.animStopMethod == "Stunned" or settings.animStopMethod == "Both" then
                local stunnedAttr = targetTool:GetAttribute("Stunned")
                if stunnedAttr == true then
                    shouldStop = true
                end
            end
            
            if settings.animStopMethod == "Parry" or settings.animStopMethod == "Both" then
                local parryAttr = targetTool:GetAttribute("Parry")
                if parryAttr == false then
                    shouldStop = true
                end
            end
        end
    end
    
    if shouldStop then
        stopBlockAnimation()
    end
end

-- Create ScreenGui
local function createGui()
    local gui = Instance.new("ScreenGui")
    gui.Name = "TargetTrackerGui"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main frame
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 200, 0, 50)
    frame.Position = UDim2.new(0.5, -100, 0.1, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0.5
    frame.BorderSizePixel = 0
    frame.Parent = gui
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0, 8)
    frameCorner.Parent = frame
    
    -- Lock Toggle
    local lockToggle = Instance.new("TextButton")
    lockToggle.Name = "LockToggle"
    lockToggle.Size = UDim2.new(0, 12, 0, 12)
    lockToggle.Position = UDim2.new(1, -35, 0, 5)
    lockToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    lockToggle.BackgroundTransparency = 0.5
    lockToggle.BorderSizePixel = 0
    lockToggle.Text = ""
    lockToggle.Parent = frame
    
    local lockCorner = Instance.new("UICorner")
    lockCorner.CornerRadius = UDim.new(1, 0)
    lockCorner.Parent = lockToggle
    
    -- Settings Toggle
    local settingsToggle = Instance.new("TextButton")
    settingsToggle.Name = "SettingsToggle"
    settingsToggle.Size = UDim2.new(0, 18, 0, 18)
    settingsToggle.Position = UDim2.new(1, -18, 0, 2)
    settingsToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    settingsToggle.BackgroundTransparency = 0.5
    settingsToggle.BorderSizePixel = 0
    settingsToggle.Text = "⚙️"
    settingsToggle.TextSize = 12
    settingsToggle.Parent = frame
    
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 4)
    settingsCorner.Parent = settingsToggle
    
    -- Button
    local button = Instance.new("TextButton")
    button.Name = "AttackButton"
    button.Size = UDim2.new(1, -20, 0, 30)
    button.Position = UDim2.new(0, 10, 0.5, -15)
    button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    button.BackgroundTransparency = 0.5
    button.BorderSizePixel = 1
    button.BorderColor3 = Color3.fromRGB(80, 80, 80)
    button.Text = "No Target"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 14
    button.Parent = frame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = button
    
    -- Settings Panel
    local settingsPanel = Instance.new("Frame")
    settingsPanel.Name = "SettingsPanel"
    settingsPanel.Size = UDim2.new(0, 280, 0, 400)
    settingsPanel.Position = UDim2.new(0.5, -140, 0.3, 0)
    settingsPanel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    settingsPanel.BackgroundTransparency = 0.3
    settingsPanel.BorderSizePixel = 2
    settingsPanel.BorderColor3 = Color3.fromRGB(60, 60, 60)
    settingsPanel.Visible = false
    settingsPanel.Parent = gui
    
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0, 8)
    panelCorner.Parent = settingsPanel
    
    -- Panel Title
    local panelTitle = Instance.new("TextLabel")
    panelTitle.Size = UDim2.new(1, 0, 0, 30)
    panelTitle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    panelTitle.BackgroundTransparency = 0.3
    panelTitle.Text = "Settings"
    panelTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    panelTitle.Font = Enum.Font.GothamBold
    panelTitle.TextSize = 16
    panelTitle.Parent = settingsPanel
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = panelTitle
    
    -- Scrolling Frame
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -40)
    scrollFrame.Position = UDim2.new(0, 5, 0, 35)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 6
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 750)
    scrollFrame.Parent = settingsPanel
    
    local function createLabel(text, yPos)
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -10, 0, 20)
        label.Position = UDim2.new(0, 5, 0, yPos)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Font = Enum.Font.Gotham
        label.TextSize = 12
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = scrollFrame
        return label
    end
    
    local function createToggle(name, yPos, defaultValue)
        local toggle = Instance.new("TextButton")
        toggle.Name = name
        toggle.Size = UDim2.new(0, 40, 0, 20)
        toggle.Position = UDim2.new(1, -45, 0, yPos)
        toggle.BackgroundColor3 = defaultValue and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
        toggle.BorderSizePixel = 0
        toggle.Text = defaultValue and "ON" or "OFF"
        toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggle.Font = Enum.Font.GothamBold
        toggle.TextSize = 11
        toggle.Parent = scrollFrame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 4)
        toggleCorner.Parent = toggle
        
        return toggle
    end
    
    local function createTextBox(name, yPos, defaultValue)
        local textBox = Instance.new("TextBox")
        textBox.Name = name
        textBox.Size = UDim2.new(0, 60, 0, 22)
        textBox.Position = UDim2.new(1, -65, 0, yPos)
        textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        textBox.BackgroundTransparency = 0.3
        textBox.BorderSizePixel = 1
        textBox.BorderColor3 = Color3.fromRGB(80, 80, 80)
        textBox.Text = tostring(defaultValue)
        textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
        textBox.Font = Enum.Font.Gotham
        textBox.TextSize = 12
        textBox.Parent = scrollFrame
        
        local boxCorner = Instance.new("UICorner")
        boxCorner.CornerRadius = UDim.new(0, 4)
        boxCorner.Parent = textBox
        
        return textBox
    end
    
    local function createModeButton(name, yPos, text)
        local modeBtn = Instance.new("TextButton")
        modeBtn.Name = name
        modeBtn.Size = UDim2.new(0, 90, 0, 22)
        modeBtn.Position = UDim2.new(1, -95, 0, yPos)
        modeBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        modeBtn.BackgroundTransparency = 0.3
        modeBtn.BorderSizePixel = 1
        modeBtn.BorderColor3 = Color3.fromRGB(80, 80, 80)
        modeBtn.Text = text
        modeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        modeBtn.Font = Enum.Font.GothamBold
        modeBtn.TextSize = 11
        modeBtn.Parent = scrollFrame
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 4)
        btnCorner.Parent = modeBtn
        
        return modeBtn
    end
    
    local function createSeparator(yPos)
        local sep = Instance.new("Frame")
        sep.Size = UDim2.new(1, -10, 0, 2)
        sep.Position = UDim2.new(0, 5, 0, yPos)
        sep.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        sep.BorderSizePixel = 0
        sep.Parent = scrollFrame
        return sep
    end
    
    -- Create settings elements
    local yOffset = 10
    
    createLabel("Check Speed (seconds):", yOffset)
    local checkSpeedInput = createTextBox("CheckSpeedInput", yOffset, settings.checkSpeed)
    yOffset = yOffset + 30
    
    createLabel("Extreme Fast Mode:", yOffset)
    local extremeFastToggle = createToggle("ExtremeFastToggle", yOffset, settings.extremeFast)
    yOffset = yOffset + 30
    
    createLabel("Max Distance (Studs):", yOffset)
    local studsInput = createTextBox("StudsInput", yOffset, settings.maxDistance)
    yOffset = yOffset + 30
    
    createLabel("Show Highlight:", yOffset)
    local highlightToggle = createToggle("HighlightToggle", yOffset, settings.showHighlight)
    yOffset = yOffset + 30
    
    createLabel("Target Mode:", yOffset)
    local modeButton = createModeButton("ModeButton", yOffset, settings.targetMode)
    yOffset = yOffset + 35
    
    createSeparator(yOffset)
    yOffset = yOffset + 15
    
    createLabel("Weapon Out if Enemy:", yOffset)
    local weaponToggle = createToggle("WeaponToggle", yOffset, settings.weaponOutEnabled)
    yOffset = yOffset + 30
    
    createLabel("Weapon Distance (Studs):", yOffset)
    local weaponDistInput = createTextBox("WeaponDistInput", yOffset, settings.weaponOutDistance)
    yOffset = yOffset + 30
    
    createLabel("Weapon V2 (Parry):", yOffset)
    local weaponV2Toggle = createToggle("WeaponV2Toggle", yOffset, settings.weaponV2Enabled)
    yOffset = yOffset + 35
    
    createSeparator(yOffset)
    yOffset = yOffset + 15
    
    createLabel("Do Block Animation:", yOffset)
    local blockAnimToggle = createToggle("BlockAnimToggle", yOffset, settings.doBlockAnimation)
    yOffset = yOffset + 30
    
    createLabel("Always While Equipped:", yOffset)
    local alwaysEquippedToggle = createToggle("AlwaysEquippedToggle", yOffset, settings.alwaysWhileEquipped)
    yOffset = yOffset + 30
    
    createLabel("Anim Stop Delay (sec):", yOffset)
    local animStopInput = createTextBox("AnimStopInput", yOffset, settings.animStopDelay)
    yOffset = yOffset + 30
    
    createLabel("Anim Stop Method:", yOffset)
    local animStopMethodBtn = createModeButton("AnimStopMethodBtn", yOffset, settings.animStopMethod)
    yOffset = yOffset + 35
    
    createSeparator(yOffset)
    yOffset = yOffset + 15
    
    createLabel("RSpy Method:", yOffset)
    local rspyToggle = createToggle("RSpyToggle", yOffset, settings.rspyEnabled)
    yOffset = yOffset + 30
    
    createLabel("RSpy Update Delay (sec):", yOffset)
    local rspyDelayInput = createTextBox("RSpyDelayInput", yOffset, settings.rspyUpdateDelay)
    yOffset = yOffset + 30
    
    return gui, frame, button, lockToggle, settingsToggle, settingsPanel,
           checkSpeedInput, extremeFastToggle, studsInput, highlightToggle, modeButton,
           weaponToggle, weaponDistInput, weaponV2Toggle,
           blockAnimToggle, alwaysEquippedToggle, animStopInput, animStopMethodBtn,
           rspyToggle, rspyDelayInput
end

-- Make frame draggable
local function makeDraggable(frame, button, lockToggle, settingsToggle)
    local dragging = false
    local dragInput, dragStart, startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    frame.InputBegan:Connect(function(input)
        if settings.guiLocked then return end
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            local mousePos = input.Position
            
            local buttonAbsPos = button.AbsolutePosition
            local buttonAbsSize = button.AbsoluteSize
            if mousePos.X >= buttonAbsPos.X and mousePos.X <= buttonAbsPos.X + buttonAbsSize.X and
               mousePos.Y >= buttonAbsPos.Y and mousePos.Y <= buttonAbsPos.Y + buttonAbsSize.Y then
                return
            end
            
            local lockAbsPos = lockToggle.AbsolutePosition
            local lockAbsSize = lockToggle.AbsoluteSize
            if mousePos.X >= lockAbsPos.X and mousePos.X <= lockAbsPos.X + lockAbsSize.X and
               mousePos.Y >= lockAbsPos.Y and mousePos.Y <= lockAbsPos.Y + lockAbsSize.Y then
                return
            end
            
            local settingsAbsPos = settingsToggle.AbsolutePosition
            local settingsAbsSize = settingsToggle.AbsoluteSize
            if mousePos.X >= settingsAbsPos.X and mousePos.X <= settingsAbsPos.X + settingsAbsSize.X and
               mousePos.Y >= settingsAbsPos.Y and mousePos.Y <= settingsAbsPos.Y + settingsAbsSize.Y then
                return
            end
            
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging and not settings.guiLocked then
            updateInput(input)
        end
    end)
end

-- Make settings panel draggable
local function makeSettingsDraggable(panel)
    local dragging = false
    local dragInput, dragStart, startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        panel.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    local title = panel:FindFirstChild("TextLabel")
    if title then
        title.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = panel.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        
        title.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                updateInput(input)
            end
        end)
    end
end

-- Create highlight
local function createHighlight(character)
    if not settings.showHighlight then return nil end
    
    local existingHighlight = character:FindFirstChild("TargetHighlight")
    if existingHighlight then
        existingHighlight:Destroy()
    end
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "TargetHighlight"
    highlight.FillColor = HIGHLIGHT_COLOR
    highlight.OutlineColor = HIGHLIGHT_COLOR
    highlight.FillTransparency = HIGHLIGHT_FILL_TRANSPARENCY
    highlight.OutlineTransparency = HIGHLIGHT_OUTLINE_TRANSPARENCY
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = character
    return highlight
end

-- Check if player character
local function isPlayerCharacter(instance)
    if LocalPlayer.Character and (instance == LocalPlayer.Character) then
        return false, nil
    end
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and instance == player.Character then
            local humanoid = instance:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                return true, player
            end
        end
    end
    
    local specialTypes = {"Lamp", "Skeleton Peasant", "Skeleton Gravedigger", "Skeleton Farmhand"}
    
    for _, typeName in ipairs(specialTypes) do
        if instance.Name == typeName and instance:FindFirstChild("Humanoid") then
            local humanoid = instance:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 and instance:FindFirstChild("HumanoidRootPart") and instance:FindFirstChild("Head") then
                if instance == LocalPlayer.Character then
                    return false, nil
                end
                
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character == instance then
                        return true, player
                    end
                end
                
                return true, {
                    Name = findPlayerNameForDisguise(instance),
                    Character = instance
                }
            end
        end
    end
    
    return false, nil
end

function findPlayerNameForDisguise(character)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character == character then
            return player.Name
        end
    end
    
    for _, child in pairs(character:GetChildren()) do
        if child:IsA("StringValue") and (child.Name == "PlayerName" or child.Name:find("Player")) then
            return child.Value
        end
    end
    
    local playerProperty = character:FindFirstChild("Player")
    if playerProperty and playerProperty:IsA("ObjectValue") and playerProperty.Value then
        return playerProperty.Value.Name
    end
    
    return character.Name
end

-- Find nearest target
local function findNearestTarget()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    local localRootPart = LocalPlayer.Character.HumanoidRootPart
    local localPosition = localRootPart.Position
    
    local nearestDistance = settings.maxDistance
    local nearestPlayer = nil
    
    if settings.targetMode == "Nearest" then
        for _, instance in pairs(workspace:GetChildren()) do
            local isPlayer, player = isPlayerCharacter(instance)
            
            if isPlayer and player.Character then
                local character = player.Character
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                local humanoid = character:FindFirstChild("Humanoid")
                
                if humanoidRootPart and humanoid and humanoid.Health > 0 then
                    local distance = (localPosition - humanoidRootPart.Position).Magnitude
                    
                    if distance <= settings.maxDistance and distance < nearestDistance then
                        nearestDistance = distance
                        nearestPlayer = player
                    end
                end
            end
        end
    elseif settings.targetMode == "Crosshair" then
        local screenSize = Camera.ViewportSize
        local crosshairPos = Vector2.new(screenSize.X / 2, screenSize.Y / 2) + CROSSHAIR_OFFSET
        
        local nearestScreenDistance = math.huge
        
        for _, instance in pairs(workspace:GetChildren()) do
            local isPlayer, player = isPlayerCharacter(instance)
            
            if isPlayer and player.Character then
                local character = player.Character
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                local humanoid = character:FindFirstChild("Humanoid")
                
                if humanoidRootPart and humanoid and humanoid.Health > 0 then
                    local distance = (localPosition - humanoidRootPart.Position).Magnitude
                    
                    if distance <= settings.maxDistance then
                        local screenPos, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)
                        
                        if onScreen then
                            local screenDistance = (Vector2.new(screenPos.X, screenPos.Y) - crosshairPos).Magnitude
                            
                            if screenDistance < nearestScreenDistance then
                                nearestScreenDistance = screenDistance
                                nearestPlayer = player
                            end
                        end
                    end
                end
            end
        end
    end
    
    return nearestPlayer
end

-- Fire remote
local function fireTargetRemote(target)
    local remoteEvent = ReplicatedStorage:FindFirstChild(currentRemotePath)
    
    if not remoteEvent then
        remoteEvent = ReplicatedStorage:WaitForChild(currentRemotePath, 5)
    end
    
    if remoteEvent and target and target.Character then
        local targetCharacter = target.Character
        local targetHumanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
        local targetLimb = targetCharacter:FindFirstChild("Head") or targetHumanoidRootPart
        
        local tn1 = LocalPlayer.Character:FindFirstChild("<TN~!1>")
        
        if targetLimb and tn1 then
            local args = {
                [1] = "WOAH YOU HIT SOMEONE!",
                [2] = tn1,
                [3] = targetLimb,
                [4] = CFrame.new(2876.855712890625, 223.56227111816406, -3851.861572265625) * CFrame.Angles(-1.1096420848843991e-07, -0.631172776222229, -7.459367878936973e-08)
            }
            
            remoteEvent:FireServer(unpack(args))
        end
    end
end

-- Weapon system
local lastWeaponCheck = 0

local function equipWeapon()
    if not LocalPlayer.Character then return end
    
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return end
    
    local tool = backpack:FindFirstChildOfClass("Tool")
    if tool then
        local equippedTool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
        if not equippedTool then
            tool.Parent = LocalPlayer.Character
        end
    end
end

local function checkWeaponSystem()
    if not settings.weaponOutEnabled then return false end
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return false end
    
    local localPos = LocalPlayer.Character.HumanoidRootPart.Position
    local shouldEquip = false
    
    for _, instance in pairs(workspace:GetChildren()) do
        local isPlayer, player = isPlayerCharacter(instance)
        
        if isPlayer and player.Character then
            local character = player.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            
            if humanoidRootPart then
                local distance = (localPos - humanoidRootPart.Position).Magnitude
                
                if distance <= settings.weaponOutDistance then
                    local tool = character:FindFirstChildOfClass("Tool")
                    
                    if tool then
                        if settings.weaponV2Enabled then
                            local parryAttr = tool:GetAttribute("Parry")
                            if parryAttr == true then
                                shouldEquip = true
                                break
                            end
                        else
                            shouldEquip = true
                            break
                        end
                    end
                end
            end
        end
    end
    
    return shouldEquip
end

-- Main
local function main()
    initializeRemote()
    
    local gui, frame, button, lockToggle, settingsToggle, settingsPanel,
          checkSpeedInput, extremeFastToggle, studsInput, highlightToggle, modeButton,
          weaponToggle, weaponDistInput, weaponV2Toggle,
          blockAnimToggle, alwaysEquippedToggle, animStopInput, animStopMethodBtn,
          rspyToggle, rspyDelayInput = createGui()
    
    makeDraggable(frame, button, lockToggle, settingsToggle)
    makeSettingsDraggable(settingsPanel)
    gui.Parent = PlayerGui
    
    local currentTarget = nil
    local currentHighlight = nil
    
    -- Lock toggle
    lockToggle.MouseButton1Click:Connect(function()
        settings.guiLocked = not settings.guiLocked
        lockToggle.BackgroundColor3 = settings.guiLocked and Color3.fromRGB(100, 30, 30) or Color3.fromRGB(30, 30, 30)
    end)
    
    -- Settings toggle
    settingsToggle.MouseButton1Click:Connect(function()
        settingsPanel.Visible = not settingsPanel.Visible
    end)
    
    -- Check speed input
    checkSpeedInput.FocusLost:Connect(function()
        local value = tonumber(checkSpeedInput.Text)
        if value and value > 0 then
            settings.checkSpeed = value
        else
            checkSpeedInput.Text = tostring(settings.checkSpeed)
        end
    end)
    
    -- Extreme fast toggle
    extremeFastToggle.MouseButton1Click:Connect(function()
        settings.extremeFast = not settings.extremeFast
        extremeFastToggle.Text = settings.extremeFast and "ON" or "OFF"
        extremeFastToggle.BackgroundColor3 = settings.extremeFast and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
    end)
    
    -- Studs input
    studsInput.FocusLost:Connect(function()
        local value = tonumber(studsInput.Text)
        if value and value > 0 then
            settings.maxDistance = value
        else
            studsInput.Text = tostring(settings.maxDistance)
        end
    end)
    
    -- Highlight toggle
    highlightToggle.MouseButton1Click:Connect(function()
        settings.showHighlight = not settings.showHighlight
        highlightToggle.Text = settings.showHighlight and "ON" or "OFF"
        highlightToggle.BackgroundColor3 = settings.showHighlight and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
        
        if not settings.showHighlight and currentHighlight then
            currentHighlight:Destroy()
            currentHighlight = nil
        end
    end)
    
    -- Mode button
    modeButton.MouseButton1Click:Connect(function()
        settings.targetMode = settings.targetMode == "Nearest" and "Crosshair" or "Nearest"
        modeButton.Text = settings.targetMode
    end)
    
    -- Weapon toggle
    weaponToggle.MouseButton1Click:Connect(function()
        settings.weaponOutEnabled = not settings.weaponOutEnabled
        weaponToggle.Text = settings.weaponOutEnabled and "ON" or "OFF"
        weaponToggle.BackgroundColor3 = settings.weaponOutEnabled and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
    end)
    
    -- Weapon distance input
    weaponDistInput.FocusLost:Connect(function()
        local value = tonumber(weaponDistInput.Text)
        if value and value > 0 then
            settings.weaponOutDistance = value
        else
            weaponDistInput.Text = tostring(settings.weaponOutDistance)
        end
    end)
    
    -- Weapon V2 toggle
    weaponV2Toggle.MouseButton1Click:Connect(function()
        settings.weaponV2Enabled = not settings.weaponV2Enabled
        weaponV2Toggle.Text = settings.weaponV2Enabled and "ON" or "OFF"
        weaponV2Toggle.BackgroundColor3 = settings.weaponV2Enabled and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
    end)
    
    -- Block animation toggle
    blockAnimToggle.MouseButton1Click:Connect(function()
        settings.doBlockAnimation = not settings.doBlockAnimation
        blockAnimToggle.Text = settings.doBlockAnimation and "ON" or "OFF"
        blockAnimToggle.BackgroundColor3 = settings.doBlockAnimation and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
        
        if not settings.doBlockAnimation then
            stopBlockAnimation()
        end
    end)
    
    -- Always equipped toggle
    alwaysEquippedToggle.MouseButton1Click:Connect(function()
        settings.alwaysWhileEquipped = not settings.alwaysWhileEquipped
        alwaysEquippedToggle.Text = settings.alwaysWhileEquipped and "ON" or "OFF"
        alwaysEquippedToggle.BackgroundColor3 = settings.alwaysWhileEquipped and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
    end)
    
    -- Anim stop delay input
    animStopInput.FocusLost:Connect(function()
        local value = tonumber(animStopInput.Text)
        if value and value > 0 then
            settings.animStopDelay = value
        else
            animStopInput.Text = tostring(settings.animStopDelay)
        end
    end)
    
    -- Anim stop method button
    animStopMethodBtn.MouseButton1Click:Connect(function()
        if settings.animStopMethod == "Stunned" then
            settings.animStopMethod = "Parry"
        elseif settings.animStopMethod == "Parry" then
            settings.animStopMethod = "Both"
        else
            settings.animStopMethod = "Stunned"
        end
        animStopMethodBtn.Text = settings.animStopMethod
    end)
    
    -- RSpy toggle
    rspyToggle.MouseButton1Click:Connect(function()
        settings.rspyEnabled = not settings.rspyEnabled
        rspyToggle.Text = settings.rspyEnabled and "ON" or "OFF"
        rspyToggle.BackgroundColor3 = settings.rspyEnabled and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
        
        if settings.rspyEnabled then
            setupRSpy()
        else
            destroyRSpy()
        end
    end)
    
    -- RSpy delay input
    rspyDelayInput.FocusLost:Connect(function()
        local value = tonumber(rspyDelayInput.Text)
        if value and value > 0 then
            settings.rspyUpdateDelay = value
        else
            rspyDelayInput.Text = tostring(settings.rspyUpdateDelay)
        end
    end)
    
    -- Update target
    local function updateTarget()
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            return
        end
        
        local nearestTarget = findNearestTarget()
        
        if currentTarget and currentTarget.Character then
            local humanoid = currentTarget.Character:FindFirstChild("Humanoid")
            if not humanoid or humanoid.Health <= 0 then
                if currentHighlight then
                    currentHighlight:Destroy()
                    currentHighlight = nil
                end
                currentTarget = nil
            end
        end
        
        if currentTarget ~= nearestTarget then
            if currentHighlight then
                currentHighlight:Destroy()
                currentHighlight = nil
            end
        end
        
        currentTarget = nearestTarget
        
        if currentTarget then
            local displayName = currentTarget.Name
            
            if typeof(currentTarget) == "Instance" and currentTarget:IsA("Player") then
                displayName = currentTarget.Name
            elseif currentTarget.Character then
                for _, player in pairs(Players:GetPlayers()) do
                    if player.Character == currentTarget.Character then
                        displayName = player.Name
                        break
                    end
                end
            end
            
            button.Text = displayName
            
            if settings.showHighlight and currentTarget.Character then
                local existingHighlight = currentTarget.Character:FindFirstChild("TargetHighlight")
                if not existingHighlight then
                    currentHighlight = createHighlight(currentTarget.Character)
                else
                    currentHighlight = existingHighlight
                end
            end
        else
            button.Text = "No Target"
            
            if currentHighlight then
                currentHighlight:Destroy()
                currentHighlight = nil
            end
        end
    end
    
    -- Button click
    button.MouseButton1Click:Connect(function()
        if currentTarget then
            fireTargetRemote(currentTarget)
            
            -- Play block animation if enabled
            if settings.doBlockAnimation then
                playBlockAnimation()
            end
        end
    end)
    
    -- Main update loop
    local lastCheck = 0
    local lastAnimUpdate = 0
    
    RunService.Heartbeat:Connect(function()
        local currentTime = tick()
        
        -- Update animation cache every 2 seconds
        if currentTime - lastAnimUpdate >= 2 then
            updateCachedAnimation()
            lastAnimUpdate = currentTime
        end
        
        -- Check animation stop conditions
        if settings.doBlockAnimation and currentAnimationTrack and currentAnimationTrack.IsPlaying then
            checkAnimationStopConditions(currentTarget)
        end
        
        -- Main checks based on speed settings
        local checkInterval = settings.extremeFast and 0.01 or settings.checkSpeed
        
        if currentTime - lastCheck >= checkInterval then
            if not settings.extremeFast then
                updateTarget()
            else
                -- Extreme fast mode - skip some checks
                local nearestTarget = findNearestTarget()
                if nearestTarget ~= currentTarget then
                    if currentHighlight then
                        currentHighlight:Destroy()
                        currentHighlight = nil
                    end
                    currentTarget = nearestTarget
                end
                
                if currentTarget then
                    button.Text = currentTarget.Name
                else
                    button.Text = "No Target"
                end
            end
            
            -- Weapon system
            if settings.weaponOutEnabled then
                local shouldEquip = checkWeaponSystem()
                if shouldEquip then
                    equipWeapon()
                end
            end
            
            lastCheck = currentTime
        end
    end)
    
    -- Handle respawn
    LocalPlayer.CharacterAdded:Connect(function()
        if currentHighlight then
            currentHighlight:Destroy()
            currentHighlight = nil
        end
        
        currentTarget = nil
        stopBlockAnimation()
        
        LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    end)
    
    -- Clean up
    Players.PlayerRemoving:Connect(function(player)
        if currentTarget == player then
            if currentHighlight then
                currentHighlight:Destroy()
                currentHighlight = nil
            end
            currentTarget = nil
        end
    end)
end

main()
]]

local script4 = [[
-- Get required services
local player = game:GetService("Players").LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Create GUI
local mainGui = Instance.new("ScreenGui")
mainGui.Name = "TeleportControlGui"
mainGui.ResetOnSpawn = false
mainGui.Parent = playerGui

-- Create the frame (holds the button + drag bar)
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 100, 0, 50)
mainFrame.Position = UDim2.new(0.1, 0, 0.5, 0)
mainFrame.BackgroundTransparency = 0.5
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.Active = true
mainFrame.Parent = mainGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0.2, 0)
corner.Parent = mainFrame

-- Create drag bar with visual enhancements
local dragBar = Instance.new("Frame")
dragBar.Name = "DragBar"
dragBar.Size = UDim2.new(1, 0, 0.3, 0)
dragBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
dragBar.Parent = mainFrame

-- Add drag indicator dots
for i = 1, 3 do
    local dot = Instance.new("Frame")
    dot.Size = UDim2.new(0, 4, 0, 4)
    dot.Position = UDim2.new((i * 0.25) - 0.1, 0, 0.5, -2)
    dot.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    dot.Parent = dragBar
    
    local dotCorner = Instance.new("UICorner")
    dotCorner.CornerRadius = UDim.new(1, 0)
    dotCorner.Parent = dot
end

local dragCorner = Instance.new("UICorner")
dragCorner.CornerRadius = UDim.new(0.2, 0)
dragCorner.Parent = dragBar

-- Create teleport button
local teleportButton = Instance.new("TextButton")
teleportButton.Size = UDim2.new(1, 0, 0.7, 0)
teleportButton.Position = UDim2.new(0, 0, 0.3, 0)
teleportButton.BackgroundColor3 = Color3.fromRGB(255, 128, 0)
teleportButton.Text = "TP"
teleportButton.TextColor3 = Color3.new(1, 1, 1)
teleportButton.Font = Enum.Font.GothamBold
teleportButton.TextSize = 18
teleportButton.Parent = mainFrame

local buttonCorner = Instance.new("UICorner")
buttonCorner.CornerRadius = UDim.new(0.2, 0)
buttonCorner.Parent = teleportButton

-- Enhanced Mobile + PC Drag System
local dragging, dragStart, startPos

local function startDrag(input)
    dragging = true
    dragStart = input.Position
    startPos = mainFrame.Position
    
    -- Add visual feedback
    TweenService:Create(dragBar, TweenInfo.new(0.1), {
        BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    }):Play()
    
    input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
            dragging = false
            -- Reset visual feedback
            TweenService:Create(dragBar, TweenInfo.new(0.1), {
                BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            }):Play()
        end
    end)
end

local function updateDrag(input)
    if dragging then
        local delta = input.Position - dragStart
        local newPosition = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
        mainFrame.Position = newPosition
    end
end

dragBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        startDrag(input)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or
       input.UserInputType == Enum.UserInputType.Touch then
        updateDrag(input)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or
       input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Create notification label
local notifLabel = Instance.new("TextLabel")
notifLabel.Size = UDim2.new(0, 200, 0, 30)
notifLabel.Position = UDim2.new(0.5, -100, 0.8, 0)
notifLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
notifLabel.BackgroundTransparency = 0.5
notifLabel.TextColor3 = Color3.new(1, 1, 1)
notifLabel.Text = ""
notifLabel.Font = Enum.Font.Gotham
notifLabel.TextSize = 14
notifLabel.Visible = false
notifLabel.Parent = mainGui

local notifCorner = Instance.new("UICorner")
notifCorner.CornerRadius = UDim.new(0.2, 0)
notifCorner.Parent = notifLabel

-- Add notification shadow
local notifShadow = Instance.new("Frame")
notifShadow.Size = UDim2.new(1, 4, 1, 4)
notifShadow.Position = UDim2.new(0, -2, 0, -2)
notifShadow.BackgroundColor3 = Color3.new(0, 0, 0)
notifShadow.BackgroundTransparency = 0.8
notifShadow.ZIndex = notifLabel.ZIndex - 1
notifShadow.Parent = notifLabel

local shadowCorner = Instance.new("UICorner")
shadowCorner.CornerRadius = UDim.new(0.2, 0)
shadowCorner.Parent = notifShadow

local function showNotification(text, duration)
    notifLabel.Text = text
    notifLabel.Visible = true
    notifLabel.BackgroundTransparency = 1
    notifLabel.TextTransparency = 1
    
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    TweenService:Create(notifLabel, tweenInfo, {
        BackgroundTransparency = 0.5,
        TextTransparency = 0
    }):Play()
    
    task.delay(duration or 2, function()
        local fadeOut = TweenService:Create(notifLabel, tweenInfo, {
            BackgroundTransparency = 1,
            TextTransparency = 1
        })
        fadeOut:Play()
        fadeOut.Completed:Wait()
        notifLabel.Visible = false
    end)
end

-- Toggle and Teleport System
local isProcessing = false
local isToggled = false
local isSafezoneMonitoring = false

-- Update button appearance based on toggle state
local function updateButtonAppearance()
    teleportButton.BackgroundColor3 = isToggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 128, 0)
    teleportButton.Text = isToggled and "ON" or "TP"
end

-- Safezone monitoring function
local function monitorSafezone(lastPosition)
    while isToggled and isSafezoneMonitoring do
        if player:FindFirstChild("IsInSafezone") then
            if not player.IsInSafezone.Value then
                showNotification("Left safezone, retrying teleport...", 1)
                isSafezoneMonitoring = false
                teleportLoop()
                break
            end
        end
        task.wait(0.2)
    end
end

-- Main teleport function
local function teleportLoop()
    if isProcessing then return end
    isProcessing = true
    isSafezoneMonitoring = false
    
    local lastPosition = player.Character and player.Character:GetPrimaryPartCFrame()
    if not lastPosition then 
        isProcessing = false
        return 
    end
    
    local args = {[1] = workspace.MainMapFolder.MainArea.Structures.Altars.ALTAR}
    local startTime = tick()
    
    showNotification("Initiating shrine teleport...", 1)
    
    task.spawn(function()
        -- Initial shrine teleport and return sequence
        while tick() - startTime < 4 do
            local success = pcall(function()
                game:GetService("ReplicatedStorage").ShrineTeleport:InvokeServer(unpack(args))
            end)
            
            task.wait(0.1)
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = lastPosition
            end
            task.wait(0.1)
        end
        
        -- Check safezone after 4 seconds
        showNotification("Checking safezone status...", 1)
        if player:FindFirstChild("IsInSafezone") and player.IsInSafezone.Value then
            showNotification("Successfully in safezone!", 2)
            
            -- If toggled, start monitoring safezone
            if isToggled then
                isSafezoneMonitoring = true
                showNotification("Monitoring safezone status...", 2)
                monitorSafezone(lastPosition)
            else
                isProcessing = false
            end
        else
            showNotification("Not in safezone, retrying...", 1)
            if isToggled then
                task.wait(0.5)
                teleportLoop() -- Retry the whole sequence
            else
                isProcessing = false
            end
        end
    end)
end

-- Button click handler with toggle
teleportButton.MouseButton1Click:Connect(function()
    isToggled = not isToggled
    updateButtonAppearance()
    
    if isToggled then
        if not isProcessing then
            teleportLoop()
        end
    else
        isSafezoneMonitoring = false
        isProcessing = false
    end
end)

-- Button effect
local function buttonEffect()
    local baseColor = isToggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 128, 0)
    local pressedColor = isToggled and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 100, 0)
    
    TweenService:Create(teleportButton, TweenInfo.new(0.1), {
        BackgroundColor3 = pressedColor
    }):Play()
    
    task.wait(0.1)
    
    TweenService:Create(teleportButton, TweenInfo.new(0.1), {
        BackgroundColor3 = baseColor
    }):Play()
end

teleportButton.MouseButton1Click:Connect(buttonEffect)
]]

local script5 = [[
local ChatSpy = {
    Enabled = true
}

local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to display spy message in chat
local function displaySpyMessage(playerName, message, isPrivate)
    if not ChatSpy.Enabled then return end
    
    -- Format the spy message
    local spyText = string.format(
        "👁️ [ChatSpy] %s%s: %s",
        isPrivate and "🔒 " or "",
        playerName,
        message
    )
    
    -- Display in TextChatService
    local channel = TextChatService.TextChannels.RBXGeneral
    channel:DisplaySystemMessage(spyText)
end

-- Hook Chat Messages (Including Private Messages)
local function hookPlayer(player)
    player.Chatted:Connect(function(msg)
        if player == LocalPlayer then return end -- Don't spy on own messages
        
        -- Check for private messages
        local isPrivate = string.sub(msg, 1, 3) == "/w " or 
                         string.sub(msg, 1, 3) == "/pm " or
                         string.sub(msg, 1, 5) == "/tell " or
                         string.sub(msg, 1, 9) == "/whisper "
        
        displaySpyMessage(player.Name, msg, isPrivate)
    end)
end

-- Initialize
local function init()
    -- Hook existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            hookPlayer(player)
        end
    end
    
    -- Hook new players
    Players.PlayerAdded:Connect(function(player)
        if player ~= LocalPlayer then
            hookPlayer(player)
        end
    end)
    
    -- Show enabled message
    TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage("👁️ [ChatSpy] Chat spy has been enabled! Monitoring all messages...")
end

init()

return ChatSpy
]]

local script6 = [[
local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local userInputService = game:GetService("UserInputService")

-- Settings that persist across respawns
local settings = {
    running = false,
    fixedDelay = 0.1,
    minDelay = 0.05,
    maxDelay = 0.2,
    useRandomDelay = false,
    guiLocked = false,
    rspyEnabled = false,
    rspyUpdateDelay = 12
}

-- RSpy System Variables
local currentRemotePath = "k\239\188\151l\239\188\148ZO\227\129\158wat\227\129\155\227\129\134\227\129\160"
local spiedRemotePath = nil
local originalNamecall = nil
local configFolder = "AutoBlockConfig"
local configFile = "remote_config.txt"

-- Track active loops to stop them when needed
local activeLoops = {
    fixed = nil,
    random = nil
}

-- File system functions
local function saveRemoteToConfig(remotePath)
    if not isfolder then return end
    if not writefile then return end
    
    if not isfolder(configFolder) then
        makefolder(configFolder)
    end
    
    writefile(configFolder .. "/" .. configFile, remotePath)
end

local function loadRemoteFromConfig()
    if not isfile then return nil end
    if not readfile then return nil end
    
    if isfile(configFolder .. "/" .. configFile) then
        return readfile(configFolder .. "/" .. configFile)
    end
    
    return nil
end

-- RSpy System
local function setupRSpy()
    if originalNamecall then return end
    
    local hookfunction = hookfunction
    local getnamecallmethod = getnamecallmethod
    
    if not hookfunction or not getnamecallmethod then
        warn("Executor doesn't support required functions - RSpy disabled")
        return
    end
    
    originalNamecall = hookfunction(getrawmetatable(game).__namecall, function(...)
        local method = getnamecallmethod()
        local self = ...
        local args = {...}
        
        if method == "FireServer" and typeof(self) == "Instance" then
            -- Check if this matches our block pattern
            if #args >= 3 then
                local arg1 = args[2]
                local arg2 = args[3]
                local arg3 = args[4]
                
                -- Pattern: String with "BLOCK", Tool/Part, Boolean
                if typeof(arg1) == "string" and 
                   (typeof(arg2) == "Instance") and 
                   typeof(arg3) == "boolean" and
                   arg1:find("BLOCK") then
                    
                    -- Found potential remote
                    local remoteName = self.Name
                    if remoteName ~= spiedRemotePath then
                        spiedRemotePath = remoteName
                        currentRemotePath = remoteName
                        saveRemoteToConfig(remoteName)
                        print("[RSpy] New block remote detected:", remoteName)
                    end
                end
            end
        end
        
        return originalNamecall(...)
    end)
end

local function destroyRSpy()
    if originalNamecall then
        hookfunction(getrawmetatable(game).__namecall, originalNamecall)
        originalNamecall = nil
    end
end

-- Initialize remote from config
local function initializeRemote()
    local savedRemote = loadRemoteFromConfig()
    if savedRemote and savedRemote ~= "" then
        currentRemotePath = savedRemote
        print("[Config] Loaded remote:", savedRemote)
    end
end

-- Function to make a frame draggable
local function makeDraggable(frame, excludeElements)
    local dragging = false
    local dragInput, dragStart, startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    frame.InputBegan:Connect(function(input)
        if settings.guiLocked then return end
        
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            local mousePos = input.Position
            
            -- Check if clicking on excluded elements
            for _, element in pairs(excludeElements or {}) do
                local absPos = element.AbsolutePosition
                local absSize = element.AbsoluteSize
                if mousePos.X >= absPos.X and mousePos.X <= absPos.X + absSize.X and
                   mousePos.Y >= absPos.Y and mousePos.Y <= absPos.Y + absSize.Y then
                    return
                end
            end
            
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    userInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging and not settings.guiLocked then
            updateInput(input)
        end
    end)
end

-- Make settings panel draggable
local function makeSettingsDraggable(panel)
    local dragging = false
    local dragInput, dragStart, startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        panel.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    local title = panel:FindFirstChild("TextLabel")
    if title then
        title.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = panel.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        
        title.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        
        userInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                updateInput(input)
            end
        end)
    end
end

-- Function to stop all active loops
local function stopAllLoops()
    if activeLoops.fixed then
        activeLoops.fixed:Disconnect()
        activeLoops.fixed = nil
    end
    
    if activeLoops.random then
        activeLoops.random:Disconnect()
        activeLoops.random = nil
    end
end

-- Function to run the fixed delay loop
local function runFixedDelayLoop()
    stopAllLoops()
    
    local thread = coroutine.create(function()
        while settings.running and settings.useRandomDelay == false do
            local character = player.Character
            if character and character:FindFirstChild("<TN~!1>") then
                -- Block
                local args = {
                    [1] = "BLOCK THE BLOCK THE BLOCK",
                    [2] = character:FindFirstChild("<TN~!1>"),
                    [3] = true
                }
                
                local remoteEvent = replicatedStorage:FindFirstChild(currentRemotePath)
                if remoteEvent then
                    remoteEvent:FireServer(unpack(args))
                end
                
                wait(settings.fixedDelay)
                
                -- Unblock
                args[3] = false
                if remoteEvent then
                    remoteEvent:FireServer(unpack(args))
                end
            end
            
            if not player.Character or not player.Character:FindFirstChild("<TN~!1>") then
                wait(0.001)
            end
        end
    end)
    
    activeLoops.fixed = {
        Disconnect = function()
            coroutine.close(thread)
        end
    }
    
    coroutine.resume(thread)
end

-- Function to run the random delay loop
local function runRandomDelayLoop()
    stopAllLoops()
    
    local thread = coroutine.create(function()
        while settings.running and settings.useRandomDelay == true do
            local character = player.Character
            if character and character:FindFirstChild("<TN~!1>") then
                -- Block
                local args = {
                    [1] = "BLOCK THE BLOCK THE BLOCK",
                    [2] = character:FindFirstChild("<TN~!1>"),
                    [3] = true
                }
                
                local remoteEvent = replicatedStorage:FindFirstChild(currentRemotePath)
                if remoteEvent then
                    remoteEvent:FireServer(unpack(args))
                end
                
                local randomDelay = math.random() * (settings.maxDelay - settings.minDelay) + settings.minDelay
                wait(randomDelay)
                
                -- Unblock
                args[3] = false
                if remoteEvent then
                    remoteEvent:FireServer(unpack(args))
                end
            end
            
            if not player.Character or not player.Character:FindFirstChild("<TN~!1>") then
                wait(0.001)
            end
        end
    end)
    
    activeLoops.random = {
        Disconnect = function()
            coroutine.close(thread)
        end
    }
    
    coroutine.resume(thread)
end

-- Function to start the appropriate loop based on settings
local function startBlockLoop()
    if settings.useRandomDelay then
        runRandomDelayLoop()
    else
        runFixedDelayLoop()
    end
end

-- GUI creation function
local function createGui()
    if player.PlayerGui:FindFirstChild("AutoBlockGUI") then
        player.PlayerGui:FindFirstChild("AutoBlockGUI"):Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoBlockGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = player.PlayerGui
    
    -- Main frame
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 240, 0, 80)
    frame.Position = UDim2.new(0.8, -120, 0.1, 0)
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    frame.BackgroundTransparency = 0.4
    frame.BorderSizePixel = 1
    frame.BorderColor3 = Color3.fromRGB(60, 60, 60)
    frame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 4)
    corner.Parent = frame
    
    -- Lock Toggle Button (Top Right)
    local lockToggle = Instance.new("TextButton")
    lockToggle.Name = "LockToggle"
    lockToggle.Size = UDim2.new(0, 12, 0, 12)
    lockToggle.Position = UDim2.new(1, -35, 0, 3)
    lockToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    lockToggle.BackgroundTransparency = 0.5
    lockToggle.BorderSizePixel = 0
    lockToggle.Text = ""
    lockToggle.Parent = frame
    
    local lockCorner = Instance.new("UICorner")
    lockCorner.CornerRadius = UDim.new(1, 0)
    lockCorner.Parent = lockToggle
    
    -- Settings Toggle Button
    local settingsToggle = Instance.new("TextButton")
    settingsToggle.Name = "SettingsToggle"
    settingsToggle.Size = UDim2.new(0, 18, 0, 18)
    settingsToggle.Position = UDim2.new(1, -18, 0, 0)
    settingsToggle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    settingsToggle.BackgroundTransparency = 0.5
    settingsToggle.BorderSizePixel = 0
    settingsToggle.Text = "⚙️"
    settingsToggle.TextSize = 12
    settingsToggle.Parent = frame
    
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 4)
    settingsCorner.Parent = settingsToggle
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 18)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    title.BackgroundTransparency = 0.4
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Text = "Auto Block"
    title.TextSize = 14
    title.Font = Enum.Font.GothamBold
    title.Parent = frame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 4)
    titleCorner.Parent = title
    
    -- Toggle button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 60, 0, 28)
    toggleButton.Position = UDim2.new(0.05, 0, 0.35, 0)
    toggleButton.Text = settings.running and "ON" or "OFF"
    toggleButton.BackgroundColor3 = settings.running and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(150, 30, 30)
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.BorderSizePixel = 0
    toggleButton.TextSize = 16
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.Parent = frame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 4)
    toggleCorner.Parent = toggleButton
    
    -- Fixed delay section
    local fixedDelayLabel = Instance.new("TextLabel")
    fixedDelayLabel.Size = UDim2.new(0, 35, 0, 16)
    fixedDelayLabel.Position = UDim2.new(0.33, 0, 0.3, 0)
    fixedDelayLabel.BackgroundTransparency = 1
    fixedDelayLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    fixedDelayLabel.Text = "Fixed:"
    fixedDelayLabel.TextSize = 12
    fixedDelayLabel.Font = Enum.Font.Gotham
    fixedDelayLabel.TextXAlignment = Enum.TextXAlignment.Left
    fixedDelayLabel.Parent = frame
    
    local fixedDelayInput = Instance.new("TextBox")
    fixedDelayInput.Size = UDim2.new(0, 35, 0, 20)
    fixedDelayInput.Position = UDim2.new(0.33, 0, 0.55, 0)
    fixedDelayInput.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
    fixedDelayInput.BackgroundTransparency = 0.3
    fixedDelayInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    fixedDelayInput.Text = tostring(settings.fixedDelay)
    fixedDelayInput.PlaceholderText = "Delay"
    fixedDelayInput.TextSize = 12
    fixedDelayInput.Font = Enum.Font.Gotham
    fixedDelayInput.Parent = frame
    
    local fixedInputCorner = Instance.new("UICorner")
    fixedInputCorner.CornerRadius = UDim.new(0, 4)
    fixedInputCorner.Parent = fixedDelayInput
    
    -- Random toggle
    local randomToggle = Instance.new("TextButton")
    randomToggle.Size = UDim2.new(0, 16, 0, 16)
    randomToggle.Position = UDim2.new(0.5, 0, 0.3, 0)
    randomToggle.Text = ""
    randomToggle.BackgroundColor3 = settings.useRandomDelay and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
    randomToggle.BorderSizePixel = 0
    randomToggle.Parent = frame
    
    local randomToggleCorner = Instance.new("UICorner")
    randomToggleCorner.CornerRadius = UDim.new(0, 3)
    randomToggleCorner.Parent = randomToggle
    
    -- Random label
    local randomLabel = Instance.new("TextLabel")
    randomLabel.Size = UDim2.new(0, 50, 0, 16)
    randomLabel.Position = UDim2.new(0.57, 0, 0.3, 0)
    randomLabel.BackgroundTransparency = 1
    randomLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    randomLabel.Text = "Random"
    randomLabel.TextSize = 12
    randomLabel.Font = Enum.Font.Gotham
    randomLabel.TextXAlignment = Enum.TextXAlignment.Left
    randomLabel.Parent = frame
    
    -- Min/Max inputs
    local minDelayLabel = Instance.new("TextLabel")
    minDelayLabel.Size = UDim2.new(0, 25, 0, 16)
    minDelayLabel.Position = UDim2.new(0.5, 0, 0.55, 0)
    minDelayLabel.BackgroundTransparency = 1
    minDelayLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    minDelayLabel.Text = "Min:"
    minDelayLabel.TextSize = 12
    minDelayLabel.Font = Enum.Font.Gotham
    minDelayLabel.TextXAlignment = Enum.TextXAlignment.Left
    minDelayLabel.Parent = frame
    
    local minDelayInput = Instance.new("TextBox")
    minDelayInput.Size = UDim2.new(0, 30, 0, 20)
    minDelayInput.Position = UDim2.new(0.6, 0, 0.55, 0)
    minDelayInput.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
    minDelayInput.BackgroundTransparency = 0.3
    minDelayInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    minDelayInput.Text = tostring(settings.minDelay)
    minDelayInput.PlaceholderText = "Min"
    minDelayInput.TextSize = 12
    minDelayInput.Font = Enum.Font.Gotham
    minDelayInput.Parent = frame
    
    local minInputCorner = Instance.new("UICorner")
    minInputCorner.CornerRadius = UDim.new(0, 4)
    minInputCorner.Parent = minDelayInput
    
    local maxDelayLabel = Instance.new("TextLabel")
    maxDelayLabel.Size = UDim2.new(0, 30, 0, 16)
    maxDelayLabel.Position = UDim2.new(0.73, 0, 0.55, 0)
    maxDelayLabel.BackgroundTransparency = 1
    maxDelayLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    maxDelayLabel.Text = "Max:"
    maxDelayLabel.TextSize = 12
    maxDelayLabel.Font = Enum.Font.Gotham
    maxDelayLabel.TextXAlignment = Enum.TextXAlignment.Left
    maxDelayLabel.Parent = frame
    
    local maxDelayInput = Instance.new("TextBox")
    maxDelayInput.Size = UDim2.new(0, 30, 0, 20)
    maxDelayInput.Position = UDim2.new(0.85, 0, 0.55, 0)
    maxDelayInput.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
    maxDelayInput.BackgroundTransparency = 0.3
    maxDelayInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    maxDelayInput.Text = tostring(settings.maxDelay)
    maxDelayInput.PlaceholderText = "Max"
    maxDelayInput.TextSize = 12
    maxDelayInput.Font = Enum.Font.Gotham
    maxDelayInput.Parent = frame
    
    local maxInputCorner = Instance.new("UICorner")
    maxInputCorner.CornerRadius = UDim.new(0, 4)
    maxInputCorner.Parent = maxDelayInput
    
    -- Status indicator
    local statusIndicator = Instance.new("Frame")
    statusIndicator.Size = UDim2.new(0, 8, 0, 8)
    statusIndicator.Position = UDim2.new(0.95, 0, 0.15, 0)
    statusIndicator.BackgroundColor3 = settings.running and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    statusIndicator.BorderSizePixel = 0
    statusIndicator.Parent = frame
    
    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(1, 0)
    statusCorner.Parent = statusIndicator
    
    -- Settings Panel
    local settingsPanel = Instance.new("Frame")
    settingsPanel.Name = "SettingsPanel"
    settingsPanel.Size = UDim2.new(0, 250, 0, 150)
    settingsPanel.Position = UDim2.new(0.5, -125, 0.3, 0)
    settingsPanel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    settingsPanel.BackgroundTransparency = 0.3
    settingsPanel.BorderSizePixel = 2
    settingsPanel.BorderColor3 = Color3.fromRGB(60, 60, 60)
    settingsPanel.Visible = false
    settingsPanel.Parent = screenGui
    
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0, 8)
    panelCorner.Parent = settingsPanel
    
    -- Panel Title
    local panelTitle = Instance.new("TextLabel")
    panelTitle.Size = UDim2.new(1, 0, 0, 30)
    panelTitle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    panelTitle.BackgroundTransparency = 0.3
    panelTitle.Text = "Settings"
    panelTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    panelTitle.Font = Enum.Font.GothamBold
    panelTitle.TextSize = 16
    panelTitle.Parent = settingsPanel
    
    local titlePanelCorner = Instance.new("UICorner")
    titlePanelCorner.CornerRadius = UDim.new(0, 8)
    titlePanelCorner.Parent = panelTitle
    
    -- Scrolling Frame
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -40)
    scrollFrame.Position = UDim2.new(0, 5, 0, 35)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 6
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 150)
    scrollFrame.Parent = settingsPanel
    
    local function createLabel(text, yPos)
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, -10, 0, 20)
        label.Position = UDim2.new(0, 5, 0, yPos)
        label.BackgroundTransparency = 1
        label.Text = text
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Font = Enum.Font.Gotham
        label.TextSize = 13
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = scrollFrame
        return label
    end
    
    local function createToggle(name, yPos, defaultValue)
        local toggle = Instance.new("TextButton")
        toggle.Name = name
        toggle.Size = UDim2.new(0, 40, 0, 20)
        toggle.Position = UDim2.new(1, -45, 0, yPos)
        toggle.BackgroundColor3 = defaultValue and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
        toggle.BorderSizePixel = 0
        toggle.Text = defaultValue and "ON" or "OFF"
        toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggle.Font = Enum.Font.GothamBold
        toggle.TextSize = 11
        toggle.Parent = scrollFrame
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 4)
        toggleCorner.Parent = toggle
        
        return toggle
    end
    
    local function createTextBox(name, yPos, defaultValue)
        local textBox = Instance.new("TextBox")
        textBox.Name = name
        textBox.Size = UDim2.new(0, 60, 0, 22)
        textBox.Position = UDim2.new(1, -65, 0, yPos)
        textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        textBox.BackgroundTransparency = 0.3
        textBox.BorderSizePixel = 1
        textBox.BorderColor3 = Color3.fromRGB(80, 80, 80)
        textBox.Text = tostring(defaultValue)
        textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
        textBox.Font = Enum.Font.Gotham
        textBox.TextSize = 12
        textBox.Parent = scrollFrame
        
        local boxCorner = Instance.new("UICorner")
        boxCorner.CornerRadius = UDim.new(0, 4)
        boxCorner.Parent = textBox
        
        return textBox
    end
    
    -- Create settings elements
    local yOffset = 10
    
    createLabel("RSpy Method:", yOffset)
    local rspyToggle = createToggle("RSpyToggle", yOffset, settings.rspyEnabled)
    yOffset = yOffset + 30
    
    createLabel("RSpy Update Delay (sec):", yOffset)
    local rspyDelayInput = createTextBox("RSpyDelayInput", yOffset, settings.rspyUpdateDelay)
    yOffset = yOffset + 30
    
    -- Make frame draggable (exclude interactive elements)
    makeDraggable(frame, {toggleButton, fixedDelayInput, randomToggle, minDelayInput, maxDelayInput, lockToggle, settingsToggle})
    makeSettingsDraggable(settingsPanel)
    
    -- Lock toggle functionality
    lockToggle.MouseButton1Click:Connect(function()
        settings.guiLocked = not settings.guiLocked
        lockToggle.BackgroundColor3 = settings.guiLocked and Color3.fromRGB(100, 30, 30) or Color3.fromRGB(30, 30, 30)
    end)
    
    -- Settings toggle functionality
    settingsToggle.MouseButton1Click:Connect(function()
        settingsPanel.Visible = not settingsPanel.Visible
    end)
    
    -- RSpy toggle
    rspyToggle.MouseButton1Click:Connect(function()
        settings.rspyEnabled = not settings.rspyEnabled
        rspyToggle.Text = settings.rspyEnabled and "ON" or "OFF"
        rspyToggle.BackgroundColor3 = settings.rspyEnabled and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
        
        if settings.rspyEnabled then
            setupRSpy()
        else
            destroyRSpy()
        end
    end)
    
    -- RSpy delay input
    rspyDelayInput.FocusLost:Connect(function()
        local value = tonumber(rspyDelayInput.Text)
        if value and value > 0 then
            settings.rspyUpdateDelay = value
        else
            rspyDelayInput.Text = tostring(settings.rspyUpdateDelay)
        end
    end)
    
    -- Toggle button click
    toggleButton.MouseButton1Click:Connect(function()
        settings.running = not settings.running
        toggleButton.Text = settings.running and "ON" or "OFF"
        toggleButton.BackgroundColor3 = settings.running and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(150, 30, 30)
        statusIndicator.BackgroundColor3 = settings.running and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        
        if settings.running then
            startBlockLoop()
        else
            stopAllLoops()
        end
    end)
    
    -- Random toggle click
    randomToggle.MouseButton1Click:Connect(function()
        local wasRunning = settings.running
        
        if wasRunning then
            settings.running = false
            stopAllLoops()
        end
        
        settings.useRandomDelay = not settings.useRandomDelay
        randomToggle.BackgroundColor3 = settings.useRandomDelay and Color3.fromRGB(0, 150, 60) or Color3.fromRGB(60, 60, 65)
        
        if wasRunning then
            settings.running = true
            startBlockLoop()
        end
    end)
    
    -- Fixed delay input
    fixedDelayInput.FocusLost:Connect(function()
        local inputDelay = tonumber(fixedDelayInput.Text)
        if inputDelay and inputDelay > 0 then
            settings.fixedDelay = inputDelay
        else
            fixedDelayInput.Text = tostring(settings.fixedDelay)
        end
    end)
    
    -- Min delay input
    minDelayInput.FocusLost:Connect(function()
        local inputDelay = tonumber(minDelayInput.Text)
        if inputDelay and inputDelay > 0 then
            settings.minDelay = inputDelay
            if settings.minDelay > settings.maxDelay then
                settings.maxDelay = settings.minDelay
                maxDelayInput.Text = tostring(settings.maxDelay)
            end
        else
            minDelayInput.Text = tostring(settings.minDelay)
        end
    end)
    
    -- Max delay input
    maxDelayInput.FocusLost:Connect(function()
        local inputDelay = tonumber(maxDelayInput.Text)
        if inputDelay and inputDelay > 0 then
            settings.maxDelay = inputDelay
            if settings.maxDelay < settings.minDelay then
                settings.minDelay = settings.maxDelay
                minDelayInput.Text = tostring(settings.minDelay)
            end
        else
            maxDelayInput.Text = tostring(settings.maxDelay)
        end
    end)
    
    -- Start the loop if it was running before
    if settings.running then
        startBlockLoop()
    end
    
    return screenGui
end

-- Handle character respawning
player.CharacterAdded:Connect(function()
    stopAllLoops()
    
    if not player.PlayerGui:FindFirstChild("AutoBlockGUI") then
        createGui()
    end
    
    if settings.running then
        startBlockLoop()
    end
end)

-- Initialize and create GUI
initializeRemote()
createGui()
]]

local script7 = [[
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Variables to track state and position
local isEnabled = false
local connection = nil
local guiPosition = UDim2.new(0.85, 0, 0.1, 0)
local screenGui, toggleFrame, toggleButton, statusLabel

-- Function to get the target path
local function getTargetPath()
    local playerName = player.Name
    local path = workspace:FindFirstChild(playerName)
    
    if path then
        return path:FindFirstChild("<TN~!1>")
    end
    
    return nil
end

-- Function to disable stun
local function disableStun()
    local target = getTargetPath()
    
    if target and target:GetAttribute("Stunned") then
        target:SetAttribute("Stunned", false)
    end
    
    -- Also check backpack
    local backpackItem = player.Backpack:FindFirstChild("<TN~!1>")
    if backpackItem and backpackItem:GetAttribute("Stunned") then
        backpackItem:SetAttribute("Stunned", false)
    end
end

-- Function to update GUI state
local function updateGuiState()
    if not toggleButton or not statusLabel then
        return
    end
    
    if isEnabled then
        toggleButton.Text = "ENABLED"
        toggleButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
        statusLabel.Text = "ON"
    else
        toggleButton.Text = "DISABLED"
        toggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
        statusLabel.Text = "OFF"
    end
end

-- Toggle function
local function toggleStunDisabler()
    isEnabled = not isEnabled
    
    updateGuiState()
    
    if isEnabled then
        -- Start the loop
        if connection then
            connection:Disconnect()
        end
        
        connection = RunService.Heartbeat:Connect(function()
            disableStun()
        end)
    else
        -- Stop the loop
        if connection then
            connection:Disconnect()
            connection = nil
        end
    end
end

-- Function to create the GUI
local function createGui()
    -- Remove existing GUI if it exists
    local existingGui = playerGui:FindFirstChild("StunToggleGui")
    if existingGui then
        existingGui:Destroy()
    end
    
    -- Create new GUI
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "StunToggleGui"
    screenGui.ResetOnSpawn = false -- Important to prevent GUI from disappearing
    screenGui.Parent = playerGui
    
    toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(0, 150, 0, 50)
    toggleFrame.Position = guiPosition
    toggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    toggleFrame.BorderSizePixel = 2
    toggleFrame.BorderColor3 = Color3.fromRGB(80, 80, 80)
    toggleFrame.Active = true
    toggleFrame.Draggable = true
    toggleFrame.Parent = screenGui
    
    -- Track position changes
    toggleFrame:GetPropertyChangedSignal("Position"):Connect(function()
        guiPosition = toggleFrame.Position
    end)
    
    toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0.65, 0, 0.8, 0)
    toggleButton.Position = UDim2.new(0.025, 0, 0.1, 0)
    toggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    toggleButton.Text = "DISABLED"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.TextScaled = true
    toggleButton.Font = Enum.Font.SourceSansBold
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = toggleFrame
    
    statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(0.25, 0, 0.8, 0)
    statusLabel.Position = UDim2.new(0.7, 0, 0.1, 0)
    statusLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.Text = "OFF"
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.SourceSansBold
    statusLabel.BorderSizePixel = 0
    statusLabel.Parent = toggleFrame
    
    -- Set up button click event
    toggleButton.MouseButton1Click:Connect(toggleStunDisabler)
    
    -- Update visual state
    updateGuiState()
    
    -- Cleanup on script termination
    screenGui.AncestryChanged:Connect(function(_, parent)
        if parent == nil and connection then
            connection:Disconnect()
        end
    end)
end

-- Handle player respawning
local function onRespawn()
    -- Give a small delay to ensure character is fully loaded
    task.wait(0.1)
    createGui()
    
    -- Ensure connection state is consistent
    if isEnabled and not connection then
        connection = RunService.Heartbeat:Connect(function()
            disableStun()
        end)
    end
end

-- Create the initial GUI
createGui()

-- Set up character added event for respawn
player.CharacterAdded:Connect(onRespawn)

-- Create a timer to ensure we run at the specified interval
local timeSinceLastCheck = 0
RunService.Heartbeat:Connect(function(deltaTime)
    if isEnabled then
        timeSinceLastCheck = timeSinceLastCheck + deltaTime
        
        if timeSinceLastCheck >= 0.05 then
            disableStun()
            timeSinceLastCheck = 0
        end
    end
end)
]]

local script8 = [[
local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local window = DrRayLibrary:Load("• Samurai GUI •", "Default")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Combat tab implementation
local combatTab = DrRayLibrary.newTab("Combat", "ImageIdHere")

-- Variables
local killauraEnabled = false
local kickauraEnabled = false
local killAuraDistance = 15
local kickAuraDistance = 15
local killAuraDelay = 1
local kickAuraDelay = 1
local whitelistedPlayers = {}
local stunBaitEnabled = false
local visualizeAuraEnabled = false
local auraVisualization = nil

-- Notification function
local function notify(title, message, duration)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = message,
        Duration = duration or 3
    })
end

-- Killaura section
combatTab.newLabel("Kill Aura")

combatTab.newInput("Kill Aura Distance", "Set distance for kill aura", function(value)
    local newDistance = tonumber(value)
    if newDistance and newDistance > 0 then
        killAuraDistance = newDistance
        updateAuraVisualization()
        notify("Kill Aura Updated", "New distance: " .. killAuraDistance .. " studs")
    end
end)

combatTab.newInput("Kill Aura Delay", "Set delay for kill aura (seconds)", function(value)
    local newDelay = tonumber(value)
    if newDelay and newDelay > 0 then
        killAuraDelay = newDelay
        notify("Kill Aura Updated", "New delay: " .. killAuraDelay .. " seconds")
    end
end)

-- Function to check if a player is stunned
local function isPlayerStunned(player)
    local character = workspace:FindFirstChild(player.Name)
    if character then
        for _, item in pairs(character:GetChildren()) do
            if item:IsA("Tool") and item:FindFirstChild("SkinName") then
                local stunnedValue = item:GetAttribute("Stunned")
                if stunnedValue ~= nil then
                    return stunnedValue
                end
            end
        end
    end
    return false
end

-- Function to perform attack
local function performAttack(target)
    local localPlayer = Players.LocalPlayer
    local localChar = localPlayer.Character
    if localChar and localChar:FindFirstChild("HumanoidRootPart") and target:FindFirstChild("HumanoidRootPart") then
        local args = {
            [1] = "WOAH YOU HIT SOMEONE!",
            [2] = localChar:FindFirstChild("<TN~!1>"),
            [3] = target:FindFirstChild("Head") or target:FindFirstChild("HumanoidRootPart"),
            [4] = localChar.HumanoidRootPart.CFrame
        }
        local attackRemote = ReplicatedStorage:WaitForChild("j\239\188\145k\239\188\13853\226\128\139ZO")
        if attackRemote then
            attackRemote:FireServer(unpack(args))
        end
    end
end

-- Function to run the Kill Aura
local function RunKillAura()
    while killauraEnabled do
        local localPlayer = Players.LocalPlayer
        local localChar = localPlayer.Character
        
        if localChar and localChar:FindFirstChild("HumanoidRootPart") then
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= localPlayer and not table.find(whitelistedPlayers, player.Name:lower()) then
                    local character = workspace:FindFirstChild(player.Name)
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local distance = (character.HumanoidRootPart.Position - localChar.HumanoidRootPart.Position).Magnitude
                        if distance <= killAuraDistance then
                            local canAttack = not stunBaitEnabled or (stunBaitEnabled and isPlayerStunned(player))
                            if canAttack then
                                performAttack(character)
                            end
                        end
                    end
                end
            end
        end
        wait(killAuraDelay)
    end
end

-- Function to update aura visualization
local function updateAuraVisualization()
    if auraVisualization then
        auraVisualization:Destroy()
    end
    
    if visualizeAuraEnabled then
        local localPlayer = Players.LocalPlayer
        local character = localPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            auraVisualization = Instance.new("Part")
            auraVisualization.Shape = Enum.PartType.Cylinder
            auraVisualization.Size = Vector3.new(0.1, killAuraDistance * 2, killAuraDistance * 2)
            auraVisualization.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.Angles(0, 0, math.pi/2)
            auraVisualization.Anchored = true
            auraVisualization.CanCollide = false
            auraVisualization.Transparency = 0.7
            auraVisualization.BrickColor = BrickColor.new("Really red")
            auraVisualization.Parent = workspace
        end
    end
end

-- Function to continuously update aura visualization position
local function updateAuraVisualizationPosition()
    while visualizeAuraEnabled and auraVisualization do
        local localPlayer = Players.LocalPlayer
        local character = localPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            auraVisualization.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.Angles(0, 0, math.pi/2)
        end
        RunService.Heartbeat:Wait()
    end
end

-- Kill Aura toggle
combatTab.newButton("Toggle Kill Aura", "Enable/Disable Kill Aura", function()
    killauraEnabled = not killauraEnabled
    
    if killauraEnabled then
        coroutine.wrap(RunKillAura)()
    end
    
    notify("Kill Aura " .. (killauraEnabled and "Activated" or "Deactivated"), 
           killauraEnabled and "Kill aura is now active" or "Kill aura has been disabled")
end)

-- Update aura visualization on character added
Players.LocalPlayer.CharacterAdded:Connect(function(char)
    wait(1) -- Wait for the character to fully load
    updateAuraVisualization()
    if visualizeAuraEnabled then
        coroutine.wrap(updateAuraVisualizationPosition)()
    end
end)

-- Kick aura section
combatTab.newLabel("Kick Aura")

combatTab.newInput("Kick Aura Distance", "Set distance for kick aura", function(value)
    local newDistance = tonumber(value)
    if newDistance and newDistance > 0 then
        kickAuraDistance = newDistance
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Kick Aura Distance Updated",
            Text = "New distance: " .. kickAuraDistance .. " studs",
            Duration = 3
        })
    end
end)

combatTab.newInput("Kick Aura Delay", "Set delay for kick aura (seconds)", function(value)
    local newDelay = tonumber(value)
    if newDelay and newDelay > 0 then
        kickAuraDelay = newDelay
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Kick Aura Delay Updated",
            Text = "New delay: " .. kickAuraDelay .. " seconds",
            Duration = 3
        })
    end
end)

combatTab.newButton("Toggle Kick Aura", "Enable/Disable Kick Aura", function()
    kickauraEnabled = not kickauraEnabled
    
    if kickauraEnabled then
        spawn(function()
            while kickauraEnabled do
                local localPlayer = game:GetService("Players").LocalPlayer
                local localChar = localPlayer.Character
                
                if localChar and localChar:FindFirstChild("HumanoidRootPart") then
                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= localPlayer then
                            local character = player.Character
                            if character and character:FindFirstChild("HumanoidRootPart") then
                                local distance = (character.HumanoidRootPart.Position - localChar.HumanoidRootPart.Position).Magnitude
                                if distance <= kickAuraDistance then
                                    local args = {
                                        [1] = "KICKYWICKY",
                                        [2] = localChar:FindFirstChild("<TN~!1>"),
                                        [3] = character,
                                        [4] = localChar.HumanoidRootPart.CFrame
                                    }
                                    game:GetService("ReplicatedStorage"):WaitForChild("j\239\188\145k\239\188\13853\226\128\139ZO"):FireServer(unpack(args))
                                end
                            end
                        end
                    end
                end
                wait(kickAuraDelay)
            end
        end)
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Kick Aura Activated",
            Text = "Distance: " .. kickAuraDistance .. " studs | Delay: " .. kickAuraDelay .. "s",
            Duration = 3
        })
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Kick Aura Deactivated",
            Text = "Kick aura has been disabled",
            Duration = 3
        })
    end
end)

-- Whitelist section
combatTab.newLabel("Whitelist")

local whitelistInput = combatTab.newInput("Whitelist Player", "Enter player name to whitelist", function(value)
    -- This function will be called when the input is submitted
end)

combatTab.newButton("Add to Whitelist", "Add player to whitelist", function()
    local playerName = whitelistInput:GetText()
    if playerName and playerName ~= "" then
        table.insert(whitelistedPlayers, playerName:lower())
        notify("Whitelist Updated", playerName .. " added to whitelist")
    end
end)

combatTab.newButton("Remove from Whitelist", "Remove player from whitelist", function()
    local playerName = whitelistInput:GetText()
    if playerName and playerName ~= "" then
        for i, name in ipairs(whitelistedPlayers) do
            if name:lower() == playerName:lower() then
                table.remove(whitelistedPlayers, i)
                notify("Whitelist Updated", playerName .. " removed from whitelist")
                break
            end
        end
    end
end)

-- Stun Bait toggle
combatTab.newButton("Toggle Stun Bait", "Only attack stunned players", function()
    stunBaitEnabled = not stunBaitEnabled
    notify("Stun Bait " .. (stunBaitEnabled and "Activated" or "Deactivated"), 
           stunBaitEnabled and "Only attacking stunned players" or "Attacking all players in range")
end)

-- Kill Aura Visualize toggle
combatTab.newButton("Toggle Kill Aura Visualization", "Show kill aura range", function()
    visualizeAuraEnabled = not visualizeAuraEnabled
    updateAuraVisualization()
    if visualizeAuraEnabled then
        coroutine.wrap(updateAuraVisualizationPosition)()
    end
    notify("Kill Aura Visualization " .. (visualizeAuraEnabled and "On" or "Off"), 
           visualizeAuraEnabled and "Showing kill aura range" or "Kill aura range hidden")
end)

local tab = DrRayLibrary.newTab("Hit Things", "ImageIdHere")

local clanHitEnabled = false
local clanHitDelay = 1
tab.newInput("Clan Hit Delay", "Set delay for auto clan hit (seconds)", function(value)
    clanHitDelay = tonumber(value) or clanHitDelay
end)
local clanHitLoop = nil
tab.newButton("Auto Hit Clan Guy", "Toggle Auto Hit Clan Guy", function()
    clanHitEnabled = not clanHitEnabled
    
    if clanHitEnabled then
        if clanHitLoop then clanHitLoop:Disconnect() end
        
        local lastHitTime = tick() -- Track the time of the last hit
        clanHitLoop = RunService.Heartbeat:Connect(function()
            if tick() - lastHitTime >= clanHitDelay then
                local remote = ReplicatedStorage:WaitForChild("j\239\188\145k\239\188\13853\226\128\139ZO")
                local localChar = Players.LocalPlayer.Character
                if remote and localChar then
                    local weapon = localChar:FindFirstChild("<TN~!1>")
                    if weapon then
                        local args = {
                            [1] = "WOAH YOU HIT SOMEONE!",
                            [2] = weapon,
                            [3] = workspace.Clans.ClansNPC:FindFirstChild("Head"),
                            [4] = CFrame.new(2905.097412109375, 224.10476684570312, -3835.6630859375, -0.5031031370162964, -1.0004535511143331e-07, -0.8642264008522034, -5.48595195937196e-08, 1, -8.382683347463171e-08, 0.8642264008522034, 5.237501543575718e-09, -0.5031031370162964)
                        }
                        remote:FireServer(unpack(args))
                        lastHitTime = tick() -- Update the last hit time
                    end
                end
            end
        end)
    else
        if clanHitLoop then
            clanHitLoop:Disconnect()
            clanHitLoop = nil
        end
    end
    
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = clanHitEnabled and "Activated" or "Deactivated",
        Text = "Auto Hit Clan is " .. (clanHitEnabled and "On" or "Off"),
        Duration = 5
    })
end)

tab.newButton("Hit Bell", "Hit bell", function()

local args = {
    [1] = "WOAH YOU HIT SOMEONE!",
    [2] = game:GetService("Players").LocalPlayer.Character:FindFirstChild("<TN~!1>"),
    [3] = workspace.Ignore.BellModel.BellAttach.Bell,
    [4] = CFrame.new(3489.572265625, 325.30877685546875, -3719.884765625, 0.19734840095043182, 1.221115297767028e-07, 0.9803333878517151, -4.488273219749317e-08, 1, -1.1552599232800276e-07, -0.9803333878517151, -2.120117237325303e-08, 0.19734840095043182)
}

game:GetService("ReplicatedStorage"):WaitForChild("j\239\188\145k\239\188\13853\226\128\139ZO"):FireServer(unpack(args))

end)

tab.newButton("Hit Bong", "Hit Gong", function()
local args = {
    [1] = "WOAH YOU HIT SOMEONE!",
    [2] = game:GetService("Players").LocalPlayer.Character:FindFirstChild("<TN~!1>"),
    [3] = workspace.MainMapFolder.MainArea.Interactables.Gong.Gong,
    [4] = CFrame.new(3230.12353515625, 211.27938842773438, -3970.89794921875, -0.5274049043655396, -0.00941790547221899, -0.849561870098114, -0.002879450796172023, 0.9999526143074036, -0.009297525510191917, 0.8496091961860657, -0.0024572887923568487, -0.5274070501327515)
}

game:GetService("ReplicatedStorage"):WaitForChild("j\239\188\145k\239\188\13853\226\128\139ZO"):FireServer(unpack(args))

end)

local weaponTab = DrRayLibrary.newTab("Weapons", "ImageIdHere")

-- Weapon categories
local weaponCategories = {
    {name = "Blades", weapons = {"Katana", "Naginata", "Tanto", "Odachi"}},
    {name = "Blunt", weapons = {"Kanabo", "Caestus"}},
    {name = "Special", weapons = {"Kusarigama", "Scythe"}}
}

-- Create a label for each category and buttons for its weapons
for _, category in ipairs(weaponCategories) do
    weaponTab.newLabel(category.name)
    
    for _, weapon in ipairs(category.weapons) do
        weaponTab.newButton(weapon, "Equip " .. weapon, function()
            local args = {
                [1] = weapon,
                [2] = "DoWepSkin"
            }
            game:GetService("ReplicatedStorage").EquipWeapon:InvokeServer(unpack(args))
            
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Weapon Equipped",
                Text = weapon .. " has been equipped.",
                Duration = 3
            })
        end)
    end
end

-- Create a new tab for spam features
local spamTab = DrRayLibrary.newTab("Spam", "ImageIdHere")

-- Variables for dog spam
local isDogSpamRunning = false
local dogSpamDelay = 1

-- Variables for cat spam
local isCatSpamRunning = false
local catSpamDelay = 0.5

-- Create input for dog spam delay
spamTab.newInput("Dog Spam Delay", "Set delay for dog spam (seconds)", function(value)
    local newDelay = tonumber(value)
    if newDelay and newDelay > 0 then
        dogSpamDelay = newDelay
    end
end)

-- Create toggle button for dog spam
spamTab.newButton("Dog Sound Spam", "Toggle dog sound spam (equip weapon first)", function()
    isDogSpamRunning = not isDogSpamRunning
    
    if isDogSpamRunning then
        spawn(function()
            while isDogSpamRunning do
                local args = {
                    [1] = "WOAH YOU HIT SOMEONE!",
                    [2] = game:GetService("Players").LocalPlayer.Character:FindFirstChild("<TN~!1>"),
                    [3] = workspace.MainMapFolder.MainArea.EasterEggs.dog.dogdoing,
                    [4] = CFrame.new(3322.80322265625, 243.20310974121094, -4087.52001953125, -0.4447162449359894, -1.1065712612889911e-07, -0.8956714868545532, -2.0028368297175803e-08, 1, -1.1360211971123135e-07, 0.8956714868545532, -3.25818696467195e-08, -0.4447162449359894)
                }
                
                for i = 1, 10 do
                    game:GetService("ReplicatedStorage"):WaitForChild("j\239\188\145k\239\188\13853\226\128\139ZO"):FireServer(unpack(args))
                end
                
                wait(dogSpamDelay)
            end
        end)
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Dog Spam Activated",
            Text = "Dog sound spam is now active",
            Duration = 3
        })
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Dog Spam Deactivated",
            Text = "Dog sound spam has been stopped",
            Duration = 3
        })
    end
end)

-- Create a divider
spamTab.newLabel("Cat Spam")

-- Create input for cat spam delay
spamTab.newInput("Cat Spam Delay", "Set delay for cat spam (seconds)", function(value)
    local newDelay = tonumber(value)
    if newDelay and newDelay > 0 then
        catSpamDelay = newDelay
    end
end)

-- Create toggle button for cat spam
spamTab.newButton("Cat Sound Spam", "Toggle cat sound spam (equip weapon)", function()
    isCatSpamRunning = not isCatSpamRunning
    
    if isCatSpamRunning then
        spawn(function()
            while isCatSpamRunning do
                local args = {
                    [1] = "WOAH YOU HIT SOMEONE!",
                    [2] = game:GetService("Players").LocalPlayer.Character:FindFirstChild("<TN~!1>"),
                    [3] = workspace.MAP.TradingArea.jcat.node_id60,
                    [4] = CFrame.new(3103.956298828125, 229.25205993652344, -3917.28564453125, 0.8770804405212402, -2.1043055298264335e-08, -0.4803435504436493, 9.51265910487109e-09, 1, -2.643876051422467e-08, 0.4803435504436493, 1.8619575214984252e-08, 0.8770804405212402)
                }
                
                for i = 1, 6 do
                    game:GetService("ReplicatedStorage"):WaitForChild("j\239\188\145k\239\188\13853\226\128\139ZO"):FireServer(unpack(args))
                end
                
                wait(catSpamDelay)
            end
        end)
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Cat Spam Activated",
            Text = "Cat sound spam is now active",
            Duration = 3
        })
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Cat Spam Deactivated",
            Text = "Cat sound spam has been stopped",
            Duration = 3
        })
    end
end)

local tab = DrRayLibrary.newTab("Others", "ImageIdHere")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Tool creation function
local function createTool(name, remoteArgs)
    local tool = Instance.new("Tool")
    tool.Name = name
    tool.RequiresHandle = false
    
    tool.Activated:Connect(function()
        local mouse = Players.LocalPlayer:GetMouse()
        local target = mouse.Target
        if target and target.Parent then
            local player = Players:GetPlayerFromCharacter(target.Parent)
            if player then
                local character = player.Character
                local localChar = Players.LocalPlayer.Character
                if character and localChar then
                    local weapon = localChar:FindFirstChild("<TN~!1>")
                    local remote = ReplicatedStorage:WaitForChild("j\239\188\145k\239\188\13853\226\128\139ZO")
                    if remote and weapon then
                        local args = {
                            [1] = remoteArgs[1],
                            [2] = weapon,
                            [3] = remoteArgs[2] == "character" and character or character:FindFirstChild("Head"),
                            [4] = localChar.HumanoidRootPart.CFrame
                        }
                        remote:FireServer(unpack(args))
                    end
                end
            end
        end
    end)
    
    return tool
end

local killTool = createTool("Kick Tool", {"KICKYWICKY", "character"})
local kickTool = createTool("Kill Tool", {"WOAH YOU HIT SOMEONE!", "leftarm"})

local function toggleTool(tool)
    local backpack = Players.LocalPlayer.Backpack
    if tool.Parent == backpack or tool.Parent == Players.LocalPlayer.Character then
        tool.Parent = nil
    else
        tool.Parent = backpack
    end
end

tab.newButton("Kick Tool", "Toggle Kick Tool", function()
    toggleTool(killTool)
end)

tab.newButton("Kill Tool", "Toggle Kill Tool", function()
    toggleTool(kickTool)
end)

tab.newButton("Simple Spy", "Enable Simple Spy", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/RS/main/SimpleSpyMobile"))()
end)

tab.newButton("Chat Spy", "Enable No Chat Spy", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/Alternateunknown/Samurai_GUI/refs/heads/main/ChatSpy'))()
end)

tab.newButton("Auto Parry", "Auto Parry", function()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/Aidez/ZO/main/IM%20ZO%20HARD'),true))()
end)

tab.newButton("Remove AP UI", "Remove AP UI", function()
    -- First, check if the CoreGui service and the desired UI element exists
local coreGui = game:GetService("CoreGui")
local commandBar = coreGui:FindFirstChild("ScreenGui")

if commandBar then
    local bar = commandBar:FindFirstChild("CommandBar")
    if bar then
        bar:Destroy()
        print("CommandBar destroyed.")
    else
        print("CommandBar not found.")
    end
else
    print("ScreenGui not found in CoreGui.")
  end
end)

tab.newButton("Become Skeleton", "Become Skeleton", function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Save current coordinates
local originalPosition = humanoidRootPart.CFrame
print("Original Position: ", originalPosition)

-- Function to teleport to a specific position
local function teleportToPosition(position)
    local currentCharacter = player.Character
    if currentCharacter then
        local currentHumanoidRootPart = currentCharacter:FindFirstChild("HumanoidRootPart")
        if currentHumanoidRootPart then
            currentHumanoidRootPart.CFrame = position
        end
    end
end

-- Teleport to the specified location
teleportToPosition(game.Workspace.MainMapFolder.MainArea.EasterEggs.SkeletonTransform.grave2.CFrame)
print("Teleported to grave2")

-- Wait for 0.8 seconds
wait(0.8)

-- Become that idiot
local prompt = workspace.MainMapFolder.MainArea.EasterEggs.SkeletonTransform.grave2.Transform.CustomPrompt
prompt:InputHoldBegin()
task.wait(prompt.HoldDuration)
prompt:InputHoldEnd()

-- Wait for Gta 6
wait(1)

-- Function to wait for character to respawn and then teleport
local function waitForRespawnAndTeleport()
    local newCharacter = player.Character or player.CharacterAdded:Wait()
    newCharacter:WaitForChild("HumanoidRootPart")
    teleportToPosition(originalPosition)
    print("Teleported back to original position: ", originalPosition)
end

-- Call the function to wait for respawn and teleport
waitForRespawnAndTeleport()

end)

tab.newButton("Become Lamp", "Become Lamp", function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Save current coordinates
local originalPosition = humanoidRootPart.CFrame
print("Original Position: ", originalPosition)

-- Function to teleport to a specific position
local function teleportToPosition(position)
    local currentCharacter = player.Character
    if currentCharacter then
        local currentHumanoidRootPart = currentCharacter:FindFirstChild("HumanoidRootPart")
        if currentHumanoidRootPart then
            currentHumanoidRootPart.CFrame = position
        end
    end
end

-- Teleport to the specified location

teleportToPosition(workspace.MainMapFolder.MainArea.Structures.Torii.CFrame)
print("Teleported to LampMorph")

-- Wait for 0.8 seconds
wait(0.8)

-- Spread the light without caring about bill
local prompt = workspace.MainMapFolder.MainArea.EasterEggs.LampTransform.Part.Transform.CustomPrompt
prompt:InputHoldBegin()
task.wait(prompt.HoldDuration)
prompt:InputHoldEnd()

-- Gta 6 releassd or not
wait(1)

-- Function to wait for character to respawn and then teleport
local function waitForRespawnAndTeleport()
    local newCharacter = player.Character or player.CharacterAdded:Wait()
    newCharacter:WaitForChild("HumanoidRootPart")
    teleportToPosition(originalPosition)
    print("Teleported back to original position: ", originalPosition)
end

-- Call the function to wait for respawn and teleport
waitForRespawnAndTeleport()
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

local function toggleScript(name, isOn)
    local playerFolder = workspace:FindFirstChild(Players.LocalPlayer.Name)
    if playerFolder then
        local script = playerFolder:FindFirstChild(name)
        if script and script:IsA("LocalScript") then
            script.Disabled = not isOn
            
            StarterGui:SetCore("SendNotification", {
                Title = name .. " Script",
                Text = isOn and "Enabled" or "Disabled",
                Duration = 3
            })
        else
            StarterGui:SetCore("SendNotification", {
                Title = "Error",
                Text = "Script '" .. name .. "' not found",
                Duration = 3
            })
        end
    else
        StarterGui:SetCore("SendNotification", {
            Title = "Error",
            Text = "Player folder not found in Workspace",
            Duration = 3
        })
    end
end

local runEnabled = false
tab.newButton("Toggle Run", "Enable/Disable Run Script", function()
    runEnabled = not runEnabled
    toggleScript("Run", runEnabled)
end)

local jumpCDEnabled = false
tab.newButton("Toggle Jump Cooldown", "Enable/Disable Jump Cooldown Script", function()
    jumpCDEnabled = not jumpCDEnabled
    toggleScript("JumpCD", jumpCDEnabled)
end)

-- Status indicators
local statusLabel = tab.newLabel("Script Status:")

local function updateStatus()
    local status = "Run: " .. (runEnabled and "ON" or "OFF") .. " | Jump CD: " .. (jumpCDEnabled and "ON" or "OFF")
    statusLabel.Text = "Script Status: " .. status
end

updateStatus()

game.RunService.Heartbeat:Connect(updateStatus)

while true do
    updatePlayerList()
    wait(0.1)
end
]]

-- Execute all scripts
local function executeAllScripts()
    -- Running Script 1
    loadstring(script1)()
    
    -- Running Script 2
    loadstring(script2)()
    
    -- Running Script 3
    loadstring(script3)()
    
    loadstring(script4)()
    
    loadstring(script5)()
    
    loadstring(script6)()
    
    loadstring(script7)()
    
    loadstring(script8)()
    
end

-- Run everything
executeAllScripts()
end)

addcmd('Aimbot',{'AimbotGUI'},function(args, speaker)
local OrionLib = loadstring(game:HttpGet(("https://raw.githubusercontent.com/Giangplay/Script/main/Orion_Library_PE_V2.lua")))()
local Window = OrionLib:MakeWindow({
    Name = "Universal Aimbot & ESP", 
    HidePremium = false,
    SaveConfig = true, 
    ConfigFolder = "OrionAimESP"
})

-- Services
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Teams = game:GetService("Teams")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- Core wait method switching
local useTaskWait = false
local waitMethod = wait
local taskWaitMethod = task.wait

-- Player and game references
local LocalPlayer = Players.LocalPlayer
local playerGui = LocalPlayer:WaitForChild("PlayerGui")
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Camera = Workspace.CurrentCamera
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- ESP Settings
local espSettings = {
    enemyTransparency = 0.5,
    playerTransparency = 0.3,
    showNames = false,
    showHealth = false,
    showDistance = false,
    nameSize = 14,
    healthSize = 12,
    distanceSize = 12,
    highlightColor = Color3.fromRGB(255, 0, 0),
    teamColor = Color3.fromRGB(0, 255, 0),
    enemyColor = Color3.fromRGB(255, 0, 0),
    useTeamColors = true,
    teamColoredText = true,
    forceTeamColor = true,
    forceEnemyColor = true
}

-- Aimbot settings
local aimbotSettings = {
    enabled = false,
    smartMode = false,
    legitMode = false,
    aimFlexibility = false,
    persistentAim = false,
    smoothing = 0.2,
    fovRadius = 125,
    fov360 = false,
    fov360True = false,
    minDelay = 100,
    maxDelay = 300,
    lockDistance = 1000,
    targetMode = "crosshair", -- "crosshair" or "localplayer"
    showCrosshair = true,
    showFOVCircle = true,
    targetExternalTargets = true,
    crosshairColor = Color3.fromRGB(255, 255, 255),
    crosshairX = 0,
    crosshairY = -30,
    crosshairSize = 10,
    crosshairType = "cross", -- "cross" or "circle"
    crosshairTransparency = 0,
    currentTarget = nil,
    isAimingAtTarget = false,
    noAimbotPlayers = false,
    predictFarRange = false,
    predictMovement = false,
    farRangeOffset = 0.1,
    movementPredictionFactor = 0.5,
    movementPredictionAhead = true,
    targetDetectionRate = 0.01,
    screenConversionRate = 0.01,
    fasterAimbot = false,
    useLerpMethod = false,
    autoShoot = false,
    shootButton = "MouseButton1",
    shootDelay = 0.01,
    externalTargetIsModel = true,
    lastTargetTime = 0,
    targetTimeout = 0.5,
    ignoreWalls = false,
    autoShootTolerance = 15, -- Increased tolerance for auto-shoot detection
    lastShootTime = 0,
    shootCooldown = 0.1
}

-- Team settings
local teamSettings = {
    teamCheckEnabled = false,
    targetEnemiesOnly = true,
    espTeammates = false,
    espEnemies = true,
    localPlayerTeam = nil,
    teamColors = {},
    teamWhitelist = {},
    playerWhitelist = {}
}

-- ShiftLock settings
local shiftLockSettings = {
    enabled = false,
    alwaysFixCamera = false,
    zoomDistance = 30,
    originalCameraMaxZoomDistance = nil,
    lastCameraPosition = nil,
    lastCameraLookAt = nil,
    smoothTransition = false,
    transitionSpeed = 0.1,
    referenceDirection = Vector3.new(0, 0, -1),
    lastMousePosition = Vector2.new(0, 0),
    alternativeMode = false,
    stabilizationFactor = 0.8,
    lastUpdateTime = 0,
    updateInterval = 0.1,
    fixedReferencePoint = nil,
    restrictCameraMovements = false
}

-- Highlight storage
local highlights = {}
local nameLabels = {}
local healthLabels = {}
local distanceLabels = {}

-- ESP states
local espEnabled = false
local playerEspEnabled = false
local noEspPlayers = false

-- External targets
local externalTargets = {}
local externalTargetLabels = {}
local targetNameInput = ""
local autoReaddTargets = false
local readdDelay = 2

-- Auto target system
local autoTargetSystem = {
    enabled = false,
    targets = {},
    delay = 2,
    lastUpdate = 0
}

-- Auto update connections
local espUpdateConnection
local aimbotConnection
local teamUpdateConnection
local readdTargetsConnection
local shiftLockConnection
local autoTargetConnection
local autoShootConnection
local fovCircle
local crosshairObj
local lastCameraPosition
local lastCharacterPosition
local cameraMovementConnection

-- Text box values storage
local textBoxValues = {
    autoTargetName = "",
    targetName = "",
    teamName = "",
    playerName = ""
}

-- Error handling
local errorCooldowns = {}

-- Function to get current wait method
local function getCurrentWait()
    return useTaskWait and taskWaitMethod or waitMethod
end

-- Function to show temporary message
local function showMessage(msg)
    OrionLib:MakeNotification({
        Name = "Notification",
        Content = msg,
        Image = "rbxassetid://4483345998",
        Time = 3
    })
end

-- Function to handle errors with cooldown
local function handleError(source, err)
    local currentTime = tick()
    if not errorCooldowns[source] or currentTime - errorCooldowns[source] > 5 then
        errorCooldowns[source] = currentTime
        warn("[" .. source .. "] Error: " .. tostring(err))
    end
end

-- Function to clear all highlights
local function clearHighlights()
    for target, highlight in pairs(highlights) do
        pcall(function()
            if highlight and highlight.Parent then
                highlight:Destroy()
            end
        end)
    end
    highlights = {}
end

-- Function to clear all name labels
local function clearNameLabels()
    for target, label in pairs(nameLabels) do
        pcall(function()
            if label and label.Parent then
                label:Destroy()
            end
        end)
    end
    nameLabels = {}
end

-- Function to clear all health labels
local function clearHealthLabels()
    for target, data in pairs(healthLabels) do
        pcall(function()
            if data and data.gui and data.gui.Parent then
                data.gui:Destroy()
            end
        end)
    end
    healthLabels = {}
end

-- Function to clear all distance labels
local function clearDistanceLabels()
    for target, data in pairs(distanceLabels) do
        pcall(function()
            if data and data.gui and data.gui.Parent then
                data.gui:Destroy()
            end
        end)
    end
    distanceLabels = {}
end

-- Function to get player team
local function getPlayerTeam(player)
    -- Method 1: Direct team property
    if player.Team then
        return player.Team
    end
    
    -- Method 2: Check attributes
    local teamAttribute = player:GetAttribute("Team")
    if teamAttribute then
        return teamAttribute
    end
    
    -- Method 3: Check character attributes
    if player.Character then
        local charTeamAttribute = player.Character:GetAttribute("Team")
        if charTeamAttribute then
            return charTeamAttribute
        end
    end
    
    return nil
end

-- Function to check if player is on the same team
local function isOnSameTeam(player)
    if not teamSettings.teamCheckEnabled then
        return false
    end
    
    local playerTeam = getPlayerTeam(player)
    local localTeam = teamSettings.localPlayerTeam
    
    -- Check if player is in whitelist
    if teamSettings.playerWhitelist[player.Name] or 
       teamSettings.playerWhitelist[player.DisplayName] then
        return true
    end
    
    -- Check if player's team is in whitelist
    if playerTeam and typeof(playerTeam) == "string" and teamSettings.teamWhitelist[playerTeam] then
        return true
    elseif playerTeam and typeof(playerTeam) == "Instance" and 
           playerTeam:IsA("Team") and teamSettings.teamWhitelist[playerTeam.Name] then
        return true
    end
    
    if playerTeam and localTeam then
        return playerTeam == localTeam
    end
    
    return false
end

-- Function to get team color
local function getTeamColor(player)
    local isTeammate = isOnSameTeam(player)
    
    -- Force team/enemy colors if enabled
    if espSettings.forceTeamColor and isTeammate then
        return espSettings.teamColor
    elseif espSettings.forceEnemyColor and not isTeammate then
        return espSettings.enemyColor
    end
    
    -- Otherwise use actual team colors if available
    local playerTeam = getPlayerTeam(player)
    
    if playerTeam and typeof(playerTeam) == "Instance" and playerTeam:IsA("Team") then
        return playerTeam.TeamColor.Color
    elseif playerTeam and teamSettings.teamColors[playerTeam] then
        return teamSettings.teamColors[playerTeam]
    end
    
    return isTeammate and espSettings.teamColor or espSettings.enemyColor
end

-- Function to get text color based on team
local function getTextColor(player)
    if not teamSettings.teamCheckEnabled or not espSettings.teamColoredText then
        return Color3.fromRGB(255, 255, 255)
    end
    
    return getTeamColor(player)
end

-- Function to update local player team
local function updateLocalPlayerTeam()
    teamSettings.localPlayerTeam = getPlayerTeam(LocalPlayer)
end

-- Function to create name label
local function createNameLabel(target, name, player)
    -- Remove existing label if it exists
    pcall(function()
        if nameLabels[target] and nameLabels[target].Parent then
            nameLabels[target]:Destroy()
            nameLabels[target] = nil
        end
    end)

    local head = target:FindFirstChild("Head") or target:FindFirstChild("HumanoidRootPart") or target
    if not head then return end

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Size = UDim2.new(0, 100, 0, 20)
    billboardGui.StudsOffset = Vector3.new(0, 2, 0)
    billboardGui.Adornee = head
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = head

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = player and getTextColor(player) or Color3.fromRGB(255, 255, 255)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    nameLabel.TextSize = espSettings.nameSize
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.Text = name
    nameLabel.Parent = billboardGui

    nameLabels[target] = billboardGui
    return billboardGui
end

-- Function to create health label
local function createHealthLabel(target, player)
    -- Remove existing label if it exists
    pcall(function()
        if healthLabels[target] and healthLabels[target].gui and healthLabels[target].gui.Parent then
            healthLabels[target].gui:Destroy()
            healthLabels[target] = nil
        end
    end)

    local humanoid = target:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local head = target:FindFirstChild("Head") or target:FindFirstChild("HumanoidRootPart") or target
    if not head then return end

    local yOffset = espSettings.showNames and 3.5 or 2
    
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Size = UDim2.new(0, 80, 0, 15)
    billboardGui.StudsOffset = Vector3.new(0, yOffset, 0)
    billboardGui.Adornee = head
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = head

    local healthLabel = Instance.new("TextLabel")
    healthLabel.Size = UDim2.new(1, 0, 1, 0)
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    healthLabel.TextStrokeTransparency = 0
    healthLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    healthLabel.TextSize = espSettings.healthSize
    healthLabel.Font = Enum.Font.SourceSans
    healthLabel.Text = math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
    healthLabel.Parent = billboardGui

    healthLabels[target] = {
        gui = billboardGui, 
        label = healthLabel, 
        humanoid = humanoid,
        player = player
    }
    return billboardGui
end

-- Function to create distance label
local function createDistanceLabel(target, player)
    -- Remove existing label if it exists
    pcall(function()
        if distanceLabels[target] and distanceLabels[target].gui and distanceLabels[target].gui.Parent then
            distanceLabels[target].gui:Destroy()
            distanceLabels[target] = nil
        end
    end)

    local head = target:FindFirstChild("Head") or target:FindFirstChild("HumanoidRootPart") or target
    if not head then return end

    local yOffset = 2
    if espSettings.showNames then yOffset = yOffset + 1.5 end
    if espSettings.showHealth then yOffset = yOffset + 1.5 end
    
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Size = UDim2.new(0, 80, 0, 15)
    billboardGui.StudsOffset = Vector3.new(0, yOffset, 0)
    billboardGui.Adornee = head
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = head

    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Size = UDim2.new(1, 0, 1, 0)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = player and getTextColor(player) or Color3.fromRGB(255, 255, 255)
    distanceLabel.TextStrokeTransparency = 0
    distanceLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    distanceLabel.TextSize = espSettings.distanceSize
    distanceLabel.Font = Enum.Font.SourceSans
    distanceLabel.Text = "0 studs"
    distanceLabel.Parent = billboardGui

    distanceLabels[target] = {
        gui = billboardGui, 
        label = distanceLabel,
        player = player
    }
    return billboardGui
end

-- Function to update distance labels
local function updateDistanceLabels()
    if not espSettings.showDistance or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local playerPos = LocalPlayer.Character.HumanoidRootPart.Position
    
    for target, data in pairs(distanceLabels) do
        pcall(function()
            if data.label and data.gui and data.gui.Parent and data.gui.Adornee then
                local targetPos = data.gui.Adornee.Position
                local distance = (playerPos - targetPos).Magnitude
                data.label.Text = math.floor(distance) .. " studs"
                
                -- Update text color if team settings changed
                if data.player and teamSettings.teamCheckEnabled and espSettings.teamColoredText then
                    data.label.TextColor3 = getTextColor(data.player)
                end
            end
        end)
    end
end

-- Function to update ESP highlights
local function updateESP()
    if not espEnabled then
        clearHighlights()
        clearNameLabels()
        clearHealthLabels()
        clearDistanceLabels()
        return
    end

    -- Update player ESP if enabled
    if playerEspEnabled and not noEspPlayers then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local character = player.Character
                
                -- Check team settings
                local isTeammate = isOnSameTeam(player)
                local shouldEsp = (isTeammate and teamSettings.espTeammates) or 
                                 (not isTeammate and teamSettings.espEnemies) or 
                                 (not teamSettings.teamCheckEnabled)
                
                if shouldEsp then
                    -- Get appropriate color based on team
                    local highlightColor = espSettings.highlightColor
                    if teamSettings.teamCheckEnabled and espSettings.useTeamColors then
                        highlightColor = getTeamColor(player)
                    end
                    
                    -- Create or update highlight
                    pcall(function()
                        if not highlights[character] or not highlights[character].Parent then
                            local highlight = Instance.new("Highlight")
                            highlight.Adornee = character
                            highlight.FillColor = highlightColor
                            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                            highlight.FillTransparency = espSettings.playerTransparency
                            highlight.OutlineTransparency = 0
                            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                            highlight.Parent = character
                            highlights[character] = highlight
                        else
                            highlights[character].FillColor = highlightColor
                            highlights[character].FillTransparency = espSettings.playerTransparency
                        end
                    end)

                    -- Add name label if enabled
                    if espSettings.showNames then
                        pcall(function()
                            if not nameLabels[character] or not nameLabels[character].Parent then
                                createNameLabel(character, player.DisplayName or player.Name, player)
                            else
                                -- Update text color if team settings changed
                                local label = nameLabels[character]:FindFirstChildOfClass("TextLabel")
                                if label and teamSettings.teamCheckEnabled and espSettings.teamColoredText then
                                    label.TextColor3 = getTextColor(player)
                                end
                            end
                        end)
                    elseif nameLabels[character] then
                        pcall(function()
                            nameLabels[character]:Destroy()
                            nameLabels[character] = nil
                        end)
                    end

                    -- Add health label if enabled
                    if espSettings.showHealth then
                        pcall(function()
                            if not healthLabels[character] or not healthLabels[character].gui or not healthLabels[character].gui.Parent then
                                createHealthLabel(character, player)
                            end
                        end)
                    elseif healthLabels[character] then
                        pcall(function()
                            if healthLabels[character].gui then
                                healthLabels[character].gui:Destroy()
                            end
                            healthLabels[character] = nil
                        end)
                    end
                    
                    -- Add distance label if enabled
                    if espSettings.showDistance then
                        pcall(function()
                            if not distanceLabels[character] or not distanceLabels[character].gui or not distanceLabels[character].gui.Parent then
                                createDistanceLabel(character, player)
                            end
                        end)
                    elseif distanceLabels[character] then
                        pcall(function()
                            if distanceLabels[character].gui then
                                distanceLabels[character].gui:Destroy()
                            end
                            distanceLabels[character] = nil
                        end)
                    end
                elseif highlights[character] then
                    -- Remove ESP if team settings don't allow it
                    pcall(function()
                        highlights[character]:Destroy()
                        highlights[character] = nil
                    end)
                    
                    pcall(function()
                        if nameLabels[character] then
                            nameLabels[character]:Destroy()
                            nameLabels[character] = nil
                        end
                    end)
                    
                    pcall(function()
                        if healthLabels[character] and healthLabels[character].gui then
                            healthLabels[character].gui:Destroy()
                            healthLabels[character] = nil
                        end
                    end)
                    
                    pcall(function()
                        if distanceLabels[character] and distanceLabels[character].gui then
                            distanceLabels[character].gui:Destroy()
                            distanceLabels[character] = nil
                        end
                    end)
                end
            end
        end
    end

    -- Update external targets
    for target, _ in pairs(externalTargets) do
        pcall(function()
            if target and (target:IsA("Model") or target:IsA("BasePart")) and target.Parent then
                if not highlights[target] or not highlights[target].Parent then
                    local highlight = Instance.new("Highlight")
                    highlight.Adornee = target
                    highlight.FillColor = espSettings.highlightColor
                    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                    highlight.FillTransparency = espSettings.enemyTransparency
                    highlight.OutlineTransparency = 0
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    highlight.Parent = target
                    highlights[target] = highlight
                else
                    highlights[target].FillColor = espSettings.highlightColor
                    highlights[target].FillTransparency = espSettings.enemyTransparency
                end

                -- Add name label if enabled
                if espSettings.showNames then
                    if not nameLabels[target] or not nameLabels[target].Parent then
                        createNameLabel(target, target.Name)
                    end
                elseif nameLabels[target] then
                    nameLabels[target]:Destroy()
                    nameLabels[target] = nil
                end

                -- Add health label if enabled
                if espSettings.showHealth then
                    if not healthLabels[target] or not healthLabels[target].gui or not healthLabels[target].gui.Parent then
                        createHealthLabel(target)
                    end
                elseif healthLabels[target] and healthLabels[target].gui then
                    healthLabels[target].gui:Destroy()
                    healthLabels[target] = nil
                end
                
                -- Add distance label if enabled
                if espSettings.showDistance then
                    if not distanceLabels[target] or not distanceLabels[target].gui or not distanceLabels[target].gui.Parent then
                        createDistanceLabel(target)
                    end
                elseif distanceLabels[target] and distanceLabels[target].gui then
                    distanceLabels[target].gui:Destroy()
                    distanceLabels[target] = nil
                end
            elseif highlights[target] then
                -- Target no longer exists, remove it
                highlights[target]:Destroy()
                highlights[target] = nil
                
                if nameLabels[target] then
                    nameLabels[target]:Destroy()
                    nameLabels[target] = nil
                end
                
                if healthLabels[target] and healthLabels[target].gui then
                    healthLabels[target].gui:Destroy()
                    healthLabels[target] = nil
                end
                
                if distanceLabels[target] and distanceLabels[target].gui then
                    distanceLabels[target].gui:Destroy()
                    distanceLabels[target] = nil
                end
                
                -- Remove from external targets if auto-readd is not enabled
                if not autoReaddTargets then
                    externalTargets[target] = nil
                end
            end
        end)
    end
end

-- Function to update health labels
local function updateHealthLabels()
    for target, data in pairs(healthLabels) do
        pcall(function()
            if data.humanoid and data.humanoid.Parent and data.label then
                data.label.Text = math.floor(data.humanoid.Health) .. "/" .. math.floor(data.humanoid.MaxHealth)
                
                -- Color based on health percentage
                local healthPercent = data.humanoid.Health / data.humanoid.MaxHealth
                if healthPercent > 0.6 then
                    data.label.TextColor3 = Color3.fromRGB(0, 255, 0)
                elseif healthPercent > 0.3 then
                    data.label.TextColor3 = Color3.fromRGB(255, 255, 0)
                else
                    data.label.TextColor3 = Color3.fromRGB(255, 0, 0)
                end
            end
        end)
    end
end

-- Function to safely get position from a part
local function safeGetPosition(part)
    if not part then return nil end
    
    local success, position = pcall(function()
        return part.Position
    end)
    
    if success then
        return position
    else
        return nil
    end
end

-- Function to check if target is visible
local function isPartVisible(part)
    if not part then return false end
    
    -- Get position safely
    local partPosition = safeGetPosition(part)
    if not partPosition then return false end
    
    -- If ignoring walls, always return true
    if aimbotSettings.ignoreWalls then return true end
    
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}

    local rayDirection = (partPosition - Camera.CFrame.Position)
    local rayResult = Workspace:Raycast(Camera.CFrame.Position, rayDirection, rayParams)

    if rayResult then
        return rayResult.Instance:IsDescendantOf(part.Parent)
    end
    return false
end

-- Function to get best target part (Smart Mode)
local function getBestTargetPart(target)
    if not target then return nil end
    
    local parts = {"Head", "Torso", "UpperTorso", "LowerTorso", "Left Arm", "Right Arm", "LeftUpperArm", "RightUpperArm", "Left Leg", "Right Leg", "LeftUpperLeg", "RightUpperLeg"}
    
    for _, partName in ipairs(parts) do
        local part = target:FindFirstChild(partName)
        if part and isPartVisible(part) then
            return part
        end
    end
    
    -- If no visible parts found but ignoreWalls is enabled, return any part
    if aimbotSettings.ignoreWalls or aimbotSettings.fov360True then
        for _, partName in ipairs(parts) do
            local part = target:FindFirstChild(partName)
            if part then
                return part
            end
        end
    end
    
    return nil
end

-- Function to check if target is in FOV
local function isInFOV(targetPosition)
    if aimbotSettings.fov360 or aimbotSettings.fov360True then
        return true
    end
    
    local mousePos = Vector2.new(
        Camera.ViewportSize.X / 2 + aimbotSettings.crosshairX, 
        Camera.ViewportSize.Y / 2 + aimbotSettings.crosshairY
    )
    
    local targetPos, onScreen = Camera:WorldToViewportPoint(targetPosition)
    
    if onScreen or aimbotSettings.fov360True then
        local screenPos = Vector2.new(targetPos.X, targetPos.Y)
        local dist = (screenPos - mousePos).Magnitude
        return dist <= aimbotSettings.fovRadius
    end
    return false
end

-- Function to check if currently aiming at target
local function isAimingAtTarget(target)
    if not target then return false end
    
    local mousePos = Vector2.new(
        Camera.ViewportSize.X / 2 + aimbotSettings.crosshairX, 
        Camera.ViewportSize.Y / 2 + aimbotSettings.crosshairY
    )
    
    -- Check all parts of the target
    for _, part in pairs(target:GetChildren()) do
        if part:IsA("BasePart") then
            local partPos, onScreen = Camera:WorldToViewportPoint(part.Position)
            if onScreen then
                local screenPos = Vector2.new(partPos.X, partPos.Y)
                local dist = (screenPos - mousePos).Magnitude
                
                -- If crosshair is on any part of the target
                if dist <= aimbotSettings.crosshairSize * 1.5 then
                    return true
                end
            end
        end
    end
    
    return false
end

-- Function to get target position with prediction
local function getTargetPositionWithPrediction(target)
    if not target then return nil end
    
    -- Try multiple methods to find a valid target position
    local targetPosition
    local targetPart
    
    -- Method 1: Try to find common humanoid parts
    if target:IsA("Model") then
        if aimbotSettings.smartMode then
            targetPart = getBestTargetPart(target)
        else
            targetPart = target:FindFirstChild("Head") or target:FindFirstChild("HumanoidRootPart") or target:FindFirstChild("Torso")
        end
        
        if targetPart then
            targetPosition = safeGetPosition(targetPart)
        end
    end
    
    -- Method 2: If it's a BasePart, use its position directly
    if not targetPosition and target:IsA("BasePart") then
        targetPosition = safeGetPosition(target)
    end
    
    -- Method 3: Try to use PrimaryPart
    if not targetPosition and target:IsA("Model") and target.PrimaryPart then
        targetPosition = safeGetPosition(target.PrimaryPart)
    end
    
    -- Method 4: Use bounding box center if it's a model
    if not targetPosition and target:IsA("Model") then
        local success, boundingBox = pcall(function() return target:GetBoundingBox() end)
        if success then
            targetPosition = boundingBox.Position
        end
    end
    
    -- Method 5: Try to find any BasePart in the model
    if not targetPosition and target:IsA("Model") then
        for _, part in pairs(target:GetDescendants()) do
            if part:IsA("BasePart") then
                targetPosition = safeGetPosition(part)
                if targetPosition then
                    targetPart = part
                    break
                end
            end
        end
    end
    
    if not targetPosition then
        return nil
    end
    
    -- Get velocity for prediction if available
    local targetVelocity = Vector3.new(0, 0, 0)
    
    if targetPart and targetPart:IsA("BasePart") then
        targetVelocity = targetPart.Velocity
    elseif target:IsA("Model") and target.PrimaryPart and target.PrimaryPart:IsA("BasePart") then
        targetVelocity = target.PrimaryPart.Velocity
    elseif target:IsA("BasePart") then
        targetVelocity = target.Velocity
    end
    
    local distance = (Camera.CFrame.Position - targetPosition).Magnitude
    
    -- Apply far range prediction (bullet drop)
    if aimbotSettings.predictFarRange and distance > 100 then
        local dropFactor = math.min(distance / 1000, 1) * aimbotSettings.farRangeOffset
        targetPosition = targetPosition + Vector3.new(0, dropFactor * distance, 0)
    end
    
    -- Apply movement prediction
    if aimbotSettings.predictMovement then
        local predictionOffset = targetVelocity * aimbotSettings.movementPredictionFactor
        
        -- Adjust prediction direction based on setting
        if not aimbotSettings.movementPredictionAhead then
            predictionOffset = predictionOffset * -1
        end
        
        targetPosition = targetPosition + predictionOffset
    end
    
    return targetPosition
end

-- Function to update FOV circle
local function updateFOVCircle()
    if fovCircle then
        fovCircle.Size = UDim2.new(0, aimbotSettings.fovRadius * 2, 0, aimbotSettings.fovRadius * 2)
        fovCircle.Position = UDim2.new(0.5, aimbotSettings.crosshairX, 0.5, aimbotSettings.crosshairY)
        fovCircle.Visible = aimbotSettings.enabled and aimbotSettings.showFOVCircle and not (aimbotSettings.fov360 or aimbotSettings.fov360True)
    end
end

-- Function to create FOV circle
local function createFOVCircle()
    local gui = Instance.new("ScreenGui")
    gui.Name = "AimThresholdCircle"
    gui.ResetOnSpawn = false
    gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    fovCircle = Instance.new("Frame")
    fovCircle.Size = UDim2.new(0, aimbotSettings.fovRadius * 2, 0, aimbotSettings.fovRadius * 2)
    fovCircle.Position = UDim2.new(0.5, aimbotSettings.crosshairX, 0.5, aimbotSettings.crosshairY)
    fovCircle.AnchorPoint = Vector2.new(0.5, 0.5)
    fovCircle.BackgroundTransparency = 1
    fovCircle.Visible = aimbotSettings.enabled and aimbotSettings.showFOVCircle and not (aimbotSettings.fov360 or aimbotSettings.fov360True)

    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(1, 0)
    uiCorner.Parent = fovCircle

    local outline = Instance.new("UIStroke")
    outline.Thickness = 1
    outline.Color = Color3.fromRGB(255, 255, 255)
    outline.Parent = fovCircle

    fovCircle.Parent = gui
    return gui
end

-- Function to create crosshair
local function createCrosshair()
    local gui = Instance.new("ScreenGui")
    gui.Name = "AimCrosshair"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local crosshairFrame = Instance.new("Frame")
    crosshairFrame.Size = UDim2.new(0, 20, 0, 20)
    crosshairFrame.Position = UDim2.new(0.5, aimbotSettings.crosshairX, 0.5, aimbotSettings.crosshairY)
    crosshairFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    crosshairFrame.BackgroundTransparency = 1
    crosshairFrame.Visible = aimbotSettings.showCrosshair
    crosshairFrame.Parent = gui

    if aimbotSettings.crosshairType == "cross" then
        local horizontalLine = Instance.new("Frame")
        horizontalLine.Size = UDim2.new(0, aimbotSettings.crosshairSize, 0, 2)
        horizontalLine.Position = UDim2.new(0.5, 0, 0.5, 0)
        horizontalLine.AnchorPoint = Vector2.new(0.5, 0.5)
        horizontalLine.BackgroundColor3 = aimbotSettings.crosshairColor
        horizontalLine.BackgroundTransparency = aimbotSettings.crosshairTransparency
        horizontalLine.BorderSizePixel = 0
        horizontalLine.ZIndex = 10
        horizontalLine.Parent = crosshairFrame

        local verticalLine = Instance.new("Frame")
        verticalLine.Size = UDim2.new(0, 2, 0, aimbotSettings.crosshairSize)
        verticalLine.Position = UDim2.new(0.5, 0, 0.5, 0)
        verticalLine.AnchorPoint = Vector2.new(0.5, 0.5)
        verticalLine.BackgroundColor3 = aimbotSettings.crosshairColor
        verticalLine.BackgroundTransparency = aimbotSettings.crosshairTransparency
        verticalLine.BorderSizePixel = 0
        verticalLine.ZIndex = 10
        verticalLine.Parent = crosshairFrame

        return {
            gui = gui, 
            frame = crosshairFrame, 
            horizontal = horizontalLine, 
            vertical = verticalLine, 
            circle = nil
        }
    else -- circle crosshair
        local circleFrame = Instance.new("Frame")
        circleFrame.Size = UDim2.new(0, aimbotSettings.crosshairSize, 0, aimbotSettings.crosshairSize)
        circleFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        circleFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        circleFrame.BackgroundColor3 = aimbotSettings.crosshairColor
        circleFrame.BackgroundTransparency = aimbotSettings.crosshairTransparency
        circleFrame.BorderSizePixel = 0
        circleFrame.ZIndex = 10
        circleFrame.Parent = crosshairFrame

        local uiCorner = Instance.new("UICorner")
        uiCorner.CornerRadius = UDim.new(1, 0)
        uiCorner.Parent = circleFrame

        return {
            gui = gui, 
            frame = crosshairFrame, 
            horizontal = nil, 
            vertical = nil, 
            circle = circleFrame
        }
    end
end

-- Function to update crosshair
local function updateCrosshair(crosshair)
    if not crosshair or not crosshair.frame then 
        -- Recreate crosshair if it doesn't exist
        crosshairObj = createCrosshair()
        crosshair = crosshairObj
        if not crosshair or not crosshair.frame then
            return
        end
    end
    
    crosshair.frame.Position = UDim2.new(0.5, aimbotSettings.crosshairX, 0.5, aimbotSettings.crosshairY)
    crosshair.frame.Visible = aimbotSettings.showCrosshair
    
    if aimbotSettings.crosshairType == "cross" then
        if crosshair.horizontal and crosshair.vertical then
            crosshair.horizontal.BackgroundColor3 = aimbotSettings.crosshairColor
            crosshair.vertical.BackgroundColor3 = aimbotSettings.crosshairColor
            crosshair.horizontal.BackgroundTransparency = aimbotSettings.crosshairTransparency
            crosshair.vertical.BackgroundTransparency = aimbotSettings.crosshairTransparency
            crosshair.horizontal.Size = UDim2.new(0, aimbotSettings.crosshairSize, 0, 2)
            crosshair.vertical.Size = UDim2.new(0, 2, 0, aimbotSettings.crosshairSize)
        else
            -- Recreate cross if it doesn't exist
            local horizontalLine = Instance.new("Frame")
            horizontalLine.Size = UDim2.new(0, aimbotSettings.crosshairSize, 0, 2)
            horizontalLine.Position = UDim2.new(0.5, 0, 0.5, 0)
            horizontalLine.AnchorPoint = Vector2.new(0.5, 0.5)
            horizontalLine.BackgroundColor3 = aimbotSettings.crosshairColor
            horizontalLine.BackgroundTransparency = aimbotSettings.crosshairTransparency
            horizontalLine.BorderSizePixel = 0
            horizontalLine.ZIndex = 10
            horizontalLine.Parent = crosshair.frame

            local verticalLine = Instance.new("Frame")
            verticalLine.Size = UDim2.new(0, 2, 0, aimbotSettings.crosshairSize)
            verticalLine.Position = UDim2.new(0.5, 0, 0.5, 0)
            verticalLine.AnchorPoint = Vector2.new(0.5, 0.5)
            verticalLine.BackgroundColor3 = aimbotSettings.crosshairColor
            verticalLine.BackgroundTransparency = aimbotSettings.crosshairTransparency
            verticalLine.BorderSizePixel = 0
            verticalLine.ZIndex = 10
            verticalLine.Parent = crosshair.frame
            
            crosshair.horizontal = horizontalLine
            crosshair.vertical = verticalLine
        end
        
        -- Hide circle if it exists
        if crosshair.circle then
            crosshair.circle.Visible = false
        end
    else -- circle crosshair
        if crosshair.horizontal and crosshair.vertical then
            crosshair.horizontal.Visible = false
            crosshair.vertical.Visible = false
        end
        
        if crosshair.circle then
            crosshair.circle.Visible = true
            crosshair.circle.BackgroundColor3 = aimbotSettings.crosshairColor
            crosshair.circle.BackgroundTransparency = aimbotSettings.crosshairTransparency
            crosshair.circle.Size = UDim2.new(0, aimbotSettings.crosshairSize, 0, aimbotSettings.crosshairSize)
        else
            -- Create circle if it doesn't exist
            local circleFrame = Instance.new("Frame")
            circleFrame.Size = UDim2.new(0, aimbotSettings.crosshairSize, 0, aimbotSettings.crosshairSize)
            circleFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
            circleFrame.AnchorPoint = Vector2.new(0.5, 0.5)
            circleFrame.BackgroundColor3 = aimbotSettings.crosshairColor
            circleFrame.BackgroundTransparency = aimbotSettings.crosshairTransparency
            circleFrame.BorderSizePixel = 0
            circleFrame.ZIndex = 10
            circleFrame.Parent = crosshair.frame

            local uiCorner = Instance.new("UICorner")
            uiCorner.CornerRadius = UDim.new(1, 0)
            uiCorner.Parent = circleFrame
            
            crosshair.circle = circleFrame
        end
    end
end

-- Function to get closest target based on targeting mode
local function getClosestTarget()
    local targets = {}
    
    -- Add players to targets if not disabled
    if not aimbotSettings.noAimbotPlayers then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    -- Check team settings
                    local isTeammate = isOnSameTeam(player)
                    if (not teamSettings.teamCheckEnabled) or 
                       (teamSettings.teamCheckEnabled and teamSettings.targetEnemiesOnly and not isTeammate) or
                       (teamSettings.teamCheckEnabled and not teamSettings.targetEnemiesOnly) then
                        table.insert(targets, player.Character)
                    end
                end
            end
        end
    end
    
    -- Add external targets if enabled
    if aimbotSettings.targetExternalTargets then
        for target, _ in pairs(externalTargets) do
            if target and target.Parent then
                local isValid = false
                
                if aimbotSettings.externalTargetIsModel then
                    -- Accept both models and parts
                    isValid = target:IsA("Model") or target:IsA("BasePart")
                else
                    -- Only accept parts
                    isValid = target:IsA("BasePart")
                end
                
                if isValid then
                    local humanoid = target:FindFirstChildOfClass("Humanoid")
                    if not humanoid or (humanoid and humanoid.Health > 0) then
                        table.insert(targets, target)
                    end
                end
            end
        end
    end
    
    local closestTarget = nil
    local closestDistance = math.huge
    
    -- Check if we're currently aiming at the current target
    if aimbotSettings.currentTarget and aimbotSettings.aimFlexibility then
        aimbotSettings.isAimingAtTarget = isAimingAtTarget(aimbotSettings.currentTarget)
        
        -- If we're still aiming at the current target, keep using it
        if aimbotSettings.isAimingAtTarget then
            return aimbotSettings.currentTarget
        end
    end
    
    -- Check if we should keep the current target (persistent aim)
    if aimbotSettings.persistentAim and aimbotSettings.currentTarget and 
       tick() - aimbotSettings.lastTargetTime < aimbotSettings.targetTimeout then
        -- Make sure the target still exists and is valid
        if aimbotSettings.currentTarget.Parent then
            local targetPosition = getTargetPositionWithPrediction(aimbotSettings.currentTarget)
            if targetPosition and isInFOV(targetPosition) then
                return aimbotSettings.currentTarget
            end
        end
    end
    
    if aimbotSettings.targetMode == "crosshair" then
        -- Closest to crosshair
        local mousePos = Vector2.new(
            Camera.ViewportSize.X / 2 + aimbotSettings.crosshairX, 
            Camera.ViewportSize.Y / 2 + aimbotSettings.crosshairY
        )
        
        for _, target in ipairs(targets) do
            local targetPosition = getTargetPositionWithPrediction(target)
            
            if targetPosition then
                -- Get a reference part for visibility check
                local refPart
                if target:IsA("BasePart") then
                    refPart = target
                else
                    refPart = target:FindFirstChildOfClass("BasePart") or 
                              target:FindFirstChild("HumanoidRootPart") or 
                              target:FindFirstChild("Head") or 
                              target:FindFirstChild("Torso")
                end
                
                local isVisible = aimbotSettings.ignoreWalls or aimbotSettings.fov360True or (refPart and isPartVisible(refPart))
                local inFov = isInFOV(targetPosition)
                
                if (isVisible or aimbotSettings.fov360True) and inFov then
                    local targetPos, onScreen = Camera:WorldToViewportPoint(targetPosition)
                    
                    if onScreen or aimbotSettings.fov360True then
                        local screenPos = Vector2.new(targetPos.X, targetPos.Y)
                        local dist = (screenPos - mousePos).Magnitude
                        local camDist = (Camera.CFrame.Position - targetPosition).Magnitude
                        
                        if camDist <= aimbotSettings.lockDistance and dist < closestDistance then
                            closestTarget = target
                            closestDistance = dist
                        end
                    end
                end
            end
        end
    else
        -- Closest to LocalPlayer
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            for _, target in ipairs(targets) do
                local targetPosition = getTargetPositionWithPrediction(target)
                
                if targetPosition then
                    -- Get a reference part for visibility check
                    local refPart
                    if target:IsA("BasePart") then
                        refPart = target
                    else
                        refPart = target:FindFirstChildOfClass("BasePart") or 
                                  target:FindFirstChild("HumanoidRootPart") or 
                                  target:FindFirstChild("Head") or 
                                  target:FindFirstChild("Torso")
                    end
                    
                    local isVisible = aimbotSettings.ignoreWalls or aimbotSettings.fov360True or (refPart and isPartVisible(refPart))
                    local inFov = isInFOV(targetPosition)
                    
                    if (isVisible or aimbotSettings.fov360True) and inFov then
                        local dist = (LocalPlayer.Character.HumanoidRootPart.Position - targetPosition).Magnitude
                        
                        if dist <= aimbotSettings.lockDistance and dist < closestDistance then
                            closestTarget = target
                            closestDistance = dist
                        end
                    end
                end
            end
        end
    end
    
    -- Update current target and timestamp
    if closestTarget then
        aimbotSettings.currentTarget = closestTarget
        aimbotSettings.lastTargetTime = tick()
    else
        aimbotSettings.currentTarget = nil
    end
    
    return closestTarget
end

-- Function to check if crosshair is on target for auto-shoot
local function isCrosshairOnTarget(target)
    if not target then return false end
    
    local mousePos = Vector2.new(
        Camera.ViewportSize.X / 2 + aimbotSettings.crosshairX, 
        Camera.ViewportSize.Y / 2 + aimbotSettings.crosshairY
    )
    
    -- Try to get the target position
    local targetPosition = getTargetPositionWithPrediction(target)
    
    if targetPosition then
        local screenPos, onScreen = Camera:WorldToViewportPoint(targetPosition)
        if onScreen then
            local targetScreenPos = Vector2.new(screenPos.X, screenPos.Y)
            local distance = (targetScreenPos - mousePos).Magnitude
            
            -- Check if target is within crosshair bounds with increased tolerance
            return distance <= aimbotSettings.autoShootTolerance
        end
    end
    
    return false
end

-- Function to simulate button press
local function simulateButtonPress(button)
    -- Check cooldown
    local currentTime = tick()
    if currentTime - aimbotSettings.lastShootTime < aimbotSettings.shootCooldown then
        return
    end
    
    aimbotSettings.lastShootTime = currentTime
    
    if button == "MouseButton1" then
        -- Method 1: VirtualInputManager
        pcall(function()
            VirtualInputManager:SendMouseButtonEvent(
                Camera.ViewportSize.X / 2 + aimbotSettings.crosshairX,
                Camera.ViewportSize.Y / 2 + aimbotSettings.crosshairY,
                0, true, game, 0
            )
            wait(aimbotSettings.shootDelay)
            VirtualInputManager:SendMouseButtonEvent(
                Camera.ViewportSize.X / 2 + aimbotSettings.crosshairX,
                Camera.ViewportSize.Y / 2 + aimbotSettings.crosshairY,
                0, false, game, 0
            )
        end)
        
        -- Method 2: mouse1click (fallback)
        pcall(function()
            mouse1click()
        end)
    elseif button == "MouseButton2" then
        -- Method 1: VirtualInputManager
        pcall(function()
            VirtualInputManager:SendMouseButtonEvent(
                Camera.ViewportSize.X / 2 + aimbotSettings.crosshairX,
                Camera.ViewportSize.Y / 2 + aimbotSettings.crosshairY,
                1, true, game, 0
            )
            wait(aimbotSettings.shootDelay)
            VirtualInputManager:SendMouseButtonEvent(
                Camera.ViewportSize.X / 2 + aimbotSettings.crosshairX,
                Camera.ViewportSize.Y / 2 + aimbotSettings.crosshairY,
                1, false, game, 0
            )
        end)
        
        -- Method 2: mouse2click (fallback)
        pcall(function()
            mouse2click()
        end)
    else
        -- Try to use VirtualInputManager for other keys
        pcall(function()
            local keyCode = Enum.KeyCode[button]
            if keyCode then
                VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
                wait(aimbotSettings.shootDelay)
                VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
            end
        end)
    end
end

-- Function to check if an instance is a valid ESP target
local function isValidEspTarget(instance)
    if not instance then return false end
    
    -- Check if it's a model with humanoid parts
    if instance:IsA("Model") then
        return instance:FindFirstChild("HumanoidRootPart") or 
               instance:FindFirstChild("Head") or 
               instance:FindFirstChildOfClass("Humanoid")
    end
    
    -- Check if it's a BasePart
    if instance:IsA("BasePart") then
        return true
    end
    
    return false
end

-- Function to recursively find valid ESP targets
local function findValidTargetsRecursive(parent, targets, depth)
    depth = depth or 0
    if depth > 10 then return end -- Prevent infinite recursion
    
    for _, child in ipairs(parent:GetChildren()) do
        if isValidEspTarget(child) then
            table.insert(targets, child)
        end
        
        -- Always recursively check children regardless of type
        findValidTargetsRecursive(child, targets, depth + 1)
    end
end

-- Function to resolve path to an instance
local function resolvePath(path)
    -- Handle different path formats
    if typeof(path) == "string" then
        -- Try direct reference first (workspace.Path.To.Object)
        local parts = path:split(".")
        local current = game
        
        -- If path starts with workspace/game, adjust accordingly
        if parts[1]:lower() == "workspace" then
            current = workspace
            table.remove(parts, 1)
        elseif parts[1]:lower() == "game" then
            table.remove(parts, 1)
        end
        
        -- Navigate through path
        for _, part in ipairs(parts) do
            if current then
                current = current:FindFirstChild(part)
            else
                break
            end
        end
        
        return current
    end
    
    return nil
end

-- Function to find target in workspace by name or path
local function findTargetByName(name)
    local foundTargets = {}
    
    -- Try direct path resolution first
    local directTarget = resolvePath(name)
    if directTarget and (directTarget:IsA("Model") or directTarget:IsA("BasePart")) then
        table.insert(foundTargets, directTarget)
        return foundTargets
    end
    
    -- If direct path didn't work, search in workspace
    for _, obj in ipairs(workspace:GetDescendants()) do
        if (obj:IsA("Model") or obj:IsA("BasePart")) and obj.Name:lower():find(name:lower()) then
            table.insert(foundTargets, obj)
        end
    end
    
    return foundTargets
end

-- Function to add external target
local function addExternalTarget(name)
    local targets = findTargetByName(name)
    
    if #targets > 0 then
        local addedCount = 0
        for _, target in ipairs(targets) do
            if not externalTargets[target] then
                externalTargets[target] = true
                addedCount = addedCount + 1
            end
        end
        
        updateESP()
        return true, addedCount .. " target(s) added: " .. targets[1].Name .. (addedCount > 1 and " and others" or "")
    end
    
    return false, "Target not found"
end

-- Function to add all children as targets
local function addAllChildrenAsTargets(path)
    -- Try to resolve the path
    local parent = resolvePath(path)
    
    -- If path resolution failed, try to find by name
    if not parent then
        local targets = findTargetByName(path)
        if #targets > 0 then
            parent = targets[1]
        end
    end
    
    if parent then
        local validTargets = {}
        findValidTargetsRecursive(parent, validTargets)
        
        local count = 0
        for _, target in ipairs(validTargets) do
            if not externalTargets[target] then
                externalTargets[target] = true
                count = count + 1
            end
        end
        
        updateESP()
        return true, count .. " targets added from " .. parent.Name
    end
    
    return false, "Parent not found"
end

-- Function to remove all external targets
local function removeAllExternalTargets()
    for target, _ in pairs(externalTargets) do
        pcall(function()
            if highlights[target] then
                highlights[target]:Destroy()
                highlights[target] = nil
            end
            
            if nameLabels[target] then
                nameLabels[target]:Destroy()
                nameLabels[target] = nil
            end
            
            if healthLabels[target] and healthLabels[target].gui then
                healthLabels[target].gui:Destroy()
                healthLabels[target] = nil
            end
            
            if distanceLabels[target] and distanceLabels[target].gui then
                distanceLabels[target].gui:Destroy()
                distanceLabels[target] = nil
            end
        end)
    end
    externalTargets = {}
    return true, "All external targets removed"
end

-- Function to get external targets list as string
local function getExternalTargetsString()
    local names = {}
    for target, _ in pairs(externalTargets) do
        if target and target.Name then
            table.insert(names, target.Name)
        end
    end
    
    if #names == 0 then
        return "No external targets"
    else
        return table.concat(names, ", ")
    end
end

-- Function to check and re-add missing targets
local function checkAndReaddTargets()
    if not autoReaddTargets then return end
    
    local missingTargets = {}
    
    -- Check which targets are missing
    for target, _ in pairs(externalTargets) do
        if not target or not target.Parent then
            table.insert(missingTargets, target)
        end
    end
    
    -- Remove missing targets
    for _, target in ipairs(missingTargets) do
        pcall(function()
            externalTargets[target] = nil
            
            if highlights[target] then
                highlights[target]:Destroy()
                highlights[target] = nil
            end
            
            if nameLabels[target] then
                nameLabels[target]:Destroy()
                nameLabels[target] = nil
            end
            
            if healthLabels[target] and healthLabels[target].gui then
                healthLabels[target].gui:Destroy()
                healthLabels[target] = nil
            end
            
            if distanceLabels[target] and distanceLabels[target].gui then
                distanceLabels[target].gui:Destroy()
                distanceLabels[target] = nil
            end
        end)
    end
    
    -- Try to find and re-add targets by name
    for _, target in ipairs(missingTargets) do
        if target and target.Name then
            local targetName = target.Name
            local newTargets = findTargetByName(targetName)
            
            for _, newTarget in ipairs(newTargets) do
                if newTarget and newTarget.Parent and not externalTargets[newTarget] then
                    externalTargets[newTarget] = true
                end
            end
        end
    end
    
    -- Update ESP for new targets
    updateESP()
end

-- Function to add team to whitelist
local function addTeamToWhitelist(teamName)
    if teamName and teamName ~= "" then
        teamSettings.teamWhitelist[teamName] = true
        return true, "Added team to whitelist: " .. teamName
    end
    return false, "Invalid team name"
end

-- Function to remove team from whitelist
local function removeTeamFromWhitelist(teamName)
    if teamSettings.teamWhitelist[teamName] then
        teamSettings.teamWhitelist[teamName] = nil
        return true, "Removed team from whitelist: " .. teamName
    end
    return false, "Team not found in whitelist"
end

-- Function to clear team whitelist
local function clearTeamWhitelist()
    teamSettings.teamWhitelist = {}
    return true, "Team whitelist cleared"
end

-- Function to get team whitelist as string
local function getTeamWhitelistString()
    local teams = {}
    for team, _ in pairs(teamSettings.teamWhitelist) do
        table.insert(teams, team)
    end
    
    if #teams == 0 then
        return "No teams in whitelist"
    else
        return table.concat(teams, ", ")
    end
end

-- Function to add player to whitelist
local function addPlayerToWhitelist(playerName)
    if playerName and playerName ~= "" then
        -- Try to find player by name or display name
        local found = false
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Name:lower():find(playerName:lower()) or 
               (player.DisplayName and player.DisplayName:lower():find(playerName:lower())) then
                teamSettings.playerWhitelist[player.Name] = true
                found = true
            end
        end
        
        if found then
            return true, "Added player(s) to whitelist matching: " .. playerName
        else
            -- Add anyway in case player joins later
            teamSettings.playerWhitelist[playerName] = true
            return true, "Added name to whitelist: " .. playerName
        end
    end
    return false, "Invalid player name"
end

-- Function to remove player from whitelist
local function removePlayerFromWhitelist(playerName)
    local removed = false
    
    -- Check for exact matches
    if teamSettings.playerWhitelist[playerName] then
        teamSettings.playerWhitelist[playerName] = nil
        removed = true
    else
        -- Check for partial matches
        for name, _ in pairs(teamSettings.playerWhitelist) do
            if name:lower():find(playerName:lower()) then
                teamSettings.playerWhitelist[name] = nil
                removed = true
            end
        end
    end
    
    if removed then
        return true, "Removed player(s) from whitelist matching: " .. playerName
    end
    return false, "Player not found in whitelist"
end

-- Function to clear player whitelist
local function clearPlayerWhitelist()
    teamSettings.playerWhitelist = {}
    return true, "Player whitelist cleared"
end

-- Function to get player whitelist as string
local function getPlayerWhitelistString()
    local players = {}
    for player, _ in pairs(teamSettings.playerWhitelist) do
        table.insert(players, player)
    end
    
    if #players == 0 then
        return "No players in whitelist"
    else
        return table.concat(players, ", ")
    end
end

-- Function to add auto target
local function addAutoTarget(name)
    if name and name ~= "" then
        autoTargetSystem.targets[name] = true
        return true, "Added to auto target: " .. name
    end
    return false, "Invalid target name"
end

-- Function to remove auto target
local function removeAutoTarget(name)
    if autoTargetSystem.targets[name] then
        autoTargetSystem.targets[name] = nil
        return true, "Removed from auto target: " .. name
    end
    
    -- Try partial match
    for targetName, _ in pairs(autoTargetSystem.targets) do
        if targetName:lower():find(name:lower()) then
            autoTargetSystem.targets[targetName] = nil
            return true, "Removed from auto target: " .. targetName
        end
    end
    
    return false, "Target not found in auto targets"
end

-- Function to clear all auto targets
local function clearAutoTargets()
    autoTargetSystem.targets = {}
    return true, "All auto targets cleared"
end

-- Function to get auto targets as string
local function getAutoTargetsString()
    local targets = {}
    for target, _ in pairs(autoTargetSystem.targets) do
        table.insert(targets, target)
    end
    
    if #targets == 0 then
        return "No auto targets"
    else
        return table.concat(targets, ", ")
    end
end

-- Function to process auto targets
local function processAutoTargets()
    if not autoTargetSystem.enabled then return end
    
    local currentTime = tick()
    if currentTime - autoTargetSystem.lastUpdate < autoTargetSystem.delay then
        return
    end
    
    autoTargetSystem.lastUpdate = currentTime
    
    for targetName, _ in pairs(autoTargetSystem.targets) do
        addExternalTarget(targetName)
    end
end

-- Function to smoothly transition camera
local function smoothCameraTransition(targetCFrame)
    if not shiftLockSettings.smoothTransition then
        Camera.CFrame = targetCFrame
        return
    end
    
    local tweenInfo = TweenInfo.new(
        shiftLockSettings.transitionSpeed,
        Enum.EasingStyle.Sine,
        Enum.EasingDirection.Out
    )
    
    local tween = TweenService:Create(Camera, tweenInfo, {CFrame = targetCFrame})
    tween:Play()
end

-- Function to update character orientation to face camera direction
local function updateCharacterOrientation()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    
    local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
    local lookVector = Camera.CFrame.LookVector
    local flatLookVector = Vector3.new(lookVector.X, 0, lookVector.Z).Unit
    
    -- Set character orientation to face camera direction
    humanoidRootPart.CFrame = CFrame.new(
        humanoidRootPart.Position, 
        humanoidRootPart.Position + flatLookVector
    )
end

-- Function to update custom shift lock
local function updateCustomShiftLock()
    if not shiftLockSettings.enabled or not LocalPlayer.Character then return end
    
    local character = LocalPlayer.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    -- Limit update rate to prevent rapid camera changes
    local currentTime = tick()
    if currentTime - shiftLockSettings.lastUpdateTime < shiftLockSettings.updateInterval then
        return
    end
    shiftLockSettings.lastUpdateTime = currentTime
    
    -- Initialize fixed reference point if not set
    if not shiftLockSettings.fixedReferencePoint then
        shiftLockSettings.fixedReferencePoint = humanoidRootPart.Position + Vector3.new(0, 0, -10)
    end
    
    -- Get current mouse position
    local mousePos = UserInputService:GetMouseLocation()
    
    -- Only update reference direction when mouse moves significantly
    if (mousePos - shiftLockSettings.lastMousePosition).Magnitude > 5 then
        -- Calculate direction from camera to mouse position
        local mouseRay = Camera:ScreenPointToRay(mousePos.X, mousePos.Y)
        local mouseDirection = mouseRay.Direction.Unit
        
        -- Project onto XZ plane for stable rotation
        local flatDirection = Vector3.new(mouseDirection.X, 0, mouseDirection.Z).Unit
        
        -- Update reference direction with stabilization
        shiftLockSettings.referenceDirection = shiftLockSettings.referenceDirection:Lerp(
            flatDirection, 
            shiftLockSettings.stabilizationFactor
        )
        
        -- Update fixed reference point to be in front of character
        shiftLockSettings.fixedReferencePoint = humanoidRootPart.Position + shiftLockSettings.referenceDirection * 10
        
        shiftLockSettings.lastMousePosition = mousePos
    end
    
    -- Set character orientation to face mouse direction
    humanoidRootPart.CFrame = CFrame.new(
        humanoidRootPart.Position, 
        humanoidRootPart.Position + shiftLockSettings.referenceDirection
    )
    
    -- Position camera behind character with custom distance
    local cameraOffset = shiftLockSettings.referenceDirection * -shiftLockSettings.zoomDistance + 
                         Vector3.new(0, shiftLockSettings.zoomDistance * 0.4, 0)
    
    local targetCFrame = CFrame.new(
        humanoidRootPart.Position + cameraOffset, 
        shiftLockSettings.fixedReferencePoint
    )
    
    -- Save camera position for reference
    shiftLockSettings.lastCameraPosition = targetCFrame.Position
    shiftLockSettings.lastCameraLookAt = shiftLockSettings.fixedReferencePoint
    
    -- Apply camera position with smooth transition
    smoothCameraTransition(targetCFrame)
end

-- Function to update alternative shift lock mode
local function updateAlternativeShiftLock()
    if not shiftLockSettings.alternativeMode or not LocalPlayer.Character then return end
    if shiftLockSettings.enabled then return end -- Don't run if regular shift lock is enabled
    
    local character = LocalPlayer.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    -- Limit update rate to prevent rapid changes
    local currentTime = tick()
    if currentTime - shiftLockSettings.lastUpdateTime < shiftLockSettings.updateInterval then
        return
    end
    shiftLockSettings.lastUpdateTime = currentTime
    
    -- Get current camera look vector
    local lookVector = Camera.CFrame.LookVector
    
    -- Project onto XZ plane for stable rotation
    local flatDirection = Vector3.new(lookVector.X, 0, lookVector.Z).Unit
    
    -- Set character orientation to face camera direction
    humanoidRootPart.CFrame = CFrame.new(
        humanoidRootPart.Position, 
        humanoidRootPart.Position + flatDirection
    )
end

-- Function to update always fixed camera
local function updateAlwaysFixedCamera()
    if not shiftLockSettings.alwaysFixCamera or not LocalPlayer.Character then return end
    if shiftLockSettings.enabled then return end -- Don't run if shift lock is already handling camera
    
    local character = LocalPlayer.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    -- Limit update rate to prevent rapid camera changes
    local currentTime = tick()
    if currentTime - shiftLockSettings.lastUpdateTime < shiftLockSettings.updateInterval then
        return
    end
    shiftLockSettings.lastUpdateTime = currentTime
    
    -- Initialize fixed reference point if not set
    if not shiftLockSettings.fixedReferencePoint then
        shiftLockSettings.fixedReferencePoint = humanoidRootPart.Position + humanoidRootPart.CFrame.LookVector * 10
    end
    
    -- Get character's look direction
    local lookVector = humanoidRootPart.CFrame.LookVector
    local direction = Vector3.new(lookVector.X, 0, lookVector.Z).Unit
    
    -- Update reference direction with stabilization
    shiftLockSettings.referenceDirection = shiftLockSettings.referenceDirection:Lerp(
        direction, 
        shiftLockSettings.stabilizationFactor
    )
    
    -- Update fixed reference point to be in front of character
    shiftLockSettings.fixedReferencePoint = humanoidRootPart.Position + shiftLockSettings.referenceDirection * 10
    
    -- Position camera behind character
    local cameraOffset = shiftLockSettings.referenceDirection * -shiftLockSettings.zoomDistance + 
                         Vector3.new(0, shiftLockSettings.zoomDistance * 0.4, 0)
    
    local targetCFrame = CFrame.new(
        humanoidRootPart.Position + cameraOffset, 
        shiftLockSettings.fixedReferencePoint
    )
    
    -- Save camera position for reference
    shiftLockSettings.lastCameraPosition = targetCFrame.Position
    shiftLockSettings.lastCameraLookAt = shiftLockSettings.fixedReferencePoint
    
    -- Apply camera position with smooth transition
    smoothCameraTransition(targetCFrame)
end

-- Function to set camera max zoom distance
local function setCameraMaxZoomDistance(distance)
    if not shiftLockSettings.originalCameraMaxZoomDistance then
        shiftLockSettings.originalCameraMaxZoomDistance = LocalPlayer.CameraMaxZoomDistance
    end
    
    LocalPlayer.CameraMaxZoomDistance = distance
end

-- Function to restore original camera settings
local function restoreOriginalCameraSettings()
    if shiftLockSettings.originalCameraMaxZoomDistance then
        LocalPlayer.CameraMaxZoomDistance = shiftLockSettings.originalCameraMaxZoomDistance
    end
    
    -- Reset camera mode if needed
    Camera.CameraType = Enum.CameraType.Custom
end

-- Create tabs
local ESPTab = Window:MakeTab({
    Name = "ESP",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AimbotTab = Window:MakeTab({
    Name = "Aimbot",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local TargetsTab = Window:MakeTab({
    Name = "Targets",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AutoTargetTab = Window:MakeTab({
    Name = "Auto Target",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local TeamTab = Window:MakeTab({
    Name = "Team",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local CameraTab = Window:MakeTab({
    Name = "Camera",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local SettingsTab = Window:MakeTab({
    Name = "Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- ESP Tab
ESPTab:AddToggle({
    Name = "ESP Enabled",
    Default = false,
    Callback = function(Value)
        espEnabled = Value
        if Value then
            updateESP()
        else
            clearHighlights()
            clearNameLabels()
            clearHealthLabels()
            clearDistanceLabels()
        end
    end
})

ESPTab:AddToggle({
    Name = "ESP Players",
    Default = false,
    Callback = function(Value)
        playerEspEnabled = Value
        if Value then
            updateESP()
        else
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character then
                    pcall(function()
                        if highlights[player.Character] then
                            highlights[player.Character]:Destroy()
                            highlights[player.Character] = nil
                        end
                        
                        if nameLabels[player.Character] then
                            nameLabels[player.Character]:Destroy()
                            nameLabels[player.Character] = nil
                        end
                        
                        if healthLabels[player.Character] and healthLabels[player.Character].gui then
                            healthLabels[player.Character].gui:Destroy()
                            healthLabels[player.Character] = nil
                        end
                        
                        if distanceLabels[player.Character] and distanceLabels[player.Character].gui then
                            distanceLabels[player.Character].gui:Destroy()
                            distanceLabels[player.Character] = nil
                        end
                    end)
                end
            end
        end
    end
})

ESPTab:AddToggle({
    Name = "No ESP Players",
    Default = false,
    Callback = function(Value)
        noEspPlayers = Value
        updateESP()
    end
})

ESPTab:AddToggle({
    Name = "Show Names",
    Default = false,
    Callback = function(Value)
        espSettings.showNames = Value
        clearNameLabels()
        if Value and espEnabled then
            updateESP()
        end
    end
})

ESPTab:AddToggle({
    Name = "Show Health",
    Default = false,
    Callback = function(Value)
        espSettings.showHealth = Value
        clearHealthLabels()
        if Value and espEnabled then
            updateESP()
        end
    end
})

ESPTab:AddToggle({
    Name = "Show Distance",
    Default = false,
    Callback = function(Value)
        espSettings.showDistance = Value
        clearDistanceLabels()
        if Value and espEnabled then
            updateESP()
        end
    end
})

ESPTab:AddToggle({
    Name = "Team Colored Text",
    Default = true,
    Callback = function(Value)
        espSettings.teamColoredText = Value
        if espEnabled then
            updateESP()
        end
    end
})

ESPTab:AddToggle({
    Name = "Team ESP as Green",
    Default = true,
    Callback = function(Value)
        espSettings.forceTeamColor = Value
        if espEnabled and teamSettings.teamCheckEnabled then
            updateESP()
        end
    end
})

ESPTab:AddToggle({
    Name = "Enemy ESP as Red",
    Default = true,
    Callback = function(Value)
        espSettings.forceEnemyColor = Value
        if espEnabled and teamSettings.teamCheckEnabled then
            updateESP()
        end
    end
})

ESPTab:AddTextbox({
    Name = "Name Size",
    Default = "14",
    TextDisappear = false,
    Callback = function(Value)
        local size = tonumber(Value)
        if size and size > 0 then
            espSettings.nameSize = size
            -- Update existing labels
            for _, label in pairs(nameLabels) do
                pcall(function()
                    if label and label:FindFirstChildOfClass("TextLabel") then
                        label:FindFirstChildOfClass("TextLabel").TextSize = size
                    end
                end)
            end
        end
    end
})

ESPTab:AddTextbox({
    Name = "Health Size",
    Default = "12",
    TextDisappear = false,
    Callback = function(Value)
        local size = tonumber(Value)
        if size and size > 0 then
            espSettings.healthSize = size
            -- Update existing labels
            for _, data in pairs(healthLabels) do
                pcall(function()
                    if data.label then
                        data.label.TextSize = size
                    end
                end)
            end
        end
    end
})

ESPTab:AddTextbox({
    Name = "Distance Size",
    Default = "12",
    TextDisappear = false,
    Callback = function(Value)
        local size = tonumber(Value)
        if size and size > 0 then
            espSettings.distanceSize = size
            -- Update existing labels
            for _, data in pairs(distanceLabels) do
                pcall(function()
                    if data.label then
                        data.label.TextSize = size
                    end
                end)
            end
        end
    end
})

ESPTab:AddSlider({
    Name = "ESP Transparency",
    Min = 0,
    Max = 1,
    Default = 0.5,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.05,
    ValueName = "Transparency",
    Callback = function(Value)
        espSettings.enemyTransparency = Value
        espSettings.playerTransparency = Value
        
        -- Update existing highlights
        for _, highlight in pairs(highlights) do
            pcall(function()
                if highlight then
                    highlight.FillTransparency = Value
                end
            end)
        end
    end    
})

ESPTab:AddColorpicker({
    Name = "Highlight Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        espSettings.highlightColor = Value
        
        -- Update existing highlights if team check is not enabled
        if not teamSettings.teamCheckEnabled then
            for _, highlight in pairs(highlights) do
                pcall(function()
                    if highlight then
                        highlight.FillColor = Value
                    end
                end)
            end
        end
    end  
})

-- Aimbot Tab
AimbotTab:AddToggle({
    Name = "Aimbot Enabled",
    Default = false,
    Callback = function(Value)
        aimbotSettings.enabled = Value
        
        if Value then
            -- Create FOV circle
            local fovGui = createFOVCircle()
            
            -- Create crosshair
            crosshairObj = createCrosshair()
            
            -- Start aimbot loop
            aimbotConnection = RunService.RenderStepped:Connect(function()
                if not aimbotSettings.enabled then return end
                
                local target = getClosestTarget()
                if target then
                    -- Skip aiming if aim flexibility is enabled and we're already aiming at the target
                    if aimbotSettings.aimFlexibility and aimbotSettings.isAimingAtTarget then
                        return
                    end
                    
                    local targetPosition = getTargetPositionWithPrediction(target)
                    if targetPosition then
                        if aimbotSettings.legitMode then
                            -- Legit aimbot with random delay and smooth movement
                            local delay = math.random(aimbotSettings.minDelay, aimbotSettings.maxDelay) / 1000
                            getCurrentWait()(delay)
                            
                            local targetCFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
                            
                            if aimbotSettings.useLerpMethod then
                                -- Use lerp method for smoother transition
                                local smoothness = aimbotSettings.fasterAimbot and 0.8 or aimbotSettings.smoothing
                                Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, smoothness)
                            else
                                -- Use tween method
                                local smoothness = aimbotSettings.fasterAimbot and 0.8 or aimbotSettings.smoothing
                                local tweenInfo = TweenInfo.new(smoothness, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
                                local tween = TweenService:Create(Camera, tweenInfo, {CFrame = targetCFrame})
                                tween:Play()
                            end
                        else
                            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
                        end
                        
                        -- Update character orientation if restrict camera movements is enabled
                        if shiftLockSettings.restrictCameraMovements then
                            updateCharacterOrientation()
                        end
                    end
                end
                
                -- Update crosshair
                updateCrosshair(crosshairObj)
                -- Update FOV circle
                updateFOVCircle()
            end)
            
            -- Start auto-shoot if enabled
            if aimbotSettings.autoShoot then
                autoShootConnection = RunService.Heartbeat:Connect(function()
                    if not aimbotSettings.enabled or not aimbotSettings.autoShoot then return end
                    
                    local target = aimbotSettings.currentTarget
                    if target and isCrosshairOnTarget(target) then
                        simulateButtonPress(aimbotSettings.shootButton)
                    end
                end)
            end
        else
            -- Clean up
            if aimbotConnection then
                aimbotConnection:Disconnect()
                aimbotConnection = nil
            end
            
            if autoShootConnection then
                autoShootConnection:Disconnect()
                autoShootConnection = nil
            end
            
            if fovCircle and fovCircle.Parent then
                fovCircle.Parent:Destroy()
                fovCircle = nil
            end
            
            -- Remove crosshair
            if crosshairObj and crosshairObj.gui then
                crosshairObj.gui:Destroy()
                crosshairObj = nil
            end
            
            -- Reset aimbot state
            aimbotSettings.currentTarget = nil
            aimbotSettings.isAimingAtTarget = false
        end
    end
})

AimbotTab:AddToggle({
    Name = "Smart Mode",
    Default = false,
    Callback = function(Value)
        aimbotSettings.smartMode = Value
    end
})

AimbotTab:AddToggle({
    Name = "Legit Aimbot",
    Default = false,
    Callback = function(Value)
        aimbotSettings.legitMode = Value
    end
})

AimbotTab:AddToggle({
    Name = "Aim Flexibility",
    Default = false,
    Callback = function(Value)
        aimbotSettings.aimFlexibility = Value
    end
})

AimbotTab:AddToggle({
    Name = "Persistent Aim",
    Default = false,
    Callback = function(Value)
        aimbotSettings.persistentAim = Value
    end
})

AimbotTab:AddToggle({
    Name = "Target External Targets",
    Default = true,
    Callback = function(Value)
        aimbotSettings.targetExternalTargets = Value
    end
})

AimbotTab:AddToggle({
    Name = "No Aimbot Players",
    Default = false,
    Callback = function(Value)
        aimbotSettings.noAimbotPlayers = Value
    end
})

AimbotTab:AddToggle({
    Name = "External Target Is Model",
    Default = true,
    Callback = function(Value)
        aimbotSettings.externalTargetIsModel = Value
    end
})

AimbotTab:AddToggle({
    Name = "Ignore Walls",
    Default = false,
    Callback = function(Value)
        aimbotSettings.ignoreWalls = Value
    end
})

AimbotTab:AddToggle({
    Name = "360 FOV Mode",
    Default = false,
    Callback = function(Value)
        aimbotSettings.fov360 = Value
        updateFOVCircle()
    end
})

AimbotTab:AddToggle({
    Name = "360 True Mode",
    Default = false,
    Callback = function(Value)
        aimbotSettings.fov360True = Value
        updateFOVCircle()
    end
})

AimbotTab:AddToggle({
    Name = "Show Crosshair",
    Default = true,
    Callback = function(Value)
        aimbotSettings.showCrosshair = Value
        if crosshairObj and crosshairObj.frame then
            crosshairObj.frame.Visible = Value
        end
    end
})

AimbotTab:AddToggle({
    Name = "Show FOV Circle",
    Default = true,
    Callback = function(Value)
        aimbotSettings.showFOVCircle = Value
        if fovCircle then
            fovCircle.Visible = Value and aimbotSettings.enabled and not (aimbotSettings.fov360 or aimbotSettings.fov360True)
        end
    end
})

AimbotTab:AddToggle({
    Name = "Predict Far Range",
    Default = false,
    Callback = function(Value)
        aimbotSettings.predictFarRange = Value
    end
})

AimbotTab:AddToggle({
    Name = "Predict Movement",
    Default = false,
    Callback = function(Value)
        aimbotSettings.predictMovement = Value
    end
})

AimbotTab:AddToggle({
    Name = "Faster Aimbot",
    Default = false,
    Callback = function(Value)
        aimbotSettings.fasterAimbot = Value
    end
})

AimbotTab:AddToggle({
    Name = "Use Lerp Method",
    Default = false,
    Callback = function(Value)
        aimbotSettings.useLerpMethod = Value
    end
})

AimbotTab:AddToggle({
    Name = "Auto Shoot",
    Default = false,
    Callback = function(Value)
        aimbotSettings.autoShoot = Value
        
        if Value and aimbotSettings.enabled then
            if autoShootConnection then
                autoShootConnection:Disconnect()
            end
            
            autoShootConnection = RunService.Heartbeat:Connect(function()
                if not aimbotSettings.enabled or not aimbotSettings.autoShoot then return end
                
                local target = aimbotSettings.currentTarget
                if target and isCrosshairOnTarget(target) then
                    simulateButtonPress(aimbotSettings.shootButton)
                end
            end)
        else
            if autoShootConnection then
                autoShootConnection:Disconnect()
                autoShootConnection = nil
            end
        end
    end
})

AimbotTab:AddDropdown({
    Name = "Target Mode",
    Default = "closest to crosshair",
    Options = {"closest to crosshair", "closest to localplayer"},
    Callback = function(Value)
        if Value == "closest to crosshair" then
            aimbotSettings.targetMode = "crosshair"
        else
            aimbotSettings.targetMode = "localplayer"
        end
    end    
})

AimbotTab:AddDropdown({
    Name = "Crosshair Type",
    Default = "cross",
    Options = {"cross", "circle"},
    Callback = function(Value)
        aimbotSettings.crosshairType = Value
        
        -- Recreate crosshair with new type
        if crosshairObj and crosshairObj.gui then
            crosshairObj.gui:Destroy()
        end
        
        if aimbotSettings.enabled and aimbotSettings.showCrosshair then
            crosshairObj = createCrosshair()
        end
    end    
})

AimbotTab:AddSlider({
    Name = "FOV Radius",
    Min = 10,
    Max = 500,
    Default = 125,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 5,
    ValueName = "Radius",
    Callback = function(Value)
        aimbotSettings.fovRadius = Value
        updateFOVCircle()
    end    
})

AimbotTab:AddSlider({
    Name = "Aimbot Smoothing",
    Min = 0.01,
    Max = 1.0,
    Default = 0.2,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.01,
    ValueName = "Smoothing",
    Callback = function(Value)
        aimbotSettings.smoothing = Value
    end    
})

AimbotTab:AddSlider({
    Name = "Lock Distance",
    Min = 0,
    Max = 5000,
    Default = 1000,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 50,
    ValueName = "Distance",
    Callback = function(Value)
        aimbotSettings.lockDistance = Value
    end    
})

AimbotTab:AddSlider({
    Name = "Legit Min Delay (ms)",
    Min = 0,
    Max = 1000,
    Default = 100,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 10,
    ValueName = "ms",
    Callback = function(Value)
        aimbotSettings.minDelay = Value
    end    
})

AimbotTab:AddSlider({
    Name = "Legit Max Delay (ms)",
    Min = 0,
    Max = 2000,
    Default = 300,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 10,
    ValueName = "ms",
    Callback = function(Value)
        aimbotSettings.maxDelay = Value
    end    
})

AimbotTab:AddSlider({
    Name = "Far Range Offset",
    Min = 0,
    Max = 1,
    Default = 0.1,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.01,
    ValueName = "Offset",
    Callback = function(Value)
        aimbotSettings.farRangeOffset = Value
    end    
})

AimbotTab:AddSlider({
    Name = "Movement Prediction",
    Min = 0,
    Max = 2,
    Default = 0.5,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.1,
    ValueName = "Factor",
    Callback = function(Value)
        aimbotSettings.movementPredictionFactor = Value
    end    
})

AimbotTab:AddToggle({
    Name = "Predict Ahead (vs Behind)",
    Default = true,
    Callback = function(Value)
        aimbotSettings.movementPredictionAhead = Value
    end
})

AimbotTab:AddTextbox({
    Name = "Crosshair X Position",
    Default = "0",
    TextDisappear = false,
    Callback = function(Value)
        local pos = tonumber(Value)
        if pos then
            aimbotSettings.crosshairX = pos
            updateCrosshair(crosshairObj)
            updateFOVCircle()
        end
    end
})

AimbotTab:AddTextbox({
    Name = "Crosshair Y Position",
    Default = "-30",
    TextDisappear = false,
    Callback = function(Value)
        local pos = tonumber(Value)
        if pos then
            aimbotSettings.crosshairY = pos
            updateCrosshair(crosshairObj)
            updateFOVCircle()
        end
    end
})

AimbotTab:AddTextbox({
    Name = "Crosshair Size",
    Default = "10",
    TextDisappear = false,
    Callback = function(Value)
        local size = tonumber(Value)
        if size and size > 0 then
            aimbotSettings.crosshairSize = size
            updateCrosshair(crosshairObj)
        end
    end
})

AimbotTab:AddSlider({
    Name = "Crosshair Transparency",
    Min = 0,
    Max = 1,
    Default = 0,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.05,
    ValueName = "Transparency",
    Callback = function(Value)
        aimbotSettings.crosshairTransparency = Value
        updateCrosshair(crosshairObj)
    end    
})

AimbotTab:AddColorpicker({
    Name = "Crosshair Color",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(Value)
        aimbotSettings.crosshairColor = Value
        updateCrosshair(crosshairObj)
    end  
})

AimbotTab:AddTextbox({
    Name = "Shoot Button",
    Default = "MouseButton1",
    TextDisappear = false,
    Callback = function(Value)
        if Value ~= "" then
            aimbotSettings.shootButton = Value
        end
    end
})

AimbotTab:AddTextbox({
    Name = "Shoot Delay",
    Default = "0.01",
    TextDisappear = false,
    Callback = function(Value)
        local delay = tonumber(Value)
        if delay and delay > 0 then
            aimbotSettings.shootDelay = delay
        end
    end
})

AimbotTab:AddSlider({
    Name = "Auto-Shoot Tolerance",
    Min = 5,
    Max = 50,
    Default = 15,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "Pixels",
    Callback = function(Value)
        aimbotSettings.autoShootTolerance = Value
    end    
})

AimbotTab:AddSlider({
    Name = "Shoot Cooldown",
    Min = 0.01,
    Max = 1.0,
    Default = 0.1,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.01,
    ValueName = "Seconds",
    Callback = function(Value)
        aimbotSettings.shootCooldown = Value
    end    
})

AimbotTab:AddTextbox({
    Name = "Target Detection Rate (do 0.001 for fastest)",
    Default = "0.01",
    TextDisappear = false,
    Callback = function(Value)
        local rate = tonumber(Value)
        if rate and rate > 0 then
            aimbotSettings.targetDetectionRate = rate
        end
    end
})

AimbotTab:AddTextbox({
    Name = "Screen Conversion Rate (do 0.0001 for best)",
    Default = "0.01",
    TextDisappear = false,
    Callback = function(Value)
        local rate = tonumber(Value)
        if rate and rate > 0 then
            aimbotSettings.screenConversionRate = rate
        end
    end
})

AimbotTab:AddSlider({
    Name = "Target Timeout",
    Min = 0.1,
    Max = 2.0,
    Default = 0.5,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.1,
    ValueName = "Seconds",
    Callback = function(Value)
        aimbotSettings.targetTimeout = Value
    end    
})

-- Targets Tab
local externalTargetsList = TargetsTab:AddLabel("No external targets")

TargetsTab:AddTextbox({
    Name = "Target Name/Path",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        textBoxValues.targetName = Value
    end  
})

TargetsTab:AddButton({
    Name = "Add External Target",
    Callback = function()
        if textBoxValues.targetName ~= "" then
            local success, message = addExternalTarget(textBoxValues.targetName)
            if success then
                showMessage("Added target: " .. message)
                externalTargetsList:Set(getExternalTargetsString())
            else
                showMessage("Failed: " .. message)
            end
        else
            showMessage("Please enter a target name")
        end
    end
})

TargetsTab:AddButton({
    Name = "Add All Children As Targets",
    Callback = function()
        if textBoxValues.targetName ~= "" then
            local success, message = addAllChildrenAsTargets(textBoxValues.targetName)
            if success then
                showMessage(message)
                externalTargetsList:Set(getExternalTargetsString())
            else
                showMessage("Failed: " .. message)
            end
        else
            showMessage("Please enter a parent path")
        end
    end
})

TargetsTab:AddButton({
    Name = "Remove All External Targets",
    Callback = function()
        local success, message = removeAllExternalTargets()
        if success then
            showMessage(message)
            externalTargetsList:Set("No external targets")
        end
    end
})

TargetsTab:AddToggle({
    Name = "Auto Re-add Targets",
    Default = false,
    Callback = function(Value)
        autoReaddTargets = Value
        
        if Value then
            if readdTargetsConnection then
                readdTargetsConnection:Disconnect()
            end
            
            readdTargetsConnection = RunService.Heartbeat:Connect(function()
                getCurrentWait()(readdDelay)
                checkAndReaddTargets()
            end)
        else
            if readdTargetsConnection then
                readdTargetsConnection:Disconnect()
                readdTargetsConnection = nil
            end
        end
    end
})

TargetsTab:AddTextbox({
    Name = "Re-add Check Delay",
    Default = "2",
    TextDisappear = false,
    Callback = function(Value)
        local delay = tonumber(Value)
        if delay and delay > 0 then
            readdDelay = delay
        end
    end
})

-- Auto Target Tab
local autoTargetsList = AutoTargetTab:AddLabel("No auto targets")

AutoTargetTab:AddTextbox({
    Name = "Auto Target Name/Path",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        textBoxValues.autoTargetName = Value
    end  
})

AutoTargetTab:AddButton({
    Name = "Add To Auto Target",
    Callback = function()
        if textBoxValues.autoTargetName ~= "" then
            local success, message = addAutoTarget(textBoxValues.autoTargetName)
            if success then
                showMessage(message)
                autoTargetsList:Set(getAutoTargetsString())
            else
                showMessage("Failed: " .. message)
            end
        else
            showMessage("Please enter a target name")
        end
    end
})

AutoTargetTab:AddButton({
    Name = "Remove From Auto Target",
    Callback = function()
        if textBoxValues.autoTargetName ~= "" then
            local success, message = removeAutoTarget(textBoxValues.autoTargetName)
            if success then
                showMessage(message)
                autoTargetsList:Set(getAutoTargetsString())
            else
                showMessage("Failed: " .. message)
            end
        else
            showMessage("Please enter a target name")
        end
    end
})

AutoTargetTab:AddButton({
    Name = "Remove All Auto Targets",
    Callback = function()
        local success, message = clearAutoTargets()
        if success then
            showMessage(message)
            autoTargetsList:Set("No auto targets")
        end
    end
})

AutoTargetTab:AddToggle({
    Name = "Enable Auto Target",
    Default = false,
    Callback = function(Value)
        autoTargetSystem.enabled = Value
        
        if Value then
            if autoTargetConnection then
                autoTargetConnection:Disconnect()
            end
            
            autoTargetConnection = RunService.Heartbeat:Connect(function()
                processAutoTargets()
            end)
        else
            if autoTargetConnection then
                autoTargetConnection:Disconnect()
                autoTargetConnection = nil
            end
        end
    end
})

AutoTargetTab:AddTextbox({
    Name = "Auto Target Delay",
    Default = "2",
    TextDisappear = false,
    Callback = function(Value)
        local delay = tonumber(Value)
        if delay and delay > 0 then
            autoTargetSystem.delay = delay
        end
    end
})

-- Team Tab
TeamTab:AddToggle({
    Name = "Team Check",
    Default = false,
    Callback = function(Value)
        teamSettings.teamCheckEnabled = Value
        
        if Value then
            updateLocalPlayerTeam()
            
            -- Start team update connection
            if teamUpdateConnection then
                teamUpdateConnection:Disconnect()
            end
            
            teamUpdateConnection = RunService.Heartbeat:Connect(function()
                getCurrentWait()(1)
                updateLocalPlayerTeam()
            end)
        else
            if teamUpdateConnection then
                teamUpdateConnection:Disconnect()
                teamUpdateConnection = nil
            end
        end
        
        -- Update ESP with new team settings
        updateESP()
    end
})

TeamTab:AddToggle({
    Name = "Target Enemies Only",
    Default = true,
    Callback = function(Value)
        teamSettings.targetEnemiesOnly = Value
        
        if not teamSettings.teamCheckEnabled then
            showMessage("Enable Team Check for this to take effect")
        end
    end
})

TeamTab:AddToggle({
    Name = "ESP Teammates",
    Default = false,
    Callback = function(Value)
        teamSettings.espTeammates = Value
        
        if not teamSettings.teamCheckEnabled then
            showMessage("Enable Team Check for this to take effect")
        else
            updateESP()
        end
    end
})

TeamTab:AddToggle({
    Name = "ESP Enemies",
    Default = true,
    Callback = function(Value)
        teamSettings.espEnemies = Value
        
        if not teamSettings.teamCheckEnabled then
            showMessage("Enable Team Check for this to take effect")
        else
            updateESP()
        end
    end
})

TeamTab:AddToggle({
    Name = "Use Team Colors",
    Default = true,
    Callback = function(Value)
        espSettings.useTeamColors = Value
        
        if not teamSettings.teamCheckEnabled then
            showMessage("Enable Team Check for this to take effect")
        else
            updateESP()
        end
    end
})

TeamTab:AddColorpicker({
    Name = "Team Color",
    Default = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        espSettings.teamColor = Value
        
        if teamSettings.teamCheckEnabled then
            updateESP()
        end
    end  
})

TeamTab:AddColorpicker({
    Name = "Enemy Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        espSettings.enemyColor = Value
        
        if teamSettings.teamCheckEnabled then
            updateESP()
        end
    end  
})

-- Team Whitelist
local teamWhitelistLabel = TeamTab:AddLabel("No teams in whitelist")

TeamTab:AddTextbox({
    Name = "Team Name",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        textBoxValues.teamName = Value
    end  
})

TeamTab:AddButton({
    Name = "Add Team To Whitelist",
    Callback = function()
        if textBoxValues.teamName ~= "" then
            local success, message = addTeamToWhitelist(textBoxValues.teamName)
            if success then
                showMessage(message)
                teamWhitelistLabel:Set(getTeamWhitelistString())
            else
                showMessage("Failed: " .. message)
            end
        else
            showMessage("Please enter a team name")
        end
    end
})

TeamTab:AddButton({
    Name = "Remove Team From Whitelist",
    Callback = function()
        if textBoxValues.teamName ~= "" then
            local success, message = removeTeamFromWhitelist(textBoxValues.teamName)
            if success then
                showMessage(message)
                teamWhitelistLabel:Set(getTeamWhitelistString())
            else
                showMessage("Failed: " .. message)
            end
        else
            showMessage("Please enter a team name")
        end
    end
})

TeamTab:AddButton({
    Name = "Clear Team Whitelist",
    Callback = function()
        local success, message = clearTeamWhitelist()
        if success then
            showMessage(message)
            teamWhitelistLabel:Set("No teams in whitelist")
        end
    end
})

-- Player Whitelist
local playerWhitelistLabel = TeamTab:AddLabel("No players in whitelist")

TeamTab:AddTextbox({
    Name = "Player Name",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        textBoxValues.playerName = Value
    end  
})

TeamTab:AddButton({
    Name = "Add Player To Whitelist",
    Callback = function()
        if textBoxValues.playerName ~= "" then
            local success, message = addPlayerToWhitelist(textBoxValues.playerName)
            if success then
                showMessage(message)
                playerWhitelistLabel:Set(getPlayerWhitelistString())
            else
                showMessage("Failed: " .. message)
            end
        else
            showMessage("Please enter a player name")
        end
    end
})

TeamTab:AddButton({
    Name = "Remove Player From Whitelist",
    Callback = function()
        if textBoxValues.playerName ~= "" then
            local success, message = removePlayerFromWhitelist(textBoxValues.playerName)
            if success then
                showMessage(message)
                playerWhitelistLabel:Set(getPlayerWhitelistString())
            else
                showMessage("Failed: " .. message)
            end
        else
            showMessage("Please enter a player name")
        end
    end
})

TeamTab:AddButton({
    Name = "Clear Player Whitelist",
    Callback = function()
        local success, message = clearPlayerWhitelist()
        if success then
            showMessage(message)
            playerWhitelistLabel:Set("No players in whitelist")
        end
    end
})

-- Camera Tab
CameraTab:AddToggle({
    Name = "Forced ShiftLock",
    Default = false,
    Callback = function(Value)
        shiftLockSettings.enabled = Value
        
        if Value then
            -- Save original camera settings
            if not shiftLockSettings.originalCameraMaxZoomDistance then
                shiftLockSettings.originalCameraMaxZoomDistance = LocalPlayer.CameraMaxZoomDistance
            end
            
            -- Set camera max zoom distance
            setCameraMaxZoomDistance(9999)
            
            -- Initialize reference direction
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                shiftLockSettings.referenceDirection = LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector
            else
                shiftLockSettings.referenceDirection = Vector3.new(0, 0, -1)
            end
            
            -- Initialize last mouse position
            shiftLockSettings.lastMousePosition = UserInputService:GetMouseLocation()
            
            -- Reset fixed reference point
            shiftLockSettings.fixedReferencePoint = nil
            
            -- Start shift lock connection
            if shiftLockConnection then
                shiftLockConnection:Disconnect()
            end
            
            shiftLockConnection = RunService.RenderStepped:Connect(updateCustomShiftLock)
        else
            -- Clean up
            if shiftLockConnection then
                shiftLockConnection:Disconnect()
                shiftLockConnection = nil
            end
            
            -- Restore original camera settings
            restoreOriginalCameraSettings()
            
            -- Start always fix camera if enabled
            if shiftLockSettings.alwaysFixCamera then
                shiftLockConnection = RunService.RenderStepped:Connect(updateAlwaysFixedCamera)
            elseif shiftLockSettings.alternativeMode then
                shiftLockConnection = RunService.RenderStepped:Connect(updateAlternativeShiftLock)
            end
        end
    end
})

CameraTab:AddToggle({
    Name = "Always Fix Camera",
    Default = false,
    Callback = function(Value)
        shiftLockSettings.alwaysFixCamera = Value
        
        if Value and not shiftLockSettings.enabled then
            -- Reset fixed reference point
            shiftLockSettings.fixedReferencePoint = nil
            
            -- Start always fix camera connection
            if shiftLockConnection then
                shiftLockConnection:Disconnect()
            end
            shiftLockConnection = RunService.RenderStepped:Connect(updateAlwaysFixedCamera)
        elseif not Value and not shiftLockSettings.enabled and not shiftLockSettings.alternativeMode then
            -- Clean up if shift lock is not enabled
            if shiftLockConnection then
                shiftLockConnection:Disconnect()
                shiftLockConnection = nil
            end
        end
    end
})

CameraTab:AddToggle({
    Name = "Alternative ShiftLock Mode",
    Default = false,
    Callback = function(Value)
        shiftLockSettings.alternativeMode = Value
        
        if Value and not shiftLockSettings.enabled and not shiftLockSettings.alwaysFixCamera then
            -- Start alternative mode connection
            if shiftLockConnection then
                shiftLockConnection:Disconnect()
            end
            shiftLockConnection = RunService.RenderStepped:Connect(updateAlternativeShiftLock)
        elseif not Value and not shiftLockSettings.enabled and not shiftLockSettings.alwaysFixCamera then
            -- Clean up if no other camera mode is enabled
            if shiftLockConnection then
                shiftLockConnection:Disconnect()
                shiftLockConnection = nil
            end
        end
    end
})

CameraTab:AddToggle({
    Name = "Restrict Force Camera Movements",
    Default = false,
    Callback = function(Value)
        shiftLockSettings.restrictCameraMovements = Value
        
        if Value then
            if cameraMovementConnection then
                cameraMovementConnection:Disconnect()
            end
            
            cameraMovementConnection = RunService.RenderStepped:Connect(function()
                if aimbotSettings.enabled and aimbotSettings.currentTarget then
                    updateCharacterOrientation()
                end
            end)
        else
            if cameraMovementConnection then
                cameraMovementConnection:Disconnect()
                cameraMovementConnection = nil
            end
        end
    end
})

CameraTab:AddToggle({
    Name = "Smooth Camera Transition",
    Default = false,
    Callback = function(Value)
        shiftLockSettings.smoothTransition = Value
    end
})

CameraTab:AddSlider({
    Name = "Camera Zoom Distance",
    Min = 1,
    Max = 100,
    Default = 30,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "Distance",
    Callback = function(Value)
        shiftLockSettings.zoomDistance = Value
    end    
})

CameraTab:AddSlider({
    Name = "Transition Speed",
    Min = 0.01,
    Max = 0.5,
    Default = 0.1,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.01,
    ValueName = "Speed",
    Callback = function(Value)
        shiftLockSettings.transitionSpeed = Value
    end    
})

CameraTab:AddSlider({
    Name = "Stabilization Factor",
    Min = 0.1,
    Max = 1.0,
    Default = 0.8,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.05,
    ValueName = "Factor",
    Callback = function(Value)
        shiftLockSettings.stabilizationFactor = Value
    end    
})

CameraTab:AddSlider({
    Name = "Update Interval",
    Min = 0.01,
    Max = 0.5,
    Default = 0.1,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.01,
    ValueName = "Seconds",
    Callback = function(Value)
        shiftLockSettings.updateInterval = Value
    end    
})

-- Settings Tab
SettingsTab:AddToggle({
    Name = "Use task.wait()",
    Default = false,
    Callback = function(Value)
        useTaskWait = Value
    end
})

-- ESP Auto-update every 10 seconds
spawn(function()
    while true do
        getCurrentWait()(10)
        if espEnabled then
            pcall(updateESP)
        end
    end
end)

-- Health labels update every 0.1 seconds
spawn(function()
    while true do
        getCurrentWait()(0.1)
        if espSettings.showHealth then
            pcall(updateHealthLabels)
        end
    end
end)

-- Distance labels update every 0.1 seconds
spawn(function()
    while true do
        getCurrentWait()(0.1)
        if espSettings.showDistance then
            pcall(updateDistanceLabels)
        end
    end
end)

-- Player join/leave handling
Players.PlayerAdded:Connect(function(player)
    if playerEspEnabled then
        player.CharacterAdded:Connect(function()
            wait(1)
            pcall(updateESP)
        end)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    pcall(function()
        if player.Character and highlights[player.Character] then
            highlights[player.Character]:Destroy()
            highlights[player.Character] = nil
        end
        
        if player.Character and nameLabels[player.Character] then
            nameLabels[player.Character]:Destroy()
            nameLabels[player.Character] = nil
        end
        
        if player.Character and healthLabels[player.Character] then
            healthLabels[player.Character].gui:Destroy()
            healthLabels[player.Character] = nil
        end
        
        if player.Character and distanceLabels[player.Character] then
            distanceLabels[player.Character].gui:Destroy()
            distanceLabels[player.Character] = nil
        end
    end)
end)

-- Character respawn handling
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Update ESP for the new character
    pcall(updateESP)
end)

-- Clean up on script end
local scriptConnection
scriptConnection = game:GetService("CoreGui").ChildRemoved:Connect(function(child)
    if child.Name == "Orion" then
        -- Clean up all connections
        if aimbotConnection then aimbotConnection:Disconnect() end
        if espUpdateConnection then espUpdateConnection:Disconnect() end
        if teamUpdateConnection then teamUpdateConnection:Disconnect() end
        if readdTargetsConnection then readdTargetsConnection:Disconnect() end
        if shiftLockConnection then shiftLockConnection:Disconnect() end
        if autoTargetConnection then autoTargetConnection:Disconnect() end
        if autoShootConnection then autoShootConnection:Disconnect() end
        if cameraMovementConnection then cameraMovementConnection:Disconnect() end
        
        -- Clean up all GUI elements
        clearHighlights()
        clearNameLabels()
        clearHealthLabels()
        clearDistanceLabels()
        
        if fovCircle and fovCircle.Parent then fovCircle.Parent:Destroy() end
        if crosshairObj and crosshairObj.gui then crosshairObj.gui:Destroy() end
        
        -- Restore camera settings
        restoreOriginalCameraSettings()
        
        -- Disconnect this connection
        scriptConnection:Disconnect()
    end
end)

OrionLib:Init()
end)

addcmd('ShowChat',{'ChatGUI'},function(args, speaker)
-- Enhanced Functional Chat with Settings Panel (Final Version)
-- Fixes: Infinite settings scrolling and proper auto-scroll to bottom

local function CreateEnhancedChat()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local TextChatService = game:GetService("TextChatService")
    local CoreGui = game:GetService("CoreGui")
    local UserInputService = game:GetService("UserInputService")
    
    -- Settings and state variables
    local settings = {
        autoScroll = true,
        showTimeDisplay = false,  -- Show time in displayed messages
        showTimeSend = false,     -- Include time when sending messages
        showNotifications = true,
        localPlayerChatYellow = false,
        specialUsers = {},
        fontSize = 14,
        chatWidth = 0.3,
        chatHeight = 0.4,
        autoClearChat = false,
        autoClearDelay = 15      -- Minutes
    }
    
    local state = {
        unreadMessages = 0,
        settingsPanelOpen = false,
        userScrolled = false,
        lastClearTime = os.time()
    }
    
    -- Helper function to get current time
    local function GetCurrentTime()
        local success, timeString = pcall(function()
            return os.date("%I:%M %p") -- 12-hour format with AM/PM
        end)
        
        if not success then
            -- Fallback method if os.date fails
            local datetime = DateTime.now()
            local hour = datetime.Hour
            local minute = datetime.Minute
            local ampm = "AM"
            
            if hour >= 12 then
                ampm = "PM"
                if hour > 12 then
                    hour = hour - 12
                end
            end
            if hour == 0 then hour = 12 end
            
            return string.format("%02d:%02d %s", hour, minute, ampm)
        end
        
        return timeString
    end
    
    -- Helper function to find closest username match
    local function FindClosestUsername(query)
        if query == "" then return nil end
        
        local bestMatch = nil
        local bestScore = 0
        
        for _, player in pairs(Players:GetPlayers()) do
            local username = player.Name:lower()
            local displayName = player.DisplayName:lower()
            local queryLower = query:lower()
            
            -- Check if query is a substring of username or display name
            if username:find(queryLower, 1, true) or displayName:find(queryLower, 1, true) then
                local score = 0
                
                -- Calculate match score (higher is better)
                if username:sub(1, #queryLower) == queryLower then
                    score = score + 3 -- Prefix match in username is strong
                elseif displayName:sub(1, #queryLower) == queryLower then
                    score = score + 2 -- Prefix match in display name is good
                elseif username:find(queryLower, 1, true) then
                    score = score + 1 -- Substring match in username
                elseif displayName:find(queryLower, 1, true) then
                    score = score + 0.5 -- Substring match in display name
                end
                
                -- Prefer shorter names when matches are equal
                score = score + (1 / (username:len() + 1))
                
                if score > bestScore then
                    bestScore = score
                    bestMatch = player.Name
                end
            end
        end
        
        return bestMatch
    end
    
    -- Check if our chat already exists
    local existingChat = CoreGui:FindFirstChild("EnhancedExperienceChat")
    if existingChat then
        existingChat.Enabled = not existingChat.Enabled
        return existingChat
    end
    
    -- Create main GUI
    local ChatGui = Instance.new("ScreenGui")
    ChatGui.Name = "EnhancedExperienceChat"
    ChatGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ChatGui.ResetOnSpawn = false
    ChatGui.Parent = CoreGui
    
    -- Create toggle button (to bring back after closing)
    local toggleButton = Instance.new("ImageButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 40, 0, 40)
    toggleButton.Position = UDim2.new(0, 10, 0, 10)
    toggleButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    toggleButton.BorderSizePixel = 0
    toggleButton.Image = "rbxasset://textures/ui/chat_dark.png"
    toggleButton.ImageColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.BackgroundTransparency = 0.2
    toggleButton.Visible = false -- Initially hidden
    toggleButton.Parent = ChatGui
    
    -- Add corner to toggle button
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(1, 0)
    toggleCorner.Parent = toggleButton
    
    -- Notification bubble
    local notificationBubble = Instance.new("Frame")
    notificationBubble.Name = "NotificationBubble"
    notificationBubble.Size = UDim2.new(0, 20, 0, 20)
    notificationBubble.Position = UDim2.new(1, -10, 0, -5)
    notificationBubble.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    notificationBubble.BorderSizePixel = 0
    notificationBubble.Visible = false
    notificationBubble.Parent = toggleButton
    
    -- Add corner to notification bubble
    local bubbleCorner = Instance.new("UICorner")
    bubbleCorner.CornerRadius = UDim.new(1, 0)
    bubbleCorner.Parent = notificationBubble
    
    -- Notification count
    local notificationCount = Instance.new("TextLabel")
    notificationCount.Name = "NotificationCount"
    notificationCount.Size = UDim2.new(1, 0, 1, 0)
    notificationCount.BackgroundTransparency = 1
    notificationCount.Text = "0"
    notificationCount.TextColor3 = Color3.fromRGB(255, 255, 255)
    notificationCount.TextSize = 12
    notificationCount.Font = Enum.Font.GothamBold
    notificationCount.Parent = notificationBubble
    
    -- Main chat container
    local chatContainer = Instance.new("Frame")
    chatContainer.Name = "ChatContainer"
    chatContainer.Size = UDim2.new(settings.chatWidth, 0, settings.chatHeight, 0)
    chatContainer.Position = UDim2.new(0, 10, 0, 10)
    chatContainer.BackgroundColor3 = Color3.fromRGB(25, 27, 29)
    chatContainer.BackgroundTransparency = 0.2
    chatContainer.BorderSizePixel = 0
    chatContainer.Parent = ChatGui
    
    -- Add corner
    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(0, 8)
    containerCorner.Parent = chatContainer
    
    -- Title bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = Color3.fromRGB(0, 100, 200)
    titleBar.BackgroundTransparency = 0.2
    titleBar.BorderSizePixel = 0
    titleBar.Parent = chatContainer
    
    -- Add corner to title bar
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = titleBar
    
    -- Title text
    local titleText = Instance.new("TextLabel")
    titleText.Size = UDim2.new(1, -80, 1, 0)
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = "Chat"
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.TextSize = 16
    titleText.Font = Enum.Font.GothamBold
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    -- Settings button
    local settingsButton = Instance.new("ImageButton")
    settingsButton.Size = UDim2.new(0, 30, 0, 30)
    settingsButton.Position = UDim2.new(1, -60, 0, 0)
    settingsButton.BackgroundTransparency = 1
    settingsButton.Image = "rbxasset://textures/ui/Settings/MenuBarAssets/MenuButton.png"
    settingsButton.ImageColor3 = Color3.fromRGB(255, 255, 255)
    settingsButton.Parent = titleBar
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.BackgroundTransparency = 1
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 16
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleBar
    
    -- Messages container
    local messagesFrame = Instance.new("ScrollingFrame")
    messagesFrame.Name = "MessagesFrame"
    messagesFrame.Size = UDim2.new(1, -10, 1, -80)
    messagesFrame.Position = UDim2.new(0, 5, 0, 35)
    messagesFrame.BackgroundTransparency = 1
    messagesFrame.BorderSizePixel = 0
    messagesFrame.ScrollBarThickness = 4
    messagesFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    messagesFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    messagesFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    messagesFrame.ScrollBarImageColor3 = Color3.fromRGB(200, 200, 200)
    -- Add extra padding at the bottom to ensure last message is visible
    messagesFrame.BottomImage = "rbxasset://textures/ui/Scroll/scroll-bottom.png"
    messagesFrame.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
    messagesFrame.TopImage = "rbxasset://textures/ui/Scroll/scroll-top.png"
    messagesFrame.Parent = chatContainer
    
    -- Add list layout
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 5)
    layout.Parent = messagesFrame
    
    -- Add padding
    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 5)
    padding.PaddingBottom = UDim.new(0, 30) -- Extra padding at bottom to ensure last message is visible
    padding.PaddingLeft = UDim.new(0, 5)
    padding.PaddingRight = UDim.new(0, 5)
    padding.Parent = messagesFrame
    
    -- Chat input container
    local inputContainer = Instance.new("Frame")
    inputContainer.Name = "InputContainer"
    inputContainer.Size = UDim2.new(1, -10, 0, 35)
    inputContainer.Position = UDim2.new(0, 5, 1, -40)
    inputContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    inputContainer.BackgroundTransparency = 0.2
    inputContainer.BorderSizePixel = 0
    inputContainer.Parent = chatContainer
    
    -- Add corner to input container
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 8)
    inputCorner.Parent = inputContainer
    
    -- Chat input box
    local inputBox = Instance.new("TextBox")
    inputBox.Name = "InputBox"
    inputBox.Size = UDim2.new(1, -70, 1, -10)
    inputBox.Position = UDim2.new(0, 10, 0, 5)
    inputBox.BackgroundTransparency = 1
    inputBox.Text = ""
    inputBox.PlaceholderText = "Type your message here..."
    inputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    inputBox.PlaceholderColor3 = Color3.fromRGB(180, 180, 180)
    inputBox.TextSize = settings.fontSize
    inputBox.Font = Enum.Font.Gotham
    inputBox.TextXAlignment = Enum.TextXAlignment.Left
    inputBox.ClearTextOnFocus = false
    inputBox.Parent = inputContainer
    
    -- Send button
    local sendButton = Instance.new("TextButton")
    sendButton.Name = "SendButton"
    sendButton.Size = UDim2.new(0, 50, 0, 25)
    sendButton.Position = UDim2.new(1, -60, 0.5, -12.5)
    sendButton.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    sendButton.BorderSizePixel = 0
    sendButton.Text = "Send"
    sendButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    sendButton.TextSize = 14
    sendButton.Font = Enum.Font.GothamBold
    sendButton.Parent = inputContainer
    
    -- Add corner to send button
    local sendCorner = Instance.new("UICorner")
    sendCorner.CornerRadius = UDim.new(0, 4)
    sendCorner.Parent = sendButton
    
    -- Settings panel (initially hidden)
    local settingsPanel = Instance.new("Frame")
    settingsPanel.Name = "SettingsPanel"
    settingsPanel.Size = UDim2.new(0, 300, 0, 400)
    settingsPanel.Position = UDim2.new(1, 10, 0, 0)
    settingsPanel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    settingsPanel.BackgroundTransparency = 0.1
    settingsPanel.BorderSizePixel = 0
    settingsPanel.Visible = false
    settingsPanel.Parent = chatContainer
    
    -- Add corner to settings panel
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 8)
    settingsCorner.Parent = settingsPanel
    
    -- Settings title bar
    local settingsTitleBar = Instance.new("Frame")
    settingsTitleBar.Name = "TitleBar"
    settingsTitleBar.Size = UDim2.new(1, 0, 0, 30)
    settingsTitleBar.BackgroundColor3 = Color3.fromRGB(0, 100, 200)
    settingsTitleBar.BackgroundTransparency = 0.2
    settingsTitleBar.BorderSizePixel = 0
    settingsTitleBar.Parent = settingsPanel
    
    -- Add corner to settings title bar
    local settingsTitleCorner = Instance.new("UICorner")
    settingsTitleCorner.CornerRadius = UDim.new(0, 8)
    settingsTitleCorner.Parent = settingsTitleBar
    
    -- Settings title text
    local settingsTitleText = Instance.new("TextLabel")
    settingsTitleText.Size = UDim2.new(1, -40, 1, 0)
    settingsTitleText.Position = UDim2.new(0, 10, 0, 0)
    settingsTitleText.BackgroundTransparency = 1
    settingsTitleText.Text = "Chat Settings"
    settingsTitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    settingsTitleText.TextSize = 16
    settingsTitleText.Font = Enum.Font.GothamBold
    settingsTitleText.TextXAlignment = Enum.TextXAlignment.Left
    settingsTitleText.Parent = settingsTitleBar
    
    -- Settings close button
    local settingsCloseButton = Instance.new("TextButton")
    settingsCloseButton.Size = UDim2.new(0, 30, 0, 30)
    settingsCloseButton.Position = UDim2.new(1, -30, 0, 0)
    settingsCloseButton.BackgroundTransparency = 1
    settingsCloseButton.Text = "X"
    settingsCloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    settingsCloseButton.TextSize = 16
    settingsCloseButton.Font = Enum.Font.GothamBold
    settingsCloseButton.Parent = settingsTitleBar
    
    -- Settings scroll frame
    local settingsScroll = Instance.new("ScrollingFrame")
    settingsScroll.Size = UDim2.new(1, -20, 1, -40)
    settingsScroll.Position = UDim2.new(0, 10, 0, 35)
    settingsScroll.BackgroundTransparency = 1
    settingsScroll.BorderSizePixel = 0
    settingsScroll.ScrollBarThickness = 4
    settingsScroll.ScrollingDirection = Enum.ScrollingDirection.Y
    -- Use AutomaticCanvasSize for infinite scrolling
    settingsScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    settingsScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
    settingsScroll.ScrollBarImageColor3 = Color3.fromRGB(200, 200, 200)
    settingsScroll.Parent = settingsPanel
    
    -- Settings layout
    local settingsLayout = Instance.new("UIListLayout")
    settingsLayout.Padding = UDim.new(0, 10)
    settingsLayout.Parent = settingsScroll
    
    -- Add padding to settings scroll
    local settingsPadding = Instance.new("UIPadding")
    settingsPadding.PaddingTop = UDim.new(0, 5)
    settingsPadding.PaddingBottom = UDim.new(0, 20) -- Extra padding at bottom
    settingsPadding.PaddingLeft = UDim.new(0, 5)
    settingsPadding.PaddingRight = UDim.new(0, 5)
    settingsPadding.Parent = settingsScroll
    
    -- Function to create a toggle setting
    local function CreateToggleSetting(name, description, initialValue, callback)
        local settingFrame = Instance.new("Frame")
        settingFrame.Name = name
        settingFrame.Size = UDim2.new(1, 0, 0, 60)
        settingFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        settingFrame.BackgroundTransparency = 0.5
        settingFrame.BorderSizePixel = 0
        
        -- Add corner
        local settingCorner = Instance.new("UICorner")
        settingCorner.CornerRadius = UDim.new(0, 4)
        settingCorner.Parent = settingFrame
        
        -- Setting name
        local settingName = Instance.new("TextLabel")
        settingName.Size = UDim2.new(1, -60, 0, 20)
        settingName.Position = UDim2.new(0, 10, 0, 5)
        settingName.BackgroundTransparency = 1
        settingName.Text = name
        settingName.TextColor3 = Color3.fromRGB(255, 255, 255)
        settingName.TextSize = 14
        settingName.Font = Enum.Font.GothamBold
        settingName.TextXAlignment = Enum.TextXAlignment.Left
        settingName.Parent = settingFrame
        
        -- Setting description
        local settingDesc = Instance.new("TextLabel")
        settingDesc.Size = UDim2.new(1, -60, 0, 30)
        settingDesc.Position = UDim2.new(0, 10, 0, 25)
        settingDesc.BackgroundTransparency = 1
        settingDesc.Text = description
        settingDesc.TextColor3 = Color3.fromRGB(200, 200, 200)
        settingDesc.TextSize = 12
        settingDesc.Font = Enum.Font.Gotham
        settingDesc.TextWrapped = true
        settingDesc.TextXAlignment = Enum.TextXAlignment.Left
        settingDesc.Parent = settingFrame
        
        -- Toggle button background
        local toggleBg = Instance.new("Frame")
        toggleBg.Name = "toggleBg"
        toggleBg.Size = UDim2.new(0, 40, 0, 20)
        toggleBg.Position = UDim2.new(1, -50, 0, 20)
        toggleBg.BackgroundColor3 = initialValue and Color3.fromRGB(0, 120, 215) or Color3.fromRGB(80, 80, 80)
        toggleBg.BorderSizePixel = 0
        toggleBg.Parent = settingFrame
        
        -- Add corner to toggle background
        local toggleBgCorner = Instance.new("UICorner")
        toggleBgCorner.CornerRadius = UDim.new(1, 0)
        toggleBgCorner.Parent = toggleBg
        
        -- Toggle button knob
        local toggleKnob = Instance.new("Frame")
        toggleKnob.Name = "toggleKnob"
        toggleKnob.Size = UDim2.new(0, 16, 0, 16)
        toggleKnob.Position = UDim2.new(initialValue and 1 or 0, initialValue and -18 or 2, 0.5, -8)
        toggleKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        toggleKnob.BorderSizePixel = 0
        toggleKnob.Parent = toggleBg
        
        -- Add corner to toggle knob
        local toggleKnobCorner = Instance.new("UICorner")
        toggleKnobCorner.CornerRadius = UDim.new(1, 0)
        toggleKnobCorner.Parent = toggleKnob
        
        -- Toggle button functionality
        local isToggled = initialValue
        
        toggleBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                isToggled = not isToggled
                toggleBg.BackgroundColor3 = isToggled and Color3.fromRGB(0, 120, 215) or Color3.fromRGB(80, 80, 80)
                toggleKnob:TweenPosition(
                    UDim2.new(isToggled and 1 or 0, isToggled and -18 or 2, 0.5, -8),
                    Enum.EasingDirection.InOut,
                    Enum.EasingStyle.Quad,
                    0.2,
                    true
                )
                callback(isToggled)
            end
        end)
        
        settingFrame.Parent = settingsScroll
        return settingFrame, function() return isToggled end
    end
    
    -- Function to create a slider setting
    local function CreateSliderSetting(name, description, min, max, initialValue, callback)
        local settingFrame = Instance.new("Frame")
        settingFrame.Size = UDim2.new(1, 0, 0, 80)
        settingFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        settingFrame.BackgroundTransparency = 0.5
        settingFrame.BorderSizePixel = 0
        
        -- Add corner
        local settingCorner = Instance.new("UICorner")
        settingCorner.CornerRadius = UDim.new(0, 4)
        settingCorner.Parent = settingFrame
        
        -- Setting name
        local settingName = Instance.new("TextLabel")
        settingName.Size = UDim2.new(1, -60, 0, 20)
        settingName.Position = UDim2.new(0, 10, 0, 5)
        settingName.BackgroundTransparency = 1
        settingName.Text = name
        settingName.TextColor3 = Color3.fromRGB(255, 255, 255)
        settingName.TextSize = 14
        settingName.Font = Enum.Font.GothamBold
        settingName.TextXAlignment = Enum.TextXAlignment.Left
        settingName.Parent = settingFrame
        
        -- Setting description
        local settingDesc = Instance.new("TextLabel")
        settingDesc.Size = UDim2.new(1, -60, 0, 30)
        settingDesc.Position = UDim2.new(0, 10, 0, 25)
        settingDesc.BackgroundTransparency = 1
        settingDesc.Text = description
        settingDesc.TextColor3 = Color3.fromRGB(200, 200, 200)
        settingDesc.TextSize = 12
        settingDesc.Font = Enum.Font.Gotham
        settingDesc.TextWrapped = true
        settingDesc.TextXAlignment = Enum.TextXAlignment.Left
        settingDesc.Parent = settingFrame
        
        -- Value display
        local valueDisplay = Instance.new("TextLabel")
        valueDisplay.Size = UDim2.new(0, 40, 0, 20)
        valueDisplay.Position = UDim2.new(1, -50, 0, 5)
        valueDisplay.BackgroundTransparency = 1
        valueDisplay.Text = tostring(initialValue)
        valueDisplay.TextColor3 = Color3.fromRGB(255, 255, 255)
        valueDisplay.TextSize = 14
        valueDisplay.Font = Enum.Font.GothamBold
        valueDisplay.Parent = settingFrame
        
        -- Slider background
        local sliderBg = Instance.new("Frame")
        sliderBg.Size = UDim2.new(1, -20, 0, 6)
        sliderBg.Position = UDim2.new(0, 10, 0, 60)
        sliderBg.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        sliderBg.BorderSizePixel = 0
        sliderBg.Parent = settingFrame
        
        -- Add corner to slider background
        local sliderBgCorner = Instance.new("UICorner")
        sliderBgCorner.CornerRadius = UDim.new(1, 0)
        sliderBgCorner.Parent = sliderBg
        
        -- Slider fill
        local sliderFill = Instance.new("Frame")
        sliderFill.Size = UDim2.new((initialValue - min) / (max - min), 0, 1, 0)
        sliderFill.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
        sliderFill.BorderSizePixel = 0
        sliderFill.Parent = sliderBg
        
        -- Add corner to slider fill
        local sliderFillCorner = Instance.new("UICorner")
        sliderFillCorner.CornerRadius = UDim.new(1, 0)
        sliderFillCorner.Parent = sliderFill
        
        -- Slider knob
        local sliderKnob = Instance.new("Frame")
        sliderKnob.Size = UDim2.new(0, 16, 0, 16)
        sliderKnob.Position = UDim2.new((initialValue - min) / (max - min), -8, 0.5, -8)
        sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        sliderKnob.BorderSizePixel = 0
        sliderKnob.Parent = sliderBg
        
        -- Add corner to slider knob
        local sliderKnobCorner = Instance.new("UICorner")
        sliderKnobCorner.CornerRadius = UDim.new(1, 0)
        sliderKnobCorner.Parent = sliderKnob
        
        -- Slider functionality
        local function updateSlider(input)
            local pos = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * pos
            
            -- Round to nearest integer if min and max are integers
            if math.floor(min) == min and math.floor(max) == max then
                value = math.floor(value + 0.5)
            else
                -- Round to 2 decimal places
                value = math.floor(value * 100 + 0.5) / 100
            end
            
            sliderFill.Size = UDim2.new(pos, 0, 1, 0)
            sliderKnob.Position = UDim2.new(pos, -8, 0.5, -8)
            valueDisplay.Text = tostring(value)
            callback(value)
        end
        
        local dragging = false
        
        sliderBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                updateSlider(input)
            end
        end)
        
        sliderBg.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                updateSlider(input)
            end
        end)
        
        settingFrame.Parent = settingsScroll
        return settingFrame
    end
    
    -- Function to create a text input setting
    local function CreateTextInputSetting(name, description, placeholder, callback)
        local settingFrame = Instance.new("Frame")
        settingFrame.Size = UDim2.new(1, 0, 0, 90)
        settingFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        settingFrame.BackgroundTransparency = 0.5
        settingFrame.BorderSizePixel = 0
        
        -- Add corner
        local settingCorner = Instance.new("UICorner")
        settingCorner.CornerRadius = UDim.new(0, 4)
        settingCorner.Parent = settingFrame
        
        -- Setting name
        local settingName = Instance.new("TextLabel")
        settingName.Size = UDim2.new(1, -20, 0, 20)
        settingName.Position = UDim2.new(0, 10, 0, 5)
        settingName.BackgroundTransparency = 1
        settingName.Text = name
        settingName.TextColor3 = Color3.fromRGB(255, 255, 255)
        settingName.TextSize = 14
        settingName.Font = Enum.Font.GothamBold
        settingName.TextXAlignment = Enum.TextXAlignment.Left
        settingName.Parent = settingFrame
        
        -- Setting description
        local settingDesc = Instance.new("TextLabel")
        settingDesc.Size = UDim2.new(1, -20, 0, 30)
        settingDesc.Position = UDim2.new(0, 10, 0, 25)
        settingDesc.BackgroundTransparency = 1
        settingDesc.Text = description
        settingDesc.TextColor3 = Color3.fromRGB(200, 200, 200)
        settingDesc.TextSize = 12
        settingDesc.Font = Enum.Font.Gotham
        settingDesc.TextWrapped = true
        settingDesc.TextXAlignment = Enum.TextXAlignment.Left
        settingDesc.Parent = settingFrame
        
        -- Text input
        local textInput = Instance.new("TextBox")
        textInput.Size = UDim2.new(1, -20, 0, 30)
        textInput.Position = UDim2.new(0, 10, 0, 55)
        textInput.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        textInput.BackgroundTransparency = 0.5
        textInput.BorderSizePixel = 0
        textInput.Text = ""
        textInput.PlaceholderText = placeholder
        textInput.TextColor3 = Color3.fromRGB(255, 255, 255)
        textInput.PlaceholderColor3 = Color3.fromRGB(180, 180, 180)
        textInput.TextSize = 14
        textInput.Font = Enum.Font.Gotham
        textInput.TextXAlignment = Enum.TextXAlignment.Left
        textInput.ClearTextOnFocus = false
        textInput.Parent = settingFrame
        
        -- Add corner to text input
        local textInputCorner = Instance.new("UICorner")
        textInputCorner.CornerRadius = UDim.new(0, 4)
        textInputCorner.Parent = textInput
        
        -- Add padding to text input
        local textInputPadding = Instance.new("UIPadding")
        textInputPadding.PaddingLeft = UDim.new(0, 5)
        textInputPadding.Parent = textInput
        
        -- Text input functionality
        textInput.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                callback(textInput.Text)
                textInput.Text = ""
            end
        end)
        
        settingFrame.Parent = settingsScroll
        return settingFrame, textInput
    end
    
    -- Function to create a label setting
    local function CreateLabelSetting(name, description)
        local settingFrame = Instance.new("Frame")
        settingFrame.Size = UDim2.new(1, 0, 0, 90)
        settingFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        settingFrame.BackgroundTransparency = 0.5
        settingFrame.BorderSizePixel = 0
        
        -- Add corner
        local settingCorner = Instance.new("UICorner")
        settingCorner.CornerRadius = UDim.new(0, 4)
        settingCorner.Parent = settingFrame
        
        -- Setting name
        local settingName = Instance.new("TextLabel")
        settingName.Size = UDim2.new(1, -20, 0, 20)
        settingName.Position = UDim2.new(0, 10, 0, 5)
        settingName.BackgroundTransparency = 1
        settingName.Text = name
        settingName.TextColor3 = Color3.fromRGB(255, 255, 255)
        settingName.TextSize = 14
        settingName.Font = Enum.Font.GothamBold
        settingName.TextXAlignment = Enum.TextXAlignment.Left
        settingName.Parent = settingFrame
        
        -- Setting description
        local settingDesc = Instance.new("TextLabel")
        settingDesc.Size = UDim2.new(1, -20, 0, 30)
        settingDesc.Position = UDim2.new(0, 10, 0, 25)
        settingDesc.BackgroundTransparency = 1
        settingDesc.Text = description
        settingDesc.TextColor3 = Color3.fromRGB(200, 200, 200)
        settingDesc.TextSize = 12
        settingDesc.Font = Enum.Font.Gotham
        settingDesc.TextWrapped = true
        settingDesc.TextXAlignment = Enum.TextXAlignment.Left
        settingDesc.Parent = settingFrame
        
        -- Label content
        local labelContent = Instance.new("TextLabel")
        labelContent.Size = UDim2.new(1, -20, 0, 30)
        labelContent.Position = UDim2.new(0, 10, 0, 55)
        labelContent.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        labelContent.BackgroundTransparency = 0.5
        labelContent.BorderSizePixel = 0
        labelContent.Text = ""
        labelContent.TextColor3 = Color3.fromRGB(255, 255, 255)
        labelContent.TextSize = 14
        labelContent.Font = Enum.Font.Gotham
        labelContent.TextWrapped = true
        labelContent.TextXAlignment = Enum.TextXAlignment.Left
        labelContent.Parent = settingFrame
        
        -- Add corner to label content
        local labelContentCorner = Instance.new("UICorner")
        labelContentCorner.CornerRadius = UDim.new(0, 4)
        labelContentCorner.Parent = labelContent
        
        -- Add padding to label content
        local labelContentPadding = Instance.new("UIPadding")
        labelContentPadding.PaddingLeft = UDim.new(0, 5)
        labelContentPadding.PaddingRight = UDim.new(0, 5)
        labelContentPadding.Parent = labelContent
        
        settingFrame.Parent = settingsScroll
        return settingFrame, labelContent
    end
    
    -- Function to create a button setting
    local function CreateButtonSetting(name, description, buttonText, callback)
        local settingFrame = Instance.new("Frame")
        settingFrame.Size = UDim2.new(1, 0, 0, 90)
        settingFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        settingFrame.BackgroundTransparency = 0.5
        settingFrame.BorderSizePixel = 0
        
        -- Add corner
        local settingCorner = Instance.new("UICorner")
        settingCorner.CornerRadius = UDim.new(0, 4)
        settingCorner.Parent = settingFrame
        
        -- Setting name
        local settingName = Instance.new("TextLabel")
        settingName.Size = UDim2.new(1, -20, 0, 20)
        settingName.Position = UDim2.new(0, 10, 0, 5)
        settingName.BackgroundTransparency = 1
        settingName.Text = name
        settingName.TextColor3 = Color3.fromRGB(255, 255, 255)
        settingName.TextSize = 14
        settingName.Font = Enum.Font.GothamBold
        settingName.TextXAlignment = Enum.TextXAlignment.Left
        settingName.Parent = settingFrame
        
        -- Setting description
        local settingDesc = Instance.new("TextLabel")
        settingDesc.Size = UDim2.new(1, -20, 0, 30)
        settingDesc.Position = UDim2.new(0, 10, 0, 25)
        settingDesc.BackgroundTransparency = 1
        settingDesc.Text = description
        settingDesc.TextColor3 = Color3.fromRGB(200, 200, 200)
        settingDesc.TextSize = 12
        settingDesc.Font = Enum.Font.Gotham
        settingDesc.TextWrapped = true
        settingDesc.TextXAlignment = Enum.TextXAlignment.Left
        settingDesc.Parent = settingFrame
        
        -- Button
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(0.5, 0, 0, 30)
        button.Position = UDim2.new(0.25, 0, 0, 55)
        button.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
        button.BorderSizePixel = 0
        button.Text = buttonText
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextSize = 14
        button.Font = Enum.Font.GothamBold
        button.Parent = settingFrame
        
        -- Add corner to button
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 4)
        buttonCorner.Parent = button
        
        -- Button functionality
        button.MouseButton1Click:Connect(callback)
        
        settingFrame.Parent = settingsScroll
        return settingFrame, button
    end
    
    -- Function to clear all messages
    local function ClearMessages()
        for _, child in pairs(messagesFrame:GetChildren()) do
            if child:IsA("Frame") then
                child:Destroy()
            end
        end
    end
    
    -- Create settings
    local autoScrollToggle = CreateToggleSetting(
        "Auto Scroll",
        "Automatically scroll to the bottom when new messages arrive",
        settings.autoScroll,
        function(value)
            settings.autoScroll = value
            if value then
                -- Scroll to bottom immediately when enabled
                task.defer(function()
                    messagesFrame.CanvasPosition = Vector2.new(0, messagesFrame.CanvasSize.Y.Offset)
                end)
            end
        end
    )
    
    local showTimeDisplayToggle = CreateToggleSetting(
        "Show Time in Messages",
        "Display timestamp with each message in the chat window",
        settings.showTimeDisplay,
        function(value)
            settings.showTimeDisplay = value
        end
    )
    
    local showTimeSendToggle = CreateToggleSetting(
        "Include Time When Sending",
        "Add timestamp to outgoing messages (visible to everyone)",
        settings.showTimeSend,
        function(value)
            settings.showTimeSend = value
        end
    )
    
    local showNotificationsToggle = CreateToggleSetting(
        "Show Notifications",
        "Display notification count for unread messages",
        settings.showNotifications,
        function(value)
            settings.showNotifications = value
            if not value then
                notificationBubble.Visible = false
            end
        end
    )
    
    local localPlayerChatYellowToggle = CreateToggleSetting(
        "Local Player Chat Yellow",
        "Show your own messages in yellow",
        settings.localPlayerChatYellow,
        function(value)
            settings.localPlayerChatYellow = value
            
            -- Update existing messages
            for _, child in pairs(messagesFrame:GetChildren()) do
                if child:IsA("Frame") and child:FindFirstChild("UsernameValue") then
                    local username = child.UsernameValue.Value
                    if username == LocalPlayer.Name then
                        local messageLabel = child:FindFirstChild("TextMessage"):FindFirstChild("BodyText")
                        if messageLabel then
                            messageLabel.TextColor3 = value and Color3.fromRGB(255, 255, 0) or Color3.fromRGB(255, 255, 255)
                        end
                    end
                end
            end
        end
    )
    
    local fontSizeSlider = CreateSliderSetting(
        "Font Size",
        "Adjust the size of text in messages",
        10, 20, settings.fontSize,
        function(value)
            settings.fontSize = value
            inputBox.TextSize = value
            
            -- Update existing messages
            for _, child in pairs(messagesFrame:GetChildren()) do
                if child:IsA("Frame") then
                    local messageLabel = child:FindFirstChild("TextMessage"):FindFirstChild("BodyText")
                    if messageLabel then
                        messageLabel.TextSize = value
                    end
                end
            end
        end
    )
    
    local chatWidthSlider = CreateSliderSetting(
        "Chat Width",
        "Adjust the width of the chat window",
        0.2, 0.5, settings.chatWidth,
        function(value)
            settings.chatWidth = value
            chatContainer.Size = UDim2.new(value, 0, settings.chatHeight, 0)
        end
    )
    
    local chatHeightSlider = CreateSliderSetting(
        "Chat Height",
        "Adjust the height of the chat window",
        0.3, 0.7, settings.chatHeight,
        function(value)
            settings.chatHeight = value
            chatContainer.Size = UDim2.new(settings.chatWidth, 0, value, 0)
        end
    )
    
    -- Clear chat button
    local clearChatButton = CreateButtonSetting(
        "Clear Chat",
        "Remove all messages from the chat window",
        "Clear Chat",
        function()
            ClearMessages()
        end
    )
    
    -- Auto clear chat toggle
    local autoClearChatToggle = CreateToggleSetting(
        "Auto Clear Chat",
        "Automatically clear chat after specified time",
        settings.autoClearChat,
        function(value)
            settings.autoClearChat = value
            state.lastClearTime = os.time() -- Reset timer when toggled
        end
    )
    
    -- Auto clear delay setting
    local autoClearDelaySlider = CreateSliderSetting(
        "Auto Clear Delay (Minutes)",
        "Time before chat is automatically cleared",
        1, 60, settings.autoClearDelay,
        function(value)
            settings.autoClearDelay = value
        end
    )
    
    -- Special users section
    local specialUsersLabel, specialUsersContent = CreateLabelSetting(
        "Special Users",
        "Users whose messages are highlighted in green"
    )
    
    -- Function to update special users label
    local function UpdateSpecialUsersLabel()
        local userList = ""
        for username, _ in pairs(settings.specialUsers) do
            if userList ~= "" then
                userList = userList .. ", "
            end
            userList = userList .. username
        end
        specialUsersContent.Text = userList ~= "" and userList or "None"
    end
    
    -- Add to special users
    local addSpecialUserInput = CreateTextInputSetting(
        "Add Special User",
        "Add a user to highlight their messages in green",
        "Enter username",
        function(text)
            local username = FindClosestUsername(text)
            if username then
                settings.specialUsers[username] = true
                UpdateSpecialUsersLabel()
                
                -- Update existing messages
                for _, child in pairs(messagesFrame:GetChildren()) do
                    if child:IsA("Frame") and child:FindFirstChild("UsernameValue") then
                        local msgUsername = child.UsernameValue.Value
                        if msgUsername == username then
                            local messageLabel = child:FindFirstChild("TextMessage"):FindFirstChild("BodyText")
                            if messageLabel then
                                messageLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
                            end
                        end
                    end
                end
            end
        end
    )
    
    -- Remove from special users
    local removeSpecialUserInput = CreateTextInputSetting(
        "Remove Special User",
        "Remove a user from the special users list",
        "Enter username",
        function(text)
            local username = nil
            local bestMatch = nil
            local bestScore = 0
            
            -- Find closest match among special users
            for specialUser, _ in pairs(settings.specialUsers) do
                local score = 0
                local queryLower = text:lower()
                local userLower = specialUser:lower()
                
                if userLower:find(queryLower, 1, true) then
                    if userLower:sub(1, #queryLower) == queryLower then
                        score = 3 -- Prefix match is strong
                    else
                        score = 1 -- Substring match
                    end
                    
                    -- Prefer shorter names when matches are equal
                    score = score + (1 / (userLower:len() + 1))
                    
                    if score > bestScore then
                        bestScore = score
                        bestMatch = specialUser
                    end
                end
            end
            
            username = bestMatch
            
            if username then
                settings.specialUsers[username] = nil
                UpdateSpecialUsersLabel()
                
                -- Update existing messages
                for _, child in pairs(messagesFrame:GetChildren()) do
                    if child:IsA("Frame") and child:FindFirstChild("UsernameValue") then
                        local msgUsername = child.UsernameValue.Value
                        if msgUsername == username and msgUsername ~= LocalPlayer.Name then
                            local messageLabel = child:FindFirstChild("TextMessage"):FindFirstChild("BodyText")
                            if messageLabel then
                                messageLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            end
                        end
                    end
                end
            end
        end
    )
    
    -- Initialize special users label
    UpdateSpecialUsersLabel()
    
    -- Function to add a message
    local function AddMessage(username, message, isSystem)
        -- Increment unread count if chat is minimized
        if not chatContainer.Visible and settings.showNotifications then
            state.unreadMessages = state.unreadMessages + 1
            notificationCount.Text = tostring(state.unreadMessages)
            notificationBubble.Visible = state.unreadMessages > 0
        end
        
        local messageFrame = Instance.new("Frame")
        messageFrame.Size = UDim2.new(1, 0, 0, 0)
        messageFrame.AutomaticSize = Enum.AutomaticSize.Y
        messageFrame.BackgroundTransparency = 0.7
        messageFrame.BackgroundColor3 = isSystem and Color3.fromRGB(80, 40, 40) or Color3.fromRGB(40, 40, 40)
        messageFrame.BorderSizePixel = 0
        
        -- Store username for reference
        if not isSystem then
            local usernameValue = Instance.new("StringValue")
            usernameValue.Name = "UsernameValue"
            usernameValue.Value = username
            usernameValue.Parent = messageFrame
        end
        
        -- Add corner
        local msgCorner = Instance.new("UICorner")
        msgCorner.CornerRadius = UDim.new(0, 4)
        msgCorner.Parent = messageFrame
        
        -- Text container
        local textMessage = Instance.new("Frame")
        textMessage.Name = "TextMessage"
        textMessage.Size = UDim2.new(1, 0, 0, 0)
        textMessage.AutomaticSize = Enum.AutomaticSize.Y
        textMessage.BackgroundTransparency = 1
        textMessage.Parent = messageFrame
        
        -- Format message with time if enabled
        local displayMessage = message
        if settings.showTimeDisplay and not isSystem then
            -- Check if message already has a time prefix (from someone else sending with time)
            if not displayMessage:match("^%[%d+:%d+ [AP]M%]") then
                displayMessage = "[" .. GetCurrentTime() .. "] " .. displayMessage
            end
        end
        
        if isSystem then
            -- System message (single label)
            local messageLabel = Instance.new("TextLabel")
            messageLabel.Name = "BodyText"
            messageLabel.Size = UDim2.new(1, -10, 0, 0)
            messageLabel.Position = UDim2.new(0, 5, 0, 5)
            messageLabel.BackgroundTransparency = 1
            messageLabel.Text = displayMessage
            messageLabel.TextColor3 = Color3.fromRGB(255, 200, 200)
            messageLabel.TextSize = settings.fontSize
            messageLabel.Font = Enum.Font.Gotham
            messageLabel.TextWrapped = true
            messageLabel.TextXAlignment = Enum.TextXAlignment.Left
            messageLabel.AutomaticSize = Enum.AutomaticSize.Y
            messageLabel.RichText = true
            messageLabel.Parent = textMessage
        else
            -- Username label
            local usernameLabel = Instance.new("TextLabel")
            usernameLabel.Size = UDim2.new(1, -10, 0, 20)
            usernameLabel.Position = UDim2.new(0, 5, 0, 5)
            usernameLabel.BackgroundTransparency = 1
            usernameLabel.Text = username
            usernameLabel.TextColor3 = Color3.fromRGB(200, 230, 255)
            usernameLabel.TextSize = settings.fontSize
            usernameLabel.Font = Enum.Font.GothamBold
            usernameLabel.TextXAlignment = Enum.TextXAlignment.Left
            usernameLabel.Parent = textMessage
            
            -- Message text
            local messageLabel = Instance.new("TextLabel")
            messageLabel.Name = "BodyText"
            messageLabel.Size = UDim2.new(1, -10, 0, 0)
            messageLabel.Position = UDim2.new(0, 5, 0, 25)
            messageLabel.BackgroundTransparency = 1
            messageLabel.Text = displayMessage
            
            -- Determine text color based on settings
            if username == LocalPlayer.Name and settings.localPlayerChatYellow then
                messageLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- Yellow for local player
            elseif settings.specialUsers[username] then
                messageLabel.TextColor3 = Color3.fromRGB(100, 255, 100) -- Green for special users
            else
                messageLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White for others
            end
            
            messageLabel.TextSize = settings.fontSize
            messageLabel.Font = Enum.Font.Gotham
            messageLabel.TextWrapped = true
            messageLabel.TextXAlignment = Enum.TextXAlignment.Left
            messageLabel.AutomaticSize = Enum.AutomaticSize.Y
            messageLabel.RichText = true
            messageLabel.Parent = textMessage
        end
        
        -- Add padding at the bottom
        local bottomPadding = Instance.new("Frame")
        bottomPadding.Size = UDim2.new(1, 0, 0, 5)
        bottomPadding.Position = UDim2.new(0, 0, 1, 0)
        bottomPadding.BackgroundTransparency = 1
        bottomPadding.LayoutOrder = 3
        bottomPadding.Parent = messageFrame
        
        messageFrame.Parent = messagesFrame
        
        -- Auto scroll to bottom if enabled
        if settings.autoScroll and not state.userScrolled then
            -- Use a slight delay to ensure the canvas size has updated
            task.defer(function()
                messagesFrame.CanvasPosition = Vector2.new(0, math.max(0, messagesFrame.CanvasSize.Y.Offset - messagesFrame.AbsoluteSize.Y))
            end)
        end
    end
    
    -- Function to send a message
    local function SendMessage()
        local message = inputBox.Text
        if message:gsub("%s", "") ~= "" then
            -- Format message with time if enabled
            local messageToSend = message
            if settings.showTimeSend then
                messageToSend = "[" .. GetCurrentTime() .. "] " .. message
            end
            
            -- Try to use TextChatService to send the message
            local success, err = pcall(function()
                if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                    local textChannel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
                    if textChannel then
                        textChannel:SendAsync(messageToSend)
                    else
                        -- Fallback if channel not found
                        AddMessage(LocalPlayer.Name, message, false)
                    end
                else
                    -- Fallback for legacy chat
                    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(messageToSend, "All")
                end
            end)
            
            if not success then
                -- If TextChatService fails, add message locally
                AddMessage(LocalPlayer.Name, message, false)
            end
            
            inputBox.Text = ""
        end
    end
    
    -- Connect send button
    sendButton.MouseButton1Click:Connect(SendMessage)
    
    -- Connect enter key
    inputBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            SendMessage()
        end
    end)
    
    -- Connect TextChatService to receive messages
    local function ConnectTextChatService()
        local success, err = pcall(function()
            if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                local textChannel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
                if textChannel then
                    textChannel.MessageReceived:Connect(function(message)
                        AddMessage(message.TextSource.Name, message.Text, false)
                    end)
                end
            end
        end)
        
        if not success then
            -- Try to connect to legacy chat
            local success2, err2 = pcall(function()
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(data)
                    if data and data.FromSpeaker and data.Message then
                        AddMessage(data.FromSpeaker, data.Message, false)
                    end
                end)
            end)
            
            if not success2 then
                -- If all fails, don't show any message
            end
        end
    end
    
    -- Try to connect to chat service
    ConnectTextChatService()
    
    -- Make the chat container draggable
    local isDragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        chatContainer.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            dragStart = input.Position
            startPos = chatContainer.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    isDragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    -- Make the settings panel draggable
    local isSettingsDragging = false
    local settingsDragInput
    local settingsDragStart
    local settingsStartPos
    
    local function updateSettings(input)
        local delta = input.Position - settingsDragStart
        settingsPanel.Position = UDim2.new(settingsStartPos.X.Scale, settingsStartPos.X.Offset + delta.X, settingsStartPos.Y.Scale, settingsStartPos.Y.Offset + delta.Y)
    end
    
    settingsTitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isSettingsDragging = true
            settingsDragStart = input.Position
            settingsStartPos = settingsPanel.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    isSettingsDragging = false
                end
            end)
        end
    end)
    
    settingsTitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            settingsDragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and isDragging then
            update(input)
        elseif input == settingsDragInput and isSettingsDragging then
            updateSettings(input)
        end
    end)
    
    -- Toggle button functionality
    toggleButton.MouseButton1Click:Connect(function()
        chatContainer.Visible = true
        toggleButton.Visible = false
        
        -- Reset unread count
        state.unreadMessages = 0
        notificationCount.Text = "0"
        notificationBubble.Visible = false
        
        -- Scroll to bottom when opening chat
        task.defer(function()
            messagesFrame.CanvasPosition = Vector2.new(0, math.max(0, messagesFrame.CanvasSize.Y.Offset - messagesFrame.AbsoluteSize.Y))
        end)
    end)
    
    -- Settings button functionality
    settingsButton.MouseButton1Click:Connect(function()
        state.settingsPanelOpen = not state.settingsPanelOpen
        settingsPanel.Visible = state.settingsPanelOpen
    end)
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        chatContainer.Visible = false
        toggleButton.Visible = true
        
        -- Reset unread count
        state.unreadMessages = 0
        notificationCount.Text = "0"
        notificationBubble.Visible = false
    end)
    
    -- Settings close button functionality
    settingsCloseButton.MouseButton1Click:Connect(function()
        settingsPanel.Visible = false
        state.settingsPanelOpen = false
    end)
    
    -- Auto-scroll detection
    messagesFrame.GetPropertyChangedSignal("CanvasPosition"):Connect(function()
        -- If user manually scrolls up, disable auto-scroll temporarily
        if settings.autoScroll and messagesFrame.CanvasPosition.Y < messagesFrame.CanvasSize.Y.Offset - messagesFrame.AbsoluteSize.Y - 50 then
            state.userScrolled = true
        end
        
        -- If user scrolls back to bottom, re-enable auto-scroll
        if state.userScrolled and messagesFrame.CanvasPosition.Y >= messagesFrame.CanvasSize.Y.Offset - messagesFrame.AbsoluteSize.Y - 10 then
            state.userScrolled = false
        end
    end)
    
    -- Handle new messages for auto-scroll
    messagesFrame.GetPropertyChangedSignal("CanvasSize"):Connect(function()
        if settings.autoScroll and not state.userScrolled then
            task.defer(function()
                messagesFrame.CanvasPosition = Vector2.new(0, math.max(0, messagesFrame.CanvasSize.Y.Offset - messagesFrame.AbsoluteSize.Y))
            end)
        end
    end)
    
    -- Auto clear chat functionality
    local function CheckAutoClear()
        if settings.autoClearChat then
            local currentTime = os.time()
            local elapsedMinutes = (currentTime - state.lastClearTime) / 60
            
            if elapsedMinutes >= settings.autoClearDelay then
                ClearMessages()
                state.lastClearTime = currentTime
            end
        end
    end
    
    -- Run auto clear check periodically
    spawn(function()
        while wait(30) do -- Check every 30 seconds
            if ChatGui.Parent then -- Only if GUI still exists
                CheckAutoClear()
            else
                break
            end
        end
    end)
    
    -- Ensure we start at the bottom
    task.defer(function()
        messagesFrame.CanvasPosition = Vector2.new(0, math.max(0, messagesFrame.CanvasSize.Y.Offset - messagesFrame.AbsoluteSize.Y))
    end)
    
    return ChatGui
end

-- Create the enhanced chat
local chat = CreateEnhancedChat()
print("Enhanced chat created successfully!")
end)

addcmd('GameplayPaused',{'GamePause'},function(args, speaker)
while task.wait() do
game.Players.LocalPlayer.GameplayPaused = false
end
end)

addcmd('RemovePrompts',{'Noprompt'},function(args, speaker)
game:GetService("CoreGui").PurchasePromptApp:Destroy()
end)

addcmd('Friendspy',{'tellfriends'},function(args, speaker)
local Players = game:GetService("Players")

local function buildFriendshipList()
    local friendshipList = {}
    local playerList = Players:GetPlayers()

    for i = 1, #playerList do
        local p1 = playerList[i]
        friendshipList[p1.Name] = {}

        for j = 1, #playerList do
            if i ~= j then
                local p2 = playerList[j]
                local success, isFriend = pcall(function()
                    return p1:IsFriendsWith(p2.UserId)
                end)
                if success and isFriend then
                    table.insert(friendshipList[p1.Name], p2.Name)
                end
            end
        end
    end

    return friendshipList
end

local function printFriendships()
    local list = buildFriendshipList()
    print("Friendship list:")
    for player, friends in pairs(list) do
        if #friends > 0 then
            print(player .. " is friends with: " .. table.concat(friends, ", "))
        else
            print(player .. " has no friends in the server.")
        end
    end
end

task.wait(2)
printFriendships()
end)

addcmd('print',{},function(args, speaker)
    local txt = table.concat(args, " ")
    if txt and txt ~= "" then
        print(txt)
    else
        print("Error: Please provide text to print")
    end
end)

addcmd('AuraCraft',{},function(args, speaker)
-- Aura Craft GUI V3.1 - Orion Library Version
-- Mobile Optimized | Fixed Dropdown & Random Equip Issues
-- Real-time player tracking with optimized updates

local OrionLib = loadstring(game:HttpGet(("https://raw.githubusercontent.com/Giangplay/Script/main/Orion_Library_PE_V2.lua")))()

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Variables
local LocalPlayer = Players.LocalPlayer
local coinAmount = 199
local autoDup = false
local autoEquipSameAura = false
local copyDelay = 0.1
local selectedPlayer = nil
local playerList = {}
local playerDropdownOptions = {}
local isAddingAuras = false
local targetAuraCount = 0
local showJoinNotifications = true
local showLeaveNotifications = true
local showEquipNotifications = true
local showAuraAddedNotifications = true
local lastPlayerCount = #Players:GetPlayers()

-- Aura Selector Variables
local auraList = {}
local auraCache = {}
local selectedAuraFromDropdown = ""
local searchQuery = ""
local filteredAuraList = {}
local randomEquipEnabled = false
local randomEquipDelay = 0.5
local autoUpdateTxt = false
local auraDropdown = nil
local lastDropdownUpdate = 0
local dropdownUpdateCooldown = 1

-- File System Variables
local folderName = "auracraft"
local fileName = "auras.txt"

-- Default Aura List
local defaultAuras = {
    "supreme", "hidden", "spy", "super mega energy balls", "energy balls", "ko", "sleep", 
    "water", "earth", "storm", "crown", "cosmic", "rainbow", "lava", "???", "hax", 
    "jackpot", "gold", "super", "black hole", "superhero", "diamond", "star", "waterfall", 
    "challenge", "firefly", "butterfly", "god", "moon", "sky", "alien", "rocket", "death", 
    "life", "time", "darkness", "supernatural", "vip", "void", "yin yang", "monk", 
    "eclipse", "werewolf", "mystery", "sinister", "tornado", "eruption", "metal", "fairy", 
    "infinite", "future", "galaxy", "glacier", "planet", "itadori", "vibrance", "phoenix", 
    "multiverse", "cycle", "wraith", "ninja", "quartz", "bat", "zenith", "devil", "demon", 
    "angel", "snow", "sand", "sandstorm", "alone", "rain", "chained", "treasure", 
    "hypnotic", "ufo", "spirit", "ocean", "tsunami", "speed", "phonk", "eternal", 
    "sunshine", "hellbent", "eternal flame", "raven", "toxic", "tacos", "undefined", 
    "rhythm", "flex", "big head", "chaos", "wildfire", "power", "rose", "science", 
    "wonder", "the only", "plant", "earthquake", "amber", "mermaid", "plasma", "glass", 
    "buddha", "dragon", "aurora borealis", "supervillain", "sad", "aquatic", "necromancer", 
    "wind", "dubstep", "nature", "luck", "meteor", "dream", "nightmare", "medusa", 
    "vision", "sorcerer", "frostbite", "awesome", "giga", "gojo", "bonfire", "swamp", 
    "energy", "divine", "cloud", "cryogen", "magnetic", "annihilation", "harmony", 
    "floral", "north star", "nebula", "air", "robot", "heaven", "dark matter", "plague", 
    "gravity", "shimmer", "techtronic", "knight", "vortex", "boss", "dark angel", 
    "cute", "constellation", "solstice", "blackout", "blizzard", "calm", "unity", 
    "spout", "reflect", "pirate", "corrupt", "drip", "genius", "specter", "abundance", 
    "mirage", "noob", "insane", "mlg", "deception", "poseidon", "rng", "royalty", 
    "crab", "gem", "alpha", "joy", "heal", "courage", "ares", "infinite vortex", 
    "euphoria", "doom", "superb", "supernova"
}

-- File System Functions
local function ensureFolderExists()
    if not isfolder(folderName) then
        makefolder(folderName)
    end
end

local function loadAurasFromFile()
    ensureFolderExists()
    local filePath = folderName .. "/" .. fileName
    
    if isfile(filePath) then
        local content = readfile(filePath)
        local loadedAuras = {}
        for line in content:gmatch("[^\r\n]+") do
            if line and line ~= "" then
                table.insert(loadedAuras, line)
            end
        end
        if #loadedAuras > 0 then
            return loadedAuras
        end
    end
    
    -- If file doesn't exist or is empty, use default list
    return defaultAuras
end

local function saveAurasToFile()
    ensureFolderExists()
    local filePath = folderName .. "/" .. fileName
    local content = table.concat(auraList, "\n")
    writefile(filePath, content)
end

local function addAuraToList(auraName)
    if not auraName or auraName == "" then return false end
    
    local lowerAuraName = string.lower(auraName)
    
    -- Check if aura already exists (case-insensitive)
    for _, existingAura in pairs(auraList) do
        if string.lower(existingAura) == lowerAuraName then
            return false -- Already exists
        end
    end
    
    -- Check cache
    if auraCache[lowerAuraName] then
        return false
    end
    
    -- Add to list and cache
    table.insert(auraList, auraName)
    auraCache[lowerAuraName] = true
    saveAurasToFile()
    return true
end

-- Initialize aura list
auraList = loadAurasFromFile()
for _, aura in pairs(auraList) do
    auraCache[string.lower(aura)] = true
end

-- Filter auras based on search query
local function filterAuras()
    if searchQuery == "" or searchQuery == nil then
        filteredAuraList = {}
        for _, aura in pairs(auraList) do
            table.insert(filteredAuraList, aura)
        end
    else
        filteredAuraList = {}
        local lowerQuery = string.lower(searchQuery)
        for _, aura in pairs(auraList) do
            if string.find(string.lower(aura), lowerQuery, 1, true) then
                table.insert(filteredAuraList, aura)
            end
        end
    end
    return filteredAuraList
end

-- Safe dropdown refresh with cooldown
local function safeRefreshDropdown()
    local currentTime = tick()
    if currentTime - lastDropdownUpdate < dropdownUpdateCooldown then
        return
    end
    lastDropdownUpdate = currentTime
    
    if auraDropdown then
        pcall(function()
            local filtered = filterAuras()
            if #filtered > 0 then
                auraDropdown:Refresh(filtered, true)
            end
        end)
    end
end

-- Window Creation
local Window = OrionLib:MakeWindow({
    Name = "Aura Craft GUI",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "AuraCraftConfig",
    IntroEnabled = true,
    IntroText = "Aura Craft GUI Loading..."
})

-- Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- LocalPlayer Stats Section
local PlayerStatsSection = MainTab:AddSection({
    Name = "Your Stats"
})

-- LocalPlayer Aura Label
local localPlayerAuraLabel = MainTab:AddLabel("Your Aura: None")

-- LocalPlayer Cash Label
local localPlayerCashLabel = MainTab:AddLabel("Your Cash: 0")

-- Update LocalPlayer Stats
spawn(function()
    while wait(0.5) do
        pcall(function()
            -- Update LocalPlayer Aura
            local aura = LocalPlayer:FindFirstChild("Aura")
            if aura and aura.Value then
                localPlayerAuraLabel:Set("Your Aura: " .. tostring(aura.Value))
            else
                localPlayerAuraLabel:Set("Your Aura: None")
            end
            
            -- Update LocalPlayer Cash
            local coinsFolder = LocalPlayer:FindFirstChild("CoinsFolder")
            if coinsFolder then
                local cash = coinsFolder:FindFirstChild("Cash")
                if cash and cash.Value then
                    localPlayerCashLabel:Set("Your Cash: " .. tostring(cash.Value))
                else
                    localPlayerCashLabel:Set("Your Cash: 0")
                end
            else
                localPlayerCashLabel:Set("Your Cash: 0")
            end
        end)
    end
end)

local MainSection = MainTab:AddSection({
    Name = "Aura Management"
})

-- Aura Selector Dropdown
auraDropdown = MainTab:AddDropdown({
    Name = "Select Aura",
    Default = "",
    Options = filterAuras(),
    Callback = function(Value)
        selectedAuraFromDropdown = Value
    end
})

-- Search Textbox
MainTab:AddTextbox({
    Name = "Search Auras",
    Default = "",
    TextDisappear = false,
    Placeholder = "Type to search...",
    Callback = function(Value)
        searchQuery = Value
        safeRefreshDropdown()
    end
})

-- Equip Selected Aura Button
MainTab:AddButton({
    Name = "💎 Equip Selected Aura",
    Callback = function()
        if selectedAuraFromDropdown ~= "" and selectedAuraFromDropdown ~= "None" then
            local args = {
                [1] = selectedAuraFromDropdown,
                [2] = "1"
            }
            pcall(function()
                ReplicatedStorage.Remotes.Equip_AURA:FireServer(unpack(args))
            end)
            if showEquipNotifications then
                OrionLib:MakeNotification({
                    Name = "Aura Equipped",
                    Content = "Equipped: " .. selectedAuraFromDropdown,
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please select an aura from dropdown!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Random Equip Section
local RandomSection = MainTab:AddSection({
    Name = "Random Equip"
})

-- Random Equip Toggle
MainTab:AddToggle({
    Name = "Randomly Keep Equipping Aura",
    Default = false,
    Callback = function(Value)
        randomEquipEnabled = Value
        if Value then
            OrionLib:MakeNotification({
                Name = "Random Equip",
                Content = "Random equip enabled!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
            spawn(function()
                while randomEquipEnabled do
                    pcall(function()
                        if #auraList > 0 then
                            local randomIndex = math.random(1, #auraList)
                            local randomAura = auraList[randomIndex]
                            if randomAura and randomAura ~= "" then
                                local args = {
                                    [1] = randomAura,
                                    [2] = "1"
                                }
                                ReplicatedStorage.Remotes.Equip_AURA:FireServer(unpack(args))
                                if showEquipNotifications then
                                    OrionLib:MakeNotification({
                                        Name = "Random Aura",
                                        Content = "Equipped: " .. randomAura,
                                        Image = "rbxassetid://4483345998",
                                        Time = 1
                                    })
                                end
                            end
                        end
                    end)
                    wait(randomEquipDelay)
                end
            end)
        else
            OrionLib:MakeNotification({
                Name = "Random Equip",
                Content = "Random equip disabled!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        end
    end
})

-- Random Equip Delay
MainTab:AddTextbox({
    Name = "Random Equip Delay (seconds)",
    Default = "0.5",
    TextDisappear = false,
    Placeholder = "0.5",
    Callback = function(Value)
        local num = tonumber(Value)
        if num and num > 0 then
            randomEquipDelay = num
            OrionLib:MakeNotification({
                Name = "Delay Updated",
                Content = "Random delay set to " .. num .. " seconds",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please enter a valid number!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Manual Aura Input Section
local ManualSection = MainTab:AddSection({
    Name = "Manual Aura Input"
})

-- Aura Input
local auraNameInput = ""
MainTab:AddTextbox({
    Name = "Aura Name",
    Default = "",
    TextDisappear = false,
    Placeholder = "Ex: Super Mega Energy Balls",
    Callback = function(Value)
        auraNameInput = Value
    end
})

-- Equip Aura Button
MainTab:AddButton({
    Name = "💎 Equip Typed Aura",
    Callback = function()
        if auraNameInput ~= "" then
            local args = {
                [1] = auraNameInput,
                [2] = "1"
            }
            pcall(function()
                ReplicatedStorage.Remotes.Equip_AURA:FireServer(unpack(args))
            end)
            if showEquipNotifications then
                OrionLib:MakeNotification({
                    Name = "Aura Equipped",
                    Content = "Attempting to equip: " .. auraNameInput,
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please enter an aura name!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Add Auras Section
local AddAurasSection = MainTab:AddSection({
    Name = "Add Auras"
})

-- Target Aura Count Input
local targetAurasInput = ""
MainTab:AddTextbox({
    Name = "Target Aura Count",
    Default = "",
    TextDisappear = false,
    Placeholder = "Enter number of auras",
    Callback = function(Value)
        targetAurasInput = Value
    end
})

-- Current Auras Label
local currentAurasLabel = MainTab:AddLabel("Current Auras: 0")

-- Update current auras count
spawn(function()
    while wait(0.5) do
        pcall(function()
            local leaderstats = LocalPlayer:FindFirstChild("leaderstats")
            if leaderstats then
                local auras = leaderstats:FindFirstChild("Auras")
                if auras and auras.Value then
                    currentAurasLabel:Set("Current Auras: " .. tostring(auras.Value))
                end
            end
        end)
    end
end)

-- Add Auras Button
MainTab:AddButton({
    Name = "🎯 Add Auras to Target",
    Callback = function()
        local targetNum = tonumber(targetAurasInput)
        if targetNum and targetNum > 0 then
            if not isAddingAuras then
                isAddingAuras = true
                targetAuraCount = targetNum
                
                OrionLib:MakeNotification({
                    Name = "Adding Auras",
                    Content = "Adding auras until count reaches " .. targetNum,
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
                
                spawn(function()
                    while isAddingAuras do
                        local currentCount = 0
                        pcall(function()
                            local leaderstats = LocalPlayer:FindFirstChild("leaderstats")
                            if leaderstats then
                                local auras = leaderstats:FindFirstChild("Auras")
                                if auras and auras.Value then
                                    currentCount = auras.Value
                                end
                            end
                        end)
                        
                        if currentCount >= targetAuraCount then
                            isAddingAuras = false
                            OrionLib:MakeNotification({
                                Name = "Target Reached",
                                Content = "Successfully reached " .. targetAuraCount .. " auras!",
                                Image = "rbxassetid://4483345998",
                                Time = 5
                            })
                            break
                        end
                        
                        pcall(function()
                            local args = {
                                "plant",
                                "EEOQRFIWGEW!@#$@(#WRUREFJIGEReJNPWQDLP#(!!!!"
                            }
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ADDAURA"):FireServer(unpack(args))
                        end)
                        
                        wait(0.1)
                    end
                end)
            else
                OrionLib:MakeNotification({
                    Name = "Already Running",
                    Content = "Aura addition is already in progress!",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please enter a valid number!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Stop Adding Auras Button
MainTab:AddButton({
    Name = "⛔ Stop Adding Auras",
    Callback = function()
        if isAddingAuras then
            isAddingAuras = false
            OrionLib:MakeNotification({
                Name = "Stopped",
                Content = "Stopped adding auras",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        else
            OrionLib:MakeNotification({
                Name = "Not Running",
                Content = "Aura addition is not running!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        end
    end
})

-- Coin Section
local CoinSection = MainTab:AddSection({
    Name = "Coin Management"
})

-- Duplicate Coins Button
MainTab:AddButton({
    Name = "💰 Duplicate Coins",
    Callback = function()
        pcall(function()
            ReplicatedStorage.Remotes.Duplicate:FireServer(coinAmount)
        end)
        OrionLib:MakeNotification({
            Name = "Coins Duplicated",
            Content = "Duplicated " .. coinAmount .. " coins!",
            Image = "rbxassetid://4483345998",
            Time = 2
        })
    end
})

-- Auto Duplicate Toggle
MainTab:AddToggle({
    Name = "🔄 Auto-Duplicate Coins",
    Default = false,
    Callback = function(Value)
        autoDup = Value
        if Value then
            OrionLib:MakeNotification({
                Name = "Auto-Duplicate",
                Content = "Auto-Duplicate enabled!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
            spawn(function()
                while autoDup do
                    pcall(function()
                        ReplicatedStorage.Remotes.Duplicate:FireServer(coinAmount)
                    end)
                    wait(0.1)
                end
            end)
        else
            OrionLib:MakeNotification({
                Name = "Auto-Duplicate",
                Content = "Auto-Duplicate disabled!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        end
    end
})

-- Auto Update Txt Section
local AutoUpdateSection = MainTab:AddSection({
    Name = "Aura List Auto-Update"
})

-- Auto Update Toggle
MainTab:AddToggle({
    Name = "Update Txt from Players",
    Default = false,
    Callback = function(Value)
        autoUpdateTxt = Value
        if Value then
            OrionLib:MakeNotification({
                Name = "Auto-Update",
                Content = "Auto-update txt enabled!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
            spawn(function()
                while autoUpdateTxt do
                    for _, player in pairs(Players:GetPlayers()) do
                        pcall(function()
                            local aura = player:FindFirstChild("Aura")
                            if aura and aura.Value and aura.Value ~= "" then
                                local added = addAuraToList(aura.Value)
                                if added then
                                    if showAuraAddedNotifications then
                                        OrionLib:MakeNotification({
                                            Name = "Aura Added",
                                            Content = "Added " .. aura.Value .. " to config",
                                            Image = "rbxassetid://4483345998",
                                            Time = 2
                                        })
                                    end
                                    -- Refresh dropdown with new aura
                                    safeRefreshDropdown()
                                end
                            end
                        end)
                    end
                    wait(0.1)
                end
            end)
        else
            OrionLib:MakeNotification({
                Name = "Auto-Update",
                Content = "Auto-update txt disabled!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        end
    end
})

-- Copy Tab
local CopyTab = Window:MakeTab({
    Name = "Copy",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local CopySection = CopyTab:AddSection({
    Name = "Player Aura Tracker"
})

-- Player Selection Dropdown
local playerDropdown = CopyTab:AddDropdown({
    Name = "Select Player",
    Default = "None",
    Options = {"None"},
    Callback = function(Value)
        if Value ~= "None" then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    local displayText = player.Name .. "/" .. player.DisplayName
                    if Value:find(displayText) then
                        selectedPlayer = player
                        break
                    end
                end
            end
        else
            selectedPlayer = nil
        end
    end
})

-- Current Aura Label
local currentAuraLabel = CopyTab:AddLabel("Current Aura: None")

-- Last Equipped Aura Label
local lastEquippedLabel = CopyTab:AddLabel("Last Equipped: None")

-- Last Created Aura Label
local lastCreatedLabel = CopyTab:AddLabel("Last Created: None")

-- Cash Label
local cashLabel = CopyTab:AddLabel("Cash: 0")

-- Equip Same Aura Button
CopyTab:AddButton({
    Name = "Equip Same Aura",
    Callback = function()
        if selectedPlayer then
            pcall(function()
                local targetAura = selectedPlayer:FindFirstChild("Aura")
                if targetAura and targetAura.Value then
                    local args = {
                        [1] = targetAura.Value,
                        [2] = "1"
                    }
                    ReplicatedStorage.Remotes.Equip_AURA:FireServer(unpack(args))
                    if showEquipNotifications then
                        OrionLib:MakeNotification({
                            Name = "Aura Copied",
                            Content = "Equipped " .. targetAura.Value,
                            Image = "rbxassetid://4483345998",
                            Time = 3
                        })
                    end
                else
                    OrionLib:MakeNotification({
                        Name = "Error",
                        Content = "Could not find player's aura!",
                        Image = "rbxassetid://4483345998",
                        Time = 3
                    })
                end
            end)
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please select a player first!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Auto Equip Same Aura Toggle
CopyTab:AddToggle({
    Name = "Auto Equip Same Aura",
    Default = false,
    Callback = function(Value)
        autoEquipSameAura = Value
        if Value then
            OrionLib:MakeNotification({
                Name = "Auto Equip",
                Content = "Auto equip enabled!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
            spawn(function()
                while autoEquipSameAura do
                    if selectedPlayer then
                        pcall(function()
                            local targetAura = selectedPlayer:FindFirstChild("Aura")
                            if targetAura and targetAura.Value then
                                local args = {
                                    [1] = targetAura.Value,
                                    [2] = "1"
                                }
                                ReplicatedStorage.Remotes.Equip_AURA:FireServer(unpack(args))
                            end
                        end)
                    end
                    wait(copyDelay)
                end
            end)
        else
            OrionLib:MakeNotification({
                Name = "Auto Equip",
                Content = "Auto equip disabled!",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        end
    end
})

-- Copy Delay Textbox
CopyTab:AddTextbox({
    Name = "Auto Equip Delay (seconds)",
    Default = "0.1",
    TextDisappear = false,
    Placeholder = "0.1",
    Callback = function(Value)
        local num = tonumber(Value)
        if num and num > 0 then
            copyDelay = num
            OrionLib:MakeNotification({
                Name = "Delay Updated",
                Content = "Delay set to " .. num .. " seconds",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please enter a valid number!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Function to update player list (optimized to prevent constant refresh)
local lastUpdateTime = 0
local updateCooldown = 2 -- Update dropdown every 2 seconds instead of 0.1
local function UpdatePlayerList()
    local currentTime = tick()
    if currentTime - lastUpdateTime < updateCooldown then
        return
    end
    lastUpdateTime = currentTime
    
    playerDropdownOptions = {"None"}
    playerList = {}
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local auraValue = "No Aura"
            pcall(function()
                local aura = player:FindFirstChild("Aura")
                if aura and aura.Value then
                    auraValue = aura.Value
                end
            end)
            
            local displayText = player.Name .. "/" .. player.DisplayName .. " - " .. auraValue
            table.insert(playerDropdownOptions, displayText)
            table.insert(playerList, player)
        end
    end
    
    playerDropdown:Refresh(playerDropdownOptions, true)
end

-- Function to update selected player info
local function UpdatePlayerInfo()
    if selectedPlayer and selectedPlayer.Parent then
        -- Update Current Aura
        pcall(function()
            local aura = selectedPlayer:FindFirstChild("Aura")
            if aura and aura.Value then
                currentAuraLabel:Set("Current Aura: " .. tostring(aura.Value))
            else
                currentAuraLabel:Set("Current Aura: None")
            end
        end)
        
        -- Update Last Equipped Aura
        pcall(function()
            local lastAura = selectedPlayer:FindFirstChild("LastAura")
            if lastAura and lastAura.Value then
                lastEquippedLabel:Set("Last Equipped: " .. tostring(lastAura.Value))
            else
                lastEquippedLabel:Set("Last Equipped: None")
            end
        end)
        
        -- Update Last Created Aura
        pcall(function()
            local lastCreated = selectedPlayer:FindFirstChild("LastCreated")
            if lastCreated and lastCreated.Value then
                lastCreatedLabel:Set("Last Created: " .. tostring(lastCreated.Value))
            else
                lastCreatedLabel:Set("Last Created: None")
            end
        end)
        
        -- Update Cash
        pcall(function()
            local coinsFolder = selectedPlayer:FindFirstChild("CoinsFolder")
            if coinsFolder then
                local cash = coinsFolder:FindFirstChild("Cash")
                if cash and cash.Value then
                    cashLabel:Set("Cash: " .. tostring(cash.Value))
                else
                    cashLabel:Set("Cash: 0")
                end
            else
                cashLabel:Set("Cash: 0")
            end
        end)
    else
        currentAuraLabel:Set("Current Aura: None")
        lastEquippedLabel:Set("Last Equipped: None")
        lastCreatedLabel:Set("Last Created: None")
        cashLabel:Set("Cash: 0")
    end
end

-- Player Added Event
Players.PlayerAdded:Connect(function(player)
    wait(0.1)
    UpdatePlayerList()
    if showJoinNotifications then
        OrionLib:MakeNotification({
            Name = "Player Joined",
            Content = player.Name .. " joined the game!",
            Image = "rbxassetid://4483345998",
            Time = 2
        })
    end
end)

-- Player Removing Event
Players.PlayerRemoving:Connect(function(player)
    if selectedPlayer == player then
        selectedPlayer = nil
    end
    wait(0.1)
    UpdatePlayerList()
    if showLeaveNotifications then
        OrionLib:MakeNotification({
            Name = "Player Left",
            Content = player.Name .. " left the game!",
            Image = "rbxassetid://4483345998",
            Time = 2
        })
    end
end)

-- Real-time update loop (0.1 second intervals for info, slower for dropdown)
spawn(function()
    while wait(0.1) do
        pcall(function()
            UpdatePlayerInfo()
            
            -- Check for player count changes for dropdown update
            local currentPlayerCount = #Players:GetPlayers()
            if currentPlayerCount ~= lastPlayerCount then
                lastPlayerCount = currentPlayerCount
                UpdatePlayerList()
            end
        end)
    end
end)

-- Initial player list update
UpdatePlayerList()

-- Settings Tab
local SettingsTab = Window:MakeTab({
    Name = "Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local NotificationSettings = SettingsTab:AddSection({
    Name = "Notification Settings"
})

-- Toggle for Join Notifications
SettingsTab:AddToggle({
    Name = "Player Join Notifications",
    Default = true,
    Callback = function(Value)
        showJoinNotifications = Value
        OrionLib:MakeNotification({
            Name = "Settings Updated",
            Content = "Join notifications " .. (Value and "enabled" or "disabled"),
            Image = "rbxassetid://4483345998",
            Time = 2
        })
    end
})

-- Toggle for Leave Notifications
SettingsTab:AddToggle({
    Name = "Player Leave Notifications",
    Default = true,
    Callback = function(Value)
        showLeaveNotifications = Value
        OrionLib:MakeNotification({
            Name = "Settings Updated",
            Content = "Leave notifications " .. (Value and "enabled" or "disabled"),
            Image = "rbxassetid://4483345998",
            Time = 2
        })
    end
})

-- Toggle for Equip Notifications
SettingsTab:AddToggle({
    Name = "Aura Equip Notifications",
    Default = true,
    Callback = function(Value)
        showEquipNotifications = Value
        OrionLib:MakeNotification({
            Name = "Settings Updated",
            Content = "Equip notifications " .. (Value and "enabled" or "disabled"),
            Image = "rbxassetid://4483345998",
            Time = 2
        })
    end
})

-- Toggle for Aura Added Notifications
SettingsTab:AddToggle({
    Name = "Aura Added to Config Notifications",
    Default = true,
    Callback = function(Value)
        showAuraAddedNotifications = Value
        OrionLib:MakeNotification({
            Name = "Settings Updated",
            Content = "Aura added notifications " .. (Value and "enabled" or "disabled"),
            Image = "rbxassetid://4483345998",
            Time = 2
        })
    end
})

local GUISettings = SettingsTab:AddSection({
    Name = "GUI Controls"
})

SettingsTab:AddButton({
    Name = "Destroy GUI",
    Callback = function()
        OrionLib:Destroy()
    end
})

SettingsTab:AddButton({
    Name = "Reload GUI",
    Callback = function()
        OrionLib:Destroy()
        wait(0.5)
        loadstring(game:HttpGet(("https://raw.githubusercontent.com/Giangplay/Script/main/Orion_Library_PE_V2.lua")))()
    end
})

-- Credits Section
local CreditsSection = SettingsTab:AddSection({
    Name = "Information"
})

SettingsTab:AddLabel("Aura Craft GUI V3.1")
SettingsTab:AddLabel("Mobile Optimized")
SettingsTab:AddLabel("Enhanced Performance")
SettingsTab:AddLabel("Total Auras Loaded: " .. #auraList)

-- Initialize
OrionLib:Init()

OrionLib:MakeNotification({
    Name = "Aura Craft GUI Loaded",
    Content = "GUI successfully loaded! " .. #auraList .. " auras available.",
    Image = "rbxassetid://4483345998",
    Time = 5
})
end)

addcmd('ShiftlockGUI',{'Shiftlock'},function(args, speaker)
loadstring(game:HttpGet("https://raw.githubusercontent.com/prosadaf/Example/refs/heads/main/Video"))()
end)

addcmd('wave',{},function(args, speaker)
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    
    if character then
        local humanoid = character:FindFirstChildOfClass('Humanoid')
        if humanoid then
            local animator = humanoid:FindFirstChildOfClass('Animator')
            if not animator then
                animator = Instance.new("Animator")
                animator.Parent = humanoid
            end
            
            -- Stop all currently playing animations except core ones
            local playingTracks = animator:GetPlayingAnimationTracks()
            for _, track in pairs(playingTracks) do
                if track.Priority ~= Enum.AnimationPriority.Core then
                    track:Stop()
                end
            end
            
            -- Correct wave animation ID
            local waveAnimationId = "http://www.roblox.com/asset/?id=128777973"
            
            -- Create animation instance
            local waveAnim = Instance.new("Animation")
            waveAnim.AnimationId = waveAnimationId
            
            -- Load and play the animation
            local waveTrack = animator:LoadAnimation(waveAnim)
            waveTrack.Priority = Enum.AnimationPriority.Action
            waveTrack:Play()
            
            -- Clean up after animation finishes
            waveTrack.Stopped:Connect(function()
                waveAnim:Destroy()
            end)
        end
    end
end)

addcmd('zoanim',{'zoanimgui'},function(args, speaker)
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer

-- Updated Animation IDs with names
local animationIds = {
    ["Facepalm"] = "rbxassetid://6747110329",
    ["Lean-Back"] = "rbxassetid://7234736609",
    ["Ledge-Sit"] = "rbxassetid://7055109566",
    ["Yakuza/Flailing-Arms"] = "rbxassetid://6818421387",
    ["Throw"] = "rbxassetid://15161462053",
    ["Punches"] = "rbxassetid://13452846777",
    ["Cool Slash"] = "rbxassetid://13452856736",
    ["Kanabo Flaunt Taunt"] = "rbxassetid://9003652864",
    ["Weapon Lick"] = "rbxassetid://13452940547",
    ["Weapon Throw"] = "rbxassetid://13452950106",
    ["Wave"] = "rbxassetid://128777973",
    ["Basic Weapon Spin"] = "rbxassetid://11326189863",
    ["Hit Down"] = "rbxassetid://9234350319",
    ["Kneel Pray"] = "rbxassetid://11812955950",
    ["Point"] = "rbxassetid://9013391552",
    ["Weapon Spinner"] = "rbxassetid://13452870518",
    ["Spin Once"] = "rbxassetid://11941379711",
    ["Cool Spin"] = "rbxassetid://11941371404",
    ["Call Weapon"] = "rbxassetid://13452884918",
    ["Weapon Stand"] = "rbxassetid://13452922479"
}

-- Persistent state storage
local guiState = {
    framePosition = UDim2.new(0.5, -125, 0.2, 0),
    minimizeButtonPosition = nil,
    isMinimized = false,
    forceAnimations = false -- NEW: Force animation toggle state
}

local animations = {}
local currentAnimator = nil

-- CREATE GUI (Only once, persists across respawns)
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Main UI Frame (Compact size)
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 250, 0, 330) -- Increased height for toggle
frame.Position = guiState.framePosition
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BorderSizePixel = 2
frame.Parent = screenGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "Animation Control"
title.TextSize = 16
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Parent = frame

-- FORCE ANIMATION TOGGLE
local forceToggleFrame = Instance.new("Frame")
forceToggleFrame.Size = UDim2.new(1, -10, 0, 25)
forceToggleFrame.Position = UDim2.new(0, 5, 0, 35)
forceToggleFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
forceToggleFrame.BorderSizePixel = 0
forceToggleFrame.Parent = frame

local forceToggleLabel = Instance.new("TextLabel")
forceToggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
forceToggleLabel.Position = UDim2.new(0, 5, 0, 0)
forceToggleLabel.BackgroundTransparency = 1
forceToggleLabel.Text = "Force Animations"
forceToggleLabel.TextSize = 12
forceToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
forceToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
forceToggleLabel.Parent = forceToggleFrame

local forceToggleDot = Instance.new("TextButton")
forceToggleDot.Size = UDim2.new(0, 20, 0, 20)
forceToggleDot.Position = UDim2.new(1, -25, 0.5, -10)
forceToggleDot.BackgroundColor3 = Color3.fromRGB(200, 50, 50) -- Red = OFF
forceToggleDot.Text = ""
forceToggleDot.Parent = forceToggleFrame

local dotCorner = Instance.new("UICorner")
dotCorner.CornerRadius = UDim.new(1, 0)
dotCorner.Parent = forceToggleDot

-- SCROLLABLE FRAME
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, 0, 1, -75) -- Adjusted for toggle
scrollFrame.Position = UDim2.new(0, 0, 0, 70) -- Adjusted for toggle
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 700)
scrollFrame.ScrollBarThickness = 5
scrollFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
scrollFrame.BorderSizePixel = 0
scrollFrame.Parent = frame

-- UI List Layout
local layout = Instance.new("UIListLayout")
layout.Parent = scrollFrame
layout.Padding = UDim.new(0, 5)
layout.SortOrder = Enum.SortOrder.LayoutOrder

-- Minimize Button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 60, 0, 30)
minimizeButton.Position = guiState.minimizeButtonPosition or UDim2.new(0.5, -30, 0, frame.Size.Y.Offset + 5)
minimizeButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.Text = guiState.isMinimized and "Show" or "Hide"
minimizeButton.Parent = screenGui
minimizeButton.BackgroundTransparency = 0.2

-- Set initial visibility based on saved state
frame.Visible = not guiState.isMinimized

-- Force Toggle Functionality
forceToggleDot.MouseButton1Click:Connect(function()
    guiState.forceAnimations = not guiState.forceAnimations
    
    if guiState.forceAnimations then
        forceToggleDot.BackgroundColor3 = Color3.fromRGB(50, 200, 50) -- Green = ON
    else
        forceToggleDot.BackgroundColor3 = Color3.fromRGB(200, 50, 50) -- Red = OFF
    end
end)

-- Generate Play/Pause buttons inside the scroll frame
local buttons = {}
local animationButtons = {}

for name, id in pairs(animationIds) do
    local buttonContainer = Instance.new("Frame")
    buttonContainer.Size = UDim2.new(1, 0, 0, 35)
    buttonContainer.BackgroundTransparency = 1
    buttonContainer.Parent = scrollFrame

    local playButton = Instance.new("TextButton")
    playButton.Size = UDim2.new(0.45, -5, 1, 0)
    playButton.Position = UDim2.new(0, 0, 0, 0)
    playButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    playButton.Text = "Play " .. name
    playButton.TextSize = 12
    playButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    playButton.Parent = buttonContainer

    local pauseButton = Instance.new("TextButton")
    pauseButton.Size = UDim2.new(0.45, -5, 1, 0)
    pauseButton.Position = UDim2.new(0.55, 0, 0, 0)
    pauseButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    pauseButton.Text = "Pause " .. name
    pauseButton.TextSize = 12
    pauseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    pauseButton.Parent = buttonContainer

    table.insert(buttons, playButton)
    table.insert(buttons, pauseButton)

    animationButtons[name] = {
        play = playButton,
        pause = pauseButton
    }
end

-- Update CanvasSize based on content height
layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
end)

-- Minimize UI Functionality
minimizeButton.MouseButton1Click:Connect(function()
    guiState.isMinimized = not guiState.isMinimized

    if guiState.isMinimized then
        frame.Visible = false
        minimizeButton.Text = "Show"
    else
        frame.Visible = true
        minimizeButton.Text = "Hide"
    end
end)

-- DRAGGABLE GUI (Mobile & PC Support)
local dragging, dragInput, startPos, dragStart

local function enableDragging(guiElement, savePositionCallback)
    guiElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = guiElement.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    if savePositionCallback then
                        savePositionCallback(guiElement.Position)
                    end
                end
            end)
        end
    end)

    guiElement.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            guiElement.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X, 
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Enable dragging with position saving
enableDragging(frame, function(pos)
    guiState.framePosition = pos
end)

enableDragging(minimizeButton, function(pos)
    guiState.minimizeButtonPosition = pos
end)

local function loadAnimationsForCharacter(character)
    local humanoid = character:WaitForChild("Humanoid", 10)
    if not humanoid then return end
    
    local animator = humanoid:FindFirstChildOfClass("Animator")
    if not animator then
        animator = humanoid:WaitForChild("Animator", 10)
    end
    if not animator then return end
    
    currentAnimator = animator
    
    -- Clear old animations
    for name, anim in pairs(animations) do
        if anim then
            pcall(function()
                anim:Stop()
            end)
        end
    end
    animations = {}
    
    -- Load new animations
    for name, id in pairs(animationIds) do
        local animation = Instance.new("Animation")
        animation.AnimationId = id
        local loadedAnim = animator:LoadAnimation(animation)
        animations[name] = loadedAnim
        
        -- Reconnect buttons
        if animationButtons[name] then
            local playBtn = animationButtons[name].play
            local pauseBtn = animationButtons[name].pause
            
            playBtn.MouseButton1Click:Connect(function()
                if animations[name] then
                    -- Check if force animations is enabled
                    if guiState.forceAnimations then
                        -- Stop all non-core animations
                        local playingTracks = animator:GetPlayingAnimationTracks()
                        for _, track in pairs(playingTracks) do
                            if track.Priority ~= Enum.AnimationPriority.Core then
                                track:Stop()
                            end
                        end
                        -- Set higher priority and play
                        animations[name].Priority = Enum.AnimationPriority.Action
                    end
                    animations[name]:Play()
                end
            end)
            
            pauseBtn.MouseButton1Click:Connect(function()
                if animations[name] then
                    animations[name]:Stop()
                end
            end)
        end
    end
end

-- Initial load for current character
local function setupCharacter()
    local character = player.Character
    if character then
        loadAnimationsForCharacter(character)
    end
end

player.CharacterAdded:Connect(function(character)
    loadAnimationsForCharacter(character)
end)

setupCharacter()
end)

local walkflingaura = false
local wfAuraRadius = 10
local wfNoclipConnection = nil
local wfIsAttacking = false
local wfSavedPosition = nil
local wfVisualizationEnabled = false
local wfAuraBall = nil
local wfVisualizationConnection = nil
local wfAuraTransparency = 0.8
local wfAuraColor = Color3.fromRGB(0, 0, 0)

local function getClosestTargetInRadius(fromPosition, radius, speaker)
    local closestTarget = nil
    local closestDistance = radius
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= speaker and player.Character then
            local targetRoot = getRoot(player.Character)
            if targetRoot then
                local distance = (targetRoot.Position - fromPosition).Magnitude
                if distance <= radius and distance < closestDistance then
                    closestTarget = targetRoot
                    closestDistance = distance
                end
            end
        end
    end
    
    return closestTarget
end

local function wfEnableNoclip(speaker)
    if wfNoclipConnection then return end
    
    wfNoclipConnection = RunService.Stepped:Connect(function()
        if speaker.Character then
            for _, part in pairs(speaker.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end)
end

local function wfDisableNoclip(speaker)
    if wfNoclipConnection then
        wfNoclipConnection:Disconnect()
        wfNoclipConnection = nil
    end
    
    if speaker.Character then
        for _, part in pairs(speaker.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

local function wfCreateVisualization()
    if wfAuraBall then
        wfAuraBall:Destroy()
    end
    
    wfAuraBall = Instance.new("Part")
    wfAuraBall.Name = "FlingAuraBall"
    wfAuraBall.Shape = Enum.PartType.Ball
    wfAuraBall.Size = Vector3.new(wfAuraRadius * 2, wfAuraRadius * 2, wfAuraRadius * 2)
    wfAuraBall.Color = wfAuraColor
    wfAuraBall.Material = Enum.Material.ForceField
    wfAuraBall.Transparency = wfAuraTransparency
    wfAuraBall.CanCollide = false
    wfAuraBall.Anchored = true
    wfAuraBall.CastShadow = false
    wfAuraBall.Parent = workspace
end

local function wfUpdateVisualizationPosition(position)
    if wfAuraBall and wfAuraBall.Parent then
        wfAuraBall.Position = position
    end
end

local function wfUpdateVisualizationSize()
    if wfAuraBall and wfAuraBall.Parent then
        wfAuraBall.Size = Vector3.new(wfAuraRadius * 2, wfAuraRadius * 2, wfAuraRadius * 2)
    end
end

local function wfUpdateVisualizationTransparency()
    if wfAuraBall and wfAuraBall.Parent then
        wfAuraBall.Transparency = wfAuraTransparency
    end
end

local function wfUpdateVisualizationColor()
    if wfAuraBall and wfAuraBall.Parent then
        wfAuraBall.Color = wfAuraColor
    end
end

local function wfEnableVisualization(speaker)
    if wfVisualizationEnabled then return end
    
    wfVisualizationEnabled = true
    wfCreateVisualization()
    
    wfVisualizationConnection = RunService.RenderStepped:Connect(function()
        if speaker.Character then
            local root = getRoot(speaker.Character)
            if root and root.Parent then
                if wfIsAttacking and wfSavedPosition then
                    wfUpdateVisualizationPosition(wfSavedPosition)
                else
                    wfUpdateVisualizationPosition(root.Position)
                end
            end
        end
    end)
end

local function wfDisableVisualization()
    wfVisualizationEnabled = false
    
    if wfVisualizationConnection then
        wfVisualizationConnection:Disconnect()
        wfVisualizationConnection = nil
    end
    
    if wfAuraBall then
        wfAuraBall:Destroy()
        wfAuraBall = nil
    end
end

local function startWalkFlingAura(radius, speaker)
    if walkflingaura then
        notify("Walk Fling Aura", "Already active!")
        return
    end
    
    if not speaker.Character then
        notify("Walk Fling Aura", "Character not found!")
        return
    end
    
    local root = getRoot(speaker.Character)
    if not root then
        notify("Walk Fling Aura", "Character root not found!")
        return
    end
    
    wfAuraRadius = radius or 10
    
    local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
    if humanoid then
        humanoid.Died:Connect(function()
            walkflingaura = false
            wfDisableNoclip(speaker)
            wfDisableVisualization()
        end)
    end
    
    wfEnableNoclip(speaker)
    wfEnableVisualization(speaker)
    
    walkflingaura = true
    wfIsAttacking = false
    
    notify("Walk Fling Aura", "Enabled with radius: " .. wfAuraRadius)
    
    spawn(function()
        while walkflingaura do
            RunService.Heartbeat:Wait()
            
            local character = speaker.Character
            local root = getRoot(character)
            
            while not (character and character.Parent and root and root.Parent) do
                RunService.Heartbeat:Wait()
                character = speaker.Character
                root = getRoot(character)
            end
            
            local vel = root.Velocity
            root.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)
            
            RunService.RenderStepped:Wait()
            if character and character.Parent and root and root.Parent then
                root.Velocity = vel
            end
            
            RunService.Stepped:Wait()
            if character and character.Parent and root and root.Parent then
                root.Velocity = vel + Vector3.new(0, 0.1, 0)
            end
        end
    end)
    
    spawn(function()
        while walkflingaura do
            task.wait(0.05)
            
            local character = speaker.Character
            local root = getRoot(character)
            
            if not (character and character.Parent and root and root.Parent) then
                continue
            end
            
            if not wfIsAttacking then
                local closestTarget = getClosestTargetInRadius(root.Position, wfAuraRadius, speaker)
                
                if closestTarget then
                    wfIsAttacking = true
                    wfSavedPosition = root.Position
                    
                    spawn(function()
                        local attackStartTime = tick()
                        while wfIsAttacking and walkflingaura and tick() - attackStartTime < 2 do
                            task.wait(0.01)
                            
                            character = speaker.Character
                            root = getRoot(character)
                            
                            if not (character and character.Parent and root and root.Parent) then
                                break
                            end
                            
                            if closestTarget and closestTarget.Parent then
                                local distanceFromSaved = (closestTarget.Position - wfSavedPosition).Magnitude
                                if distanceFromSaved <= wfAuraRadius then
                                    root.CFrame = CFrame.new(closestTarget.Position)
                                else
                                    break
                                end
                            else
                                break
                            end
                        end
                        
                        if wfSavedPosition and root and root.Parent then
                            root.CFrame = CFrame.new(wfSavedPosition)
                        end
                        
                        wfIsAttacking = false
                        wfSavedPosition = nil
                    end)
                end
            end
        end
        
        wfDisableNoclip(speaker)
        wfDisableVisualization()
    end)
end

local function stopWalkFlingAura(speaker)
    if not walkflingaura then
        notify("Walk Fling Aura", "Not active!")
        return
    end
    
    walkflingaura = false
    wfIsAttacking = false
    wfSavedPosition = nil
    wfDisableNoclip(speaker)
    wfDisableVisualization()
    
    notify("Walk Fling Aura", "Disabled")
end

addcmd('walkflingaura',{'wfaura'},function(args, speaker)
    local radius = args[1] and tonumber(args[1]) or 10
    startWalkFlingAura(radius, speaker)
end)

addcmd('unwalkflingaura',{'unwfaura'},function(args, speaker)
    stopWalkFlingAura(speaker)
end)

addcmd('walkflingauravis',{'wfauravis'},function(args, speaker)
    if not walkflingaura then
        notify("Walk Fling Aura", "Aura not active! Start it first with ;walkflingaura")
        return
    end
    
    if wfVisualizationEnabled then
        notify("Walk Fling Aura", "Visualization already enabled!")
    else
        wfEnableVisualization(speaker)
        notify("Walk Fling Aura", "Visualization enabled")
    end
end)

addcmd('unwalkflingauravis',{'unwfauravis'},function(args, speaker)
    if wfVisualizationEnabled then
        wfDisableVisualization()
        notify("Walk Fling Aura", "Visualization disabled")
    else
        notify("Walk Fling Aura", "Visualization not active!")
    end
end)

addcmd('walkflingauratrans',{'wfauratrans'},function(args, speaker)
    local trans = args[1] and tonumber(args[1])
    if not trans then
        notify("Walk Fling Aura", "Invalid transparency! Use: 0-1 (example: 0.5)")
        return
    end
    
    wfAuraTransparency = math.clamp(trans, 0, 1)
    wfUpdateVisualizationTransparency()
    notify("Walk Fling Aura", "Transparency set to: " .. wfAuraTransparency)
end)

addcmd('walkflingauracolor',{'wfauracolor'},function(args, speaker)
    local r = args[1] and tonumber(args[1])
    local g = args[2] and tonumber(args[2])
    local b = args[3] and tonumber(args[3])
    
    if not (r and g and b) then
        notify("Walk Fling Aura", "Invalid color! Use: r g b (0-255). Example: 255 0 0 for red")
        return
    end
    
    wfAuraColor = Color3.fromRGB(r, g, b)
    wfUpdateVisualizationColor()
    notify("Walk Fling Aura", "Color updated to RGB(" .. r .. ", " .. g .. ", " .. b .. ")")
end)

local savedVoidPosition = nil
local customVoidY = -497

local function teleportCharacter(character, targetCFrame)
    local root = getRoot(character)
    
    if root then
        local success = pcall(function()
            root.CFrame = targetCFrame
        end)
        
        if success then
            return true
        end
    end
    
    if character.PrimaryPart then
        local success = pcall(function()
            character:SetPrimaryPartCFrame(targetCFrame)
        end)
        
        if success then
            return true
        end
    end
    
    if root then
        local success = pcall(function()
            character.PrimaryPart = root
            character:SetPrimaryPartCFrame(targetCFrame)
        end)
        
        if success then
            return true
        end
    end
    
    return false
end

addcmd('voidtp',{'void'},function(args, speaker)
    local character = speaker.Character
    if not character then return end
    
    local root = getRoot(character)
    if not root then return end
    
    savedVoidPosition = root.Position
    
    local voidCFrame = CFrame.new(root.Position.X, customVoidY, root.Position.Z)
    teleportCharacter(character, voidCFrame)
end)

addcmd('voidback',{'undovoid'},function(args, speaker)
    if not savedVoidPosition then return end
    
    local character = speaker.Character
    if not character then return end
    
    local voidBackCFrame = CFrame.new(savedVoidPosition)
    teleportCharacter(character, voidBackCFrame)
end)

addcmd('voidpos',{},function(args, speaker)
    local x = args[1] and tonumber(args[1])
    local y = args[2] and tonumber(args[2])
    local z = args[3] and tonumber(args[3])
    
    if not (x and y and z) then return end
    
    customVoidY = y
end)

addcmd('Evade',{'evade GUI'},function(args, speaker)
-- Evade Game Script
-- Load Orion Library
local OrionLib = loadstring(game:HttpGet(("https://raw.githubusercontent.com/Giangplay/Script/main/Orion_Library_PE_V2.lua")))()

-- Create main window
local Window = OrionLib:MakeWindow({
    Name = "Evade",
    HidePremium = true,
    SaveConfig = true,
    ConfigFolder = "EvadeConfig",
    IntroEnabled = false
})

-- Local variables
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerName = LocalPlayer.Name
local AutoRespawn = false
local AutoWhistle = false
local AutoReviveNearest = false
local DownedCheck = false
local AutoTpToDowned = false
local AutoMapVote = false
local SelectedMap = 1
local ESP_Players = false
local ShowNames = false
local ShowStats = false
local ESP_NextBot = false
local NextBotNames = false
local ShowNextBotStats = false
local NextBotESPStyle = "Highlight"
local NameTextSize = 14
local StatsTextSize = 12
local SelectedInfoPlayer = "None"

-- Functions
local function GetPlayerState(player)
    local playerCharacter = workspace.Game.Players:FindFirstChild(player)
    if not playerCharacter then return "Unknown" end
    
    if playerCharacter:GetAttribute("State") then
        return playerCharacter:GetAttribute("State")
    elseif playerCharacter:GetAttribute("Downed") then
        if playerCharacter:GetAttribute("Downed") == true then
            return "Downed"
        else
            return "Active"
        end
    end
    
    return "Unknown"
end

local function GetNearestDownedPlayer()
    local nearestPlayer = nil
    local nearestDistance = math.huge
    local localCharacter = workspace.Game.Players:FindFirstChild(PlayerName)
    
    if not localCharacter then return nil end
    local localRoot = localCharacter:FindFirstChild("HumanoidRootPart")
    if not localRoot then return nil end
    
    for _, player in pairs(workspace.Game.Players:GetChildren()) do
        if player.Name ~= PlayerName then
            local playerState = GetPlayerState(player.Name)
            if playerState == "Downed" then
                local playerRoot = player:FindFirstChild("HumanoidRootPart")
                if playerRoot then
                    local distance = (localRoot.Position - playerRoot.Position).Magnitude
                    if distance < nearestDistance and distance <= 30 then
                        nearestDistance = distance
                        nearestPlayer = player.Name
                    end
                end
            end
        end
    end
    
    return nearestPlayer
end

local function IsPlayerOrNextBot(instance)
    if instance:GetAttribute("Team") then
        local team = instance:GetAttribute("Team")
        if team == "Player" or team == "PlayerTeam" then
            return "Player"
        elseif team == "NextBot" or team == "Nextbot" then
            return "NextBot"
        end
    end
    
    -- Additional check based on other attributes or characteristics
    if instance:FindFirstChild("Humanoid") and not instance:GetAttribute("IsBot") then
        return "Player"
    elseif instance:GetAttribute("IsBot") or instance:GetAttribute("AI") then
        return "NextBot"
    end
    
    return "Unknown"
end

local function CreateESP(character, espType)
    if not character then return end
    
    -- Remove existing ESP
    for _, existingESP in pairs(character:GetChildren()) do
        if existingESP.Name == "ESPHIGHLIGHT" or existingESP.Name == "ESPBILLBOARD" then
            existingESP:Destroy()
        end
    end
    
    if espType == "Player" then
        -- Create highlight for player
        local highlight = Instance.new("Highlight")
        highlight.Name = "ESPHIGHLIGHT"
        highlight.FillColor = Color3.fromRGB(0, 0, 255) -- Blue for players
        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0
        highlight.Adornee = character
        highlight.Parent = character
        
        if ShowNames or ShowStats then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESPBILLBOARD"
            billboard.Size = UDim2.new(0, 200, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.AlwaysOnTop = true
            billboard.LightInfluence = 0
            billboard.Parent = character
            
            if ShowNames then
                local nameLabel = Instance.new("TextLabel")
                nameLabel.Name = "NameLabel"
                nameLabel.Size = UDim2.new(1, 0, 0, NameTextSize + 6)
                nameLabel.Position = UDim2.new(0, 0, 0, 0)
                nameLabel.BackgroundTransparency = 1
                nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                nameLabel.TextSize = NameTextSize
                nameLabel.Font = Enum.Font.SourceSansBold
                nameLabel.Text = character.Name
                nameLabel.Parent = billboard
                
                -- Update name color based on state
                local function updateNameColor()
                    local playerState = GetPlayerState(character.Name)
                    if playerState == "Downed" then
                        nameLabel.TextColor3 = Color3.fromRGB(255, 182, 193) -- Pinkish-peach
                    else
                        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White
                    end
                end
                
                spawn(function()
                    while billboard and billboard.Parent do
                        updateNameColor()
                        wait(0.1)
                    end
                end)
            end
            
            if ShowStats then
                local statsLabel = Instance.new("TextLabel")
                statsLabel.Name = "StatsLabel"
                statsLabel.Size = UDim2.new(1, 0, 0, StatsTextSize * 3)
                statsLabel.Position = UDim2.new(0, 0, 0, NameTextSize + 8)
                statsLabel.BackgroundTransparency = 1
                statsLabel.TextColor3 = Color3.fromRGB(200, 255, 200)
                statsLabel.TextSize = StatsTextSize
                statsLabel.Font = Enum.Font.SourceSans
                statsLabel.TextYAlignment = Enum.TextYAlignment.Top
                statsLabel.Parent = billboard
                
                spawn(function()
                    while billboard and billboard.Parent do
                        local state = GetPlayerState(character.Name)
                        local downedTimeLeft = character:GetAttribute("DownedTimeLeft") or "N/A"
                        statsLabel.Text = "State: " .. state .. "\nDowned Time Left: " .. tostring(downedTimeLeft)
                        wait(0.1)
                    end
                end)
            end
        end
    elseif espType == "NextBot" then
        if NextBotESPStyle == "Highlight" or NextBotESPStyle == "Smart" or NextBotESPStyle == "Both" then
            local highlight = Instance.new("Highlight")
            highlight.Name = "ESPHIGHLIGHT"
            highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red for NextBots
            highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Adornee = character
            highlight.Parent = character
        end
        
        if (NextBotESPStyle == "Overlay" or NextBotESPStyle == "Smart" or NextBotESPStyle == "Both") and (NextBotNames or ShowNextBotStats) then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESPBILLBOARD"
            billboard.Size = UDim2.new(0, 200, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 5, 0)
            billboard.AlwaysOnTop = true
            billboard.LightInfluence = 0
            billboard.Parent = character
            
            if NextBotNames then
                local nameLabel = Instance.new("TextLabel")
                nameLabel.Name = "NameLabel"
                nameLabel.Size = UDim2.new(1, 0, 0, NameTextSize + 6)
                nameLabel.Position = UDim2.new(0, 0, 0, 0)
                nameLabel.BackgroundTransparency = 1
                nameLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                nameLabel.TextSize = NameTextSize
                nameLabel.Font = Enum.Font.SourceSansBold
                nameLabel.Text = character.Name ~= "" and character.Name or "NextBot"
                nameLabel.Parent = billboard
            end
            
            if ShowNextBotStats then
                local statsLabel = Instance.new("TextLabel")
                statsLabel.Name = "StatsLabel"
                statsLabel.Size = UDim2.new(1, 0, 0, StatsTextSize * 5)
                statsLabel.Position = UDim2.new(0, 0, 0, NameTextSize + 8)
                statsLabel.BackgroundTransparency = 1
                statsLabel.TextColor3 = Color3.fromRGB(255, 200, 200)
                statsLabel.TextSize = StatsTextSize
                statsLabel.Font = Enum.Font.SourceSans
                statsLabel.TextYAlignment = Enum.TextYAlignment.Top
                statsLabel.Parent = billboard
                
                spawn(function()
                    while billboard and billboard.Parent do
                        local statText = ""
                        for name, value in pairs(character:GetAttributes()) do
                            statText = statText .. name .. ": " .. tostring(value) .. "\n"
                            if #statText > 200 then -- Prevent text from becoming too long
                                statText = string.sub(statText, 1, 200) .. "..."
                                break
                            end
                        end
                        statsLabel.Text = statText
                        wait(0.2)
                    end
                end)
            end
        end
    end
end

local function UpdateAllESP()
    for _, player in pairs(workspace.Game.Players:GetChildren()) do
        local entityType = IsPlayerOrNextBot(player)
        
        if entityType == "Player" and player.Name ~= PlayerName and ESP_Players then
            CreateESP(player, "Player")
        elseif entityType == "NextBot" and ESP_NextBot then
            CreateESP(player, "NextBot")
        end
    end
end

local function ClearAllESP()
    for _, player in pairs(workspace.Game.Players:GetChildren()) do
        for _, obj in pairs(player:GetChildren()) do
            if obj.Name == "ESPHIGHLIGHT" or obj.Name == "ESPBILLBOARD" then
                obj:Destroy()
            end
        end
    end
end

local function UpdateSelectedPlayerInfo()
    if SelectedInfoPlayer == "None" then
        return "No player selected"
    end
    
    local info = ""
    local playerInWorkspace = workspace.Game.Players:FindFirstChild(SelectedInfoPlayer)
    local playerInPlayers = Players:FindFirstChild(SelectedInfoPlayer)
    
    if playerInWorkspace then
        info = info .. "--- Workspace Attributes ---\n"
        for name, value in pairs(playerInWorkspace:GetAttributes()) do
            info = info .. name .. ": " .. tostring(value) .. "\n"
        end
    end
    
    if playerInPlayers then
        info = info .. "\n--- Player Attributes ---\n"
        for name, value in pairs(playerInPlayers:GetAttributes()) do
            info = info .. name .. ": " .. tostring(value) .. "\n"
        end
    end
    
    if info == "" then
        return "No information available for " .. SelectedInfoPlayer
    end
    
    return info
end

local function GetAllPlayersAndNextBots()
    local entities = {}
    table.insert(entities, "None")
    
    for _, player in pairs(workspace.Game.Players:GetChildren()) do
        local entityType = IsPlayerOrNextBot(player)
        table.insert(entities, player.Name .. " (" .. entityType .. ")")
    end
    
    return entities
end

-- Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://26643342",
    PremiumOnly = false
})

MainTab:AddToggle({
    Name = "Auto Respawn",
    Default = false,
    Color = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        AutoRespawn = Value
        
        if AutoRespawn then
            spawn(function()
                while AutoRespawn do
                    local localChar = workspace.Game.Players:FindFirstChild(PlayerName)
                    if localChar then
                        local state = GetPlayerState(PlayerName)
                        if state == "Downed" then
                            local args = {
                                [1] = true
                            }
                            ReplicatedStorage.Events.Player.ChangePlayerMode:FireServer(unpack(args))
                            wait(3)
                        end
                    end
                    wait(0.1)
                end
            end)
        end
    end
})

MainTab:AddButton({
    Name = "Respawn",
    Callback = function()
        local args = {
            [1] = true
        }
        ReplicatedStorage.Events.Player.ChangePlayerMode:FireServer(unpack(args))
    end
})

MainTab:AddToggle({
    Name = "Auto Whistle",
    Default = false,
    Color = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        AutoWhistle = Value
        
        if AutoWhistle then
            spawn(function()
                while AutoWhistle do
                    ReplicatedStorage.Events.Character.Whistle:FireServer()
                    wait(3)
                end
            end)
        end
    end
})

MainTab:AddToggle({
    Name = "Auto Revive Nearest",
    Default = false,
    Color = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        AutoReviveNearest = Value
        
        if AutoReviveNearest then
            spawn(function()
                while AutoReviveNearest do
                    local nearestPlayer = GetNearestDownedPlayer()
                    if nearestPlayer then
                        local args = {
                            [1] = "Revive",
                            [2] = true,
                            [3] = nearestPlayer
                        }
                        ReplicatedStorage.Events.Character.Interact:FireServer(unpack(args))
                    end
                    wait(0.1)
                end
            end)
        end
    end
})

MainTab:AddToggle({
    Name = "Downed Check",
    Default = false,
    Color = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        DownedCheck = Value
        
        if DownedCheck then
            spawn(function()
                while DownedCheck do
                    local nearestPlayer = GetNearestDownedPlayer()
                    if nearestPlayer then
                        local args = {
                            [1] = "Revive",
                            [2] = true,
                            [3] = nearestPlayer
                        }
                        ReplicatedStorage.Events.Character.Interact:FireServer(unpack(args))
                    end
                    wait(0.1)
                end
            end)
        end
    end
})

MainTab:AddToggle({
    Name = "Auto tp to Downed",
    Default = false,
    Color = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        AutoTpToDowned = Value
        
        if AutoTpToDowned then
            spawn(function()
                while AutoTpToDowned do
                    local localChar = workspace.Game.Players:FindFirstChild(PlayerName)
                    if not localChar then
                        wait(0.1)
                        continue
                    end
                    
                    local localRoot = localChar:FindFirstChild("HumanoidRootPart")
                    if not localRoot then
                        wait(0.1)
                        continue
                    end
                    
                    local function processPlayer(player)
                        if player.Name ~= PlayerName then
                            local playerState = GetPlayerState(player.Name)
                            if playerState == "Downed" then
                                local playerRoot = player:FindFirstChild("HumanoidRootPart")
                                if playerRoot then
                                    -- Teleport to player
                                    localRoot.CFrame = playerRoot.CFrame
                                    
                                    -- Revive them
                                    local args = {
                                        [1] = "Revive",
                                        [2] = true,
                                        [3] = player.Name
                                    }
                                    ReplicatedStorage.Events.Character.Interact:FireServer(unpack(args))
                                    
                                    -- Wait for state change or timeout
                                    local startTime = tick()
                                    while GetPlayerState(player.Name) == "Downed" and (tick() - startTime) < 5 do
                                        localRoot.CFrame = playerRoot.CFrame
                                        ReplicatedStorage.Events.Character.Interact:FireServer(unpack(args))
                                        wait(0.01)
                                    end
                                    
                                    return true -- Successfully processed a player
                                end
                            end
                        end
                        return false -- No player was processed
                    end
                    
                    local playersProcessed = false
                    for _, player in pairs(workspace.Game.Players:GetChildren()) do
                        playersProcessed = processPlayer(player) or playersProcessed
                    end
                    
                    if not playersProcessed then
                        wait(0.1) -- Wait a bit if no players were processed
                    end
                end
            end)
        end
    end
})

MainTab:AddDropdown({
    Name = "Map Vote",
    Default = "1",
    Options = {"1", "2", "3", "4"},
    Callback = function(Value)
        SelectedMap = tonumber(Value)
    end
})

MainTab:AddToggle({
    Name = "Auto Map Vote",
    Default = false,
    Color = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        AutoMapVote = Value
        
        if AutoMapVote then
            spawn(function()
                while AutoMapVote do
                    local args = {
                        [1] = SelectedMap
                    }
                    ReplicatedStorage.Events.Player.Vote:FireServer(unpack(args))
                    wait(15)
                end
            end)
        end
    end
})

-- ESP Tab
local ESPTab = Window:MakeTab({
    Name = "ESP",
    Icon = "rbxassetid://14503021162",
    PremiumOnly = false
})

ESPTab:AddToggle({
    Name = "ESP Players",
    Default = false,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        ESP_Players = Value
        
        if not ESP_Players then
            for _, player in pairs(workspace.Game.Players:GetChildren()) do
                if player.Name ~= PlayerName and IsPlayerOrNextBot(player) == "Player" then
                    for _, obj in pairs(player:GetChildren()) do
                        if obj.Name == "ESPHIGHLIGHT" or obj.Name == "ESPBILLBOARD" then
                            obj:Destroy()
                        end
                    end
                end
            end
        else
            UpdateAllESP()
        end
    end
})

ESPTab:AddToggle({
    Name = "Show Names",
    Default = false,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        ShowNames = Value
        UpdateAllESP()
    end
})

ESPTab:AddToggle({
    Name = "Show Stats",
    Default = false,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        ShowStats = Value
        UpdateAllESP()
    end
})

ESPTab:AddTextbox({
    Name = "Name Text Size",
    Default = "14",
    TextDisappear = false,
    Callback = function(Value)
        NameTextSize = tonumber(Value) or 14
        UpdateAllESP()
    end
})

ESPTab:AddTextbox({
    Name = "Stats Text Size",
    Default = "12",
    TextDisappear = false,
    Callback = function(Value)
        StatsTextSize = tonumber(Value) or 12
        UpdateAllESP()
    end
})

ESPTab:AddToggle({
    Name = "ESP NextBot",
    Default = false,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        ESP_NextBot = Value
        
        if not ESP_NextBot then
            for _, entity in pairs(workspace.Game.Players:GetChildren()) do
                if IsPlayerOrNextBot(entity) == "NextBot" then
                    for _, obj in pairs(entity:GetChildren()) do
                        if obj.Name == "ESPHIGHLIGHT" or obj.Name == "ESPBILLBOARD" then
                            obj:Destroy()
                        end
                    end
                end
            end
        else
            UpdateAllESP()
        end
    end
})

ESPTab:AddDropdown({
    Name = "ESP NextBot Style",
    Default = "Highlight",
    Options = {"Highlight", "Overlay", "Dot", "Box", "Smart", "Both"},
    Callback = function(Value)
        NextBotESPStyle = Value
        UpdateAllESP()
    end
})

ESPTab:AddToggle({
    Name = "NextBot Names",
    Default = false,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        NextBotNames = Value
        UpdateAllESP()
    end
})

ESPTab:AddToggle({
    Name = "Show Stats",
    Default = false,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        ShowNextBotStats = Value
        UpdateAllESP()
    end
})

-- Others Tab
local OthersTab = Window:MakeTab({
    Name = "Others",
    Icon = "rbxassetid://11323390395",
    PremiumOnly = false
})

OthersTab:AddButton({
    Name = "Chatspy New",
    Callback = function()
        local ChatSpy = {
    Enabled = true
}

local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to display spy message in chat
local function displaySpyMessage(playerName, message, isPrivate)
    if not ChatSpy.Enabled then return end
    
    -- Format the spy message
    local spyText = string.format(
        "👁️ [ChatSpy] %s%s: %s",
        isPrivate and "🔒 " or "",
        playerName,
        message
    )
    
    -- Display in TextChatService
    local channel = TextChatService.TextChannels.RBXGeneral
    channel:DisplaySystemMessage(spyText)
end

-- Hook Chat Messages (Including Private Messages)
local function hookPlayer(player)
    player.Chatted:Connect(function(msg)
        if player == LocalPlayer then return end -- Don't spy on own messages
        
        -- Check for private messages
        local isPrivate = string.sub(msg, 1, 3) == "/w " or 
                         string.sub(msg, 1, 3) == "/pm " or
                         string.sub(msg, 1, 5) == "/tell " or
                         string.sub(msg, 1, 9) == "/whisper "
        
        displaySpyMessage(player.Name, msg, isPrivate)
    end)
end

-- Initialize
local function init()
    -- Hook existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            hookPlayer(player)
        end
    end
    
    -- Hook new players
    Players.PlayerAdded:Connect(function(player)
        if player ~= LocalPlayer then
            hookPlayer(player)
        end
    end)
    
    -- Show enabled message
    TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage("👁️ [ChatSpy] Chat spy has been enabled! Monitoring all messages...")
end

init()

return ChatSpy
    end
})

OthersTab:AddButton({
    Name = "Anti Nextbots GUI",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/gumanba/Scripts/main/EvadeEvent"))()
    end
})

-- Player Info dropdown with real-time updating
local PlayerInfoDropdown = OthersTab:AddDropdown({
    Name = "Player Info",
    Default = "None",
    Options = GetAllPlayersAndNextBots(),
    Callback = function(Value)
        -- Extract just the name without the type label
        local actualName = string.match(Value, "^([^%(]+)")
        if actualName then
            SelectedInfoPlayer = string.gsub(actualName, "%s+$", "") -- Trim trailing spaces
        else
            SelectedInfoPlayer = "None"
        end
    end
})

-- Player Info Display
local PlayerInfoParagraph = OthersTab:AddParagraph("Player Info", "No player selected")

OthersTab:AddButton({
    Name = "Notify Info",
    Callback = function()
        local infoText = UpdateSelectedPlayerInfo()
        OrionLib:MakeNotification({
            Name = "Player Info",
            Content = string.sub(infoText, 1, 150) .. (string.len(infoText) > 150 and "..." or ""),
            Image = "rbxassetid://4483345998",
            Time = 7
        })
    end
})

-- Stats reference
local statsPath = workspace.Game.Stats
local isAutoNotifyEnabled = false

-- Notification tracking
local lastNotificationTimes = {
    roundEnd15 = 0,
    roundEnd50 = 0,
    roundStart15 = 0,
    specialRound = 0
}

-- Previous values tracking
local previousValues = {
    timer = nil,
    roundStarted = nil,
    specialRound = nil
}

-- Create Title for stats header
OthersTab:AddSection({
    Name = "Game Stats Monitoring"
})

-- Create individual labels for each stat
local roundsCompletedLabel = OthersTab:AddLabel("Rounds Completed: Loading...")
local specialRoundLabel = OthersTab:AddLabel("Special Round: None")
local roundStartedLabel = OthersTab:AddLabel("Round Started: Loading...")
local timerLabel = OthersTab:AddLabel("Timer: Loading...")

-- Function to update the stats display
local function updateStatsDisplay()
    -- Update RoundsCompleted
    local roundsCompleted = statsPath:GetAttribute("RoundsCompleted")
    roundsCompletedLabel:Set("Rounds Completed: " .. (roundsCompleted or "N/A"))
    
    -- Update SpecialRound
    local specialRound = statsPath:GetAttribute("SpecialRound")
    specialRoundLabel:Set("Special Round: " .. (specialRound or "None"))
    
    -- Update RoundStarted
    local roundStarted = statsPath:GetAttribute("RoundStarted")
    roundStartedLabel:Set("Round Started: " .. tostring(roundStarted or "N/A"))
    
    -- Update Timer
    local timer = statsPath:GetAttribute("Timer")
    timerLabel:Set("Timer: " .. (timer or "N/A"))
    
    return {
        roundsCompleted = roundsCompleted,
        specialRound = specialRound,
        roundStarted = roundStarted,
        timer = timer
    }
end

-- Function to handle notifications
local function handleNotifications(currentValues)
    if not isAutoNotifyEnabled then return end
    
    local currentTime = tick()
    local roundStarted = currentValues.roundStarted
    local timer = currentValues.timer
    local specialRound = currentValues.specialRound
    
    -- Special Round notification
    if specialRound and specialRound ~= previousValues.specialRound then
        OrionLib:MakeNotification({
            Name = "Special Round Alert",
            Content = "Special Round is: " .. specialRound,
            Image = "rbxassetid://4483345998",
            Time = 5
        })
        lastNotificationTimes.specialRound = currentTime
        previousValues.specialRound = specialRound
    end
    
    -- Round ending in 15 seconds notification
    if roundStarted == true and timer == 15 and 
       (previousValues.timer ~= 15 or previousValues.roundStarted ~= true) then
        OrionLib:MakeNotification({
            Name = "Round Ending Soon",
            Content = "Round Will End In 15 seconds",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
        lastNotificationTimes.roundEnd15 = currentTime
    end
    
    -- Round ending in 50 seconds notification
    if roundStarted == true and timer == 50 and 
       (previousValues.timer ~= 50 or previousValues.roundStarted ~= true) then
        OrionLib:MakeNotification({
            Name = "Round Progress",
            Content = "Round Will End In 50 seconds",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
        lastNotificationTimes.roundEnd50 = currentTime
    end
    
    -- Round starting in 15 seconds notification
    if roundStarted == false and timer == 15 and 
       (previousValues.timer ~= 15 or previousValues.roundStarted ~= false) then
        OrionLib:MakeNotification({
            Name = "Round Starting Soon",
            Content = "Round will start in: 15 seconds",
            Image = "rbxassetid://4483345998",
            Time = 4
        })
        lastNotificationTimes.roundStart15 = currentTime
    end
    
    -- Update previous values
    previousValues.timer = timer
    previousValues.roundStarted = roundStarted
end

-- Create toggle for notifications
OthersTab:AddToggle({
    Name = "Auto Notify Game Stats",
    Default = false,
    Callback = function(Value)
        isAutoNotifyEnabled = Value
        
        -- Reset notification tracking when toggled
        if isAutoNotifyEnabled then
            -- Reset previous values to ensure notifications trigger on first check
            previousValues = {
                timer = nil,
                roundStarted = nil,
                specialRound = nil
            }
        end
    end
})

-- Update loop
local function updateLoop()
    while true do
        -- Update stats display and get current values
        local currentValues = updateStatsDisplay()
        
        -- Check and send notifications
        handleNotifications(currentValues)
        
        -- Wait before next check (0.1 seconds as requested)
        task.wait(0.1)
    end
end

-- Start the update loop
task.spawn(updateLoop)

-- Update player info and ESP
RunService.Heartbeat:Connect(function()
    if tick() % 1 < 0.1 then  -- Update roughly every second
        -- Update player info dropdown
        PlayerInfoDropdown:Refresh(GetAllPlayersAndNextBots(), true)
        
        -- Update player info paragraph
        if SelectedInfoPlayer ~= "None" then
            PlayerInfoParagraph:Set("Player Info", UpdateSelectedPlayerInfo())
        end
        
        -- Update ESP
        if ESP_Players or ESP_NextBot then
            UpdateAllESP()
        end
    end
end)

-- Initialize
OrionLib:Init()
end)

addcmd('Zoweapon remover',{'weaponremover'},function(args, speaker)
local OrionLib = loadstring(game:HttpGet(("https://raw.githubusercontent.com/Giangplay/Script/main/Orion_Library_PE_V2.lua")))()

-- Initialize variables
local Players = cloneref(game:GetService("Players"))
local RunService = cloneref(game:GetService("RunService"))
local UserInputService = cloneref(game:GetService("UserInputService"))
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Settings
getgenv().Settings = {
    DisableAllWeapons = false,
    AuraDisabler = false,
    ShowAuraVisualization = false,
    AuraRadius = 15,
    ShowSelectGUI = false,
    SelectGUIPosition = UDim2.new(0.5, -100, 0.5, -50),
    LoopDisabledPlayers = {},
    ProtectedPlayers = {},
    ProtectionRadius = 15,
    ShowProtectionVisualization = false
}

-- Create the main GUI
local Window = OrionLib:MakeWindow({
    Name = "Zo Remove Tools GUI",
    HidePremium = true,
    SaveConfig = true,
    ConfigFolder = "ZoRemoveTools",
    IntroEnabled = false
})

-- UTILITY FUNCTIONS
-- Function to check if a character is a player (including disguised players)
function isPlayer(instance)
    -- Normal player check
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character == instance and player ~= LocalPlayer then
            return true, player
        end
    end
    
    -- Check for disguised players - specific to this game's mechanics
    local specialTypes = {"Lamp", "Skeleton Peasant", "Skeleton Gravedigger", "Skeleton Farmhand"}
    
    for _, typeName in ipairs(specialTypes) do
        if instance.Name == typeName and instance:FindFirstChild("Humanoid") then
            -- Check if the disguised entity is alive and is not LocalPlayer
            local humanoid = instance:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 and instance:FindFirstChild("HumanoidRootPart") and instance:FindFirstChild("Head") then
                -- Make sure this isn't LocalPlayer disguised
                if instance == LocalPlayer.Character then
                    return false, nil
                end
                
                -- Find the actual player that owns this character
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character == instance then
                        return true, player
                    end
                end
                
                -- Fallback if player not found directly
                return true, {
                    Name = findPlayerNameForDisguise(instance),
                    Character = instance
                }
            end
        end
    end
    
    return false, nil
end

-- Function to find the actual player name for a disguised character
function findPlayerNameForDisguise(character)
    -- Method 1: Try to find by character reference
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character == character then
            return player.Name
        end
    end
    
    -- Method 2: Try to find by proximity and game-specific indicators
    -- Game might store player data in the character model
    for _, child in pairs(character:GetChildren()) do
        if child:IsA("StringValue") and (child.Name == "PlayerName" or child.Name:find("Player")) then
            return child.Value
        end
    end
    
    -- Method 3: Check for ownership property
    local playerProperty = character:FindFirstChild("Player")
    if playerProperty and playerProperty:IsA("ObjectValue") and playerProperty.Value then
        return playerProperty.Value.Name
    end
    
    -- Return the raw name as last resort
    return character.Name
end

-- Function to disable a specific player's tool
function disablePlayerTool(player)
    if not player or player == LocalPlayer then return end
    
    local tool
    
    -- Check backpack first
    if player.Backpack then
        tool = player.Backpack:FindFirstChildOfClass("Tool")
    end
    
    -- Check character if no tool in backpack
    if not tool and player.Character then
        tool = player.Character:FindFirstChildOfClass("Tool")
    end
    
    -- If tool found and it has WeldR remote, fire it
    if tool and tool:FindFirstChild("WeldR") then
        tool.WeldR:FireServer()
        return true
    end
    
    return false
end

-- Function to find player by name (partial match)
function findPlayerByName(name)
    if not name or name == "" then return nil end
    
    name = name:lower()
    local bestMatch
    local bestMatchScore = 0
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            -- Check username
            if player.Name:lower() == name then
                return player -- Exact match, return immediately
            elseif player.Name:lower():find(name) then
                local score = #name / #player.Name
                if score > bestMatchScore then
                    bestMatch = player
                    bestMatchScore = score
                end
            end
            
            -- Check DisplayName
            if player.DisplayName:lower() == name then
                return player -- Exact match, return immediately
            elseif player.DisplayName:lower():find(name) then
                local score = #name / #player.DisplayName
                if score > bestMatchScore then
                    bestMatch = player
                    bestMatchScore = score
                end
            end
        end
    end
    
    return bestMatch
end

-- Function to add player to protected list
function addToProtected(player)
    if not player or player == LocalPlayer then return end

    getgenv().Settings.ProtectedPlayers[player.UserId] = player
    updateProtectedPlayersHeader()
    setupProtectionSystem()
    setupProtectionAuras()
end

-- Function to remove player from protected list
function removeFromProtected(player)
    if not player then return end

    -- Remove protection aura visualization if it exists
    if workspace:FindFirstChild("ZoProtectionAura_" .. player.UserId) then
        workspace["ZoProtectionAura_" .. player.UserId]:Destroy()
    end

    getgenv().Settings.ProtectedPlayers[player.UserId] = nil
    updateProtectedPlayersHeader()
    setupProtectionSystem()
    setupProtectionAuras()
end

-- Function to update the protected players header
function updateProtectedPlayersHeader()
    if not ByNameTab then return end

    local headerText = "Currently Protected:"
    local count = 0

    for userId, player in pairs(getgenv().Settings.ProtectedPlayers) do
        if typeof(player) == "Instance" and player:IsA("Player") then
            headerText = headerText .. "\n" .. player.DisplayName .. " / " .. player.Name
            count = count + 1
        end
    end

    if count == 0 then
        headerText = headerText .. "\nNone"
    end

    ProtectedPlayersHeader:Set(headerText)
end

-- Function to process special commands for loop disable
function processSpecialCommand(command)
    local playersToDisable = {}
    
    if command == "All" or command == "all" then
        -- Add all players except LocalPlayer
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                table.insert(playersToDisable, player)
            end
        end
    elseif command == "Random" or command == "random" then
        -- Choose a random player
        local otherPlayers = {}
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                table.insert(otherPlayers, player)
            end
        end
        
        if #otherPlayers > 0 then
            local randomPlayer = otherPlayers[math.random(1, #otherPlayers)]
            table.insert(playersToDisable, randomPlayer)
        end
    elseif command:find("Others%-") then
        -- Get all players except those listed
        local excludedNames = {}
        for name in command:sub(8):gmatch("([^,]+)") do
            excludedNames[name:lower()] = true
        end
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                local excluded = false
                
                -- Check if player name is in excluded list
                if excludedNames[player.Name:lower()] or excludedNames[player.DisplayName:lower()] then
                    excluded = true
                end
                
                if not excluded then
                    table.insert(playersToDisable, player)
                end
            end
        end
    elseif command == "Others" or command == "others" then
        -- All players except LocalPlayer
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                table.insert(playersToDisable, player)
            end
        end
    else
        -- Process comma-separated player names
        for name in command:gmatch("([^,]+)") do
            local player = findPlayerByName(name:gsub("^%s*(.-)%s*$", "%1"))
            if player then
                table.insert(playersToDisable, player)
            end
        end
    end
    
    return playersToDisable
end

-- MAIN FUNCTIONALITIES
-- All Weapons Disabler
function setupAllWeaponsDisabler()
    if getgenv().ToolDisabler then
        getgenv().ToolDisabler:Disconnect()
        getgenv().ToolDisabler = nil
    end
    
    if not getgenv().Settings.DisableAllWeapons then return end
    
    getgenv().ToolDisabler = RunService.Stepped:Connect(function()
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local tool = (player.Character:FindFirstChildOfClass("Tool") or player.Backpack:FindFirstChildOfClass("Tool")) or nil
                if tool and tool:FindFirstChild("WeldR") then
                    tool.WeldR:FireServer()
                end
            end
        end
        RunService.RenderStepped:Wait()
    end)
end

-- Aura Tool Disabler
function setupAuraDisabler()
    if getgenv().AuraDisabler then
        getgenv().AuraDisabler:Disconnect()
        getgenv().AuraDisabler = nil
    end
    
    if not getgenv().Settings.AuraDisabler then return end
    
    getgenv().AuraDisabler = RunService.Stepped:Connect(function()
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        
        local hrp = LocalPlayer.Character.HumanoidRootPart
        local radius = getgenv().Settings.AuraRadius
        
        -- Check players and disguised characters in workspace
        for _, instance in pairs(workspace:GetChildren()) do
            local isPlayerChar, playerObj = isPlayer(instance)
            
            if isPlayerChar and playerObj and playerObj ~= LocalPlayer then
                local character = playerObj.Character or instance
                
                if character and character:FindFirstChild("HumanoidRootPart") then
                    local targetHRP = character.HumanoidRootPart
                    local distance = (hrp.Position - targetHRP.Position).Magnitude
                    
                    if distance <= radius then
                        -- Disable their tool
                        if type(playerObj) == "table" then
                            -- Handle disguised player
                            local tool
                            if character:FindFirstChildOfClass("Tool") then
                                tool = character:FindFirstChildOfClass("Tool")
                                if tool and tool:FindFirstChild("WeldR") then
                                    tool.WeldR:FireServer()
                                end
                            end
                        else
                            -- Regular player
                            disablePlayerTool(playerObj)
                        end
                    end
                end
            end
        end
        
        RunService.RenderStepped:Wait()
    end)
end

-- Aura Visualization
function setupAuraVisualization()
    if getgenv().AuraVisualization then
        getgenv().AuraVisualization:Disconnect()
        getgenv().AuraVisualization = nil
    end
    
    -- Remove existing visualization
    if workspace:FindFirstChild("ZoAuraVisualization") then
        workspace.ZoAuraVisualization:Destroy()
    end
    
    if not getgenv().Settings.ShowAuraVisualization or not getgenv().Settings.AuraDisabler then return end
    
    -- Create visualization part
    local auraVis = Instance.new("Part")
    auraVis.Name = "ZoAuraVisualization"
    auraVis.Shape = Enum.PartType.Ball
    auraVis.Size = Vector3.new(getgenv().Settings.AuraRadius * 2, getgenv().Settings.AuraRadius * 2, getgenv().Settings.AuraRadius * 2)
    auraVis.Material = Enum.Material.ForceField
    auraVis.Color = Color3.fromRGB(255, 0, 255) -- Magenta/Pink
    auraVis.Transparency = 0.8
    auraVis.CanCollide = false
    auraVis.Anchored = true
    auraVis.Parent = workspace
    
    getgenv().AuraVisualization = RunService.Stepped:Connect(function()
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        
        -- Update size if radius changed
        auraVis.Size = Vector3.new(getgenv().Settings.AuraRadius * 2, getgenv().Settings.AuraRadius * 2, getgenv().Settings.AuraRadius * 2)
        
        -- Update position
        auraVis.Position = LocalPlayer.Character.HumanoidRootPart.Position
        
        RunService.RenderStepped:Wait()
    end)
end

-- Select GUI for Click-to-Remove Tool
function createSelectGUI()
    if game:GetService("CoreGui"):FindFirstChild("ZoSelectGUI") then
        game:GetService("CoreGui").ZoSelectGUI:Destroy()
    end
    
    local SelectGUI = Instance.new("ScreenGui")
    SelectGUI.Name = "ZoSelectGUI"
    SelectGUI.Parent = game:GetService("CoreGui")
    SelectGUI.Enabled = getgenv().Settings.ShowSelectGUI
    
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 200, 0, 100)
    MainFrame.Position = getgenv().Settings.SelectGUIPosition
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Active = true
    MainFrame.Draggable = true
    MainFrame.Parent = SelectGUI
    
    -- Make corners rounded
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = MainFrame
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Size = UDim2.new(1, 0, 0, 30)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = "Target Player"
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 18
    TitleLabel.Parent = MainFrame
    
    local PlayerNameLabel = Instance.new("TextLabel")
    PlayerNameLabel.Name = "PlayerNameLabel"
    PlayerNameLabel.Size = UDim2.new(1, 0, 0, 30)
    PlayerNameLabel.Position = UDim2.new(0, 0, 0.3, 0)
    PlayerNameLabel.BackgroundTransparency = 1
    PlayerNameLabel.Text = "Looking for players..."
    PlayerNameLabel.Font = Enum.Font.Gotham
    PlayerNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    PlayerNameLabel.TextSize = 16
    PlayerNameLabel.Parent = MainFrame
    
    local DisableButton = Instance.new("TextButton")
    DisableButton.Name = "DisableButton"
    DisableButton.Size = UDim2.new(0.8, 0, 0, 30)
    DisableButton.Position = UDim2.new(0.1, 0, 0.65, 0)
    DisableButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    DisableButton.Text = "Click to Disable Tool"
    DisableButton.Font = Enum.Font.GothamBold
    DisableButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    DisableButton.TextSize = 14
    DisableButton.Parent = MainFrame
    
    -- Make button corners rounded
    local ButtonUICorner = Instance.new("UICorner")
    ButtonUICorner.CornerRadius = UDim.new(0, 8)
    ButtonUICorner.Parent = DisableButton
    
    -- Save position when dragged
    MainFrame:GetPropertyChangedSignal("Position"):Connect(function()
        getgenv().Settings.SelectGUIPosition = MainFrame.Position
    end)
    
    -- Target highlighting and detection
    local currentHighlight
    local currentTargetPlayer
    
    -- Function to create or update highlight
    function updateHighlight(player)
        -- Remove existing highlight
        if currentHighlight then
            currentHighlight:Destroy()
            currentHighlight = nil
        end
        
        currentTargetPlayer = player
        
        if not player then
            PlayerNameLabel.Text = "No player targeted"
            return
        end
        
        local character = player.Character
        if not character then return end
        
        -- Check if player has tool
        local hasTool = false
        if player.Backpack and player.Backpack:FindFirstChildOfClass("Tool") then
            hasTool = true
        elseif character:FindFirstChildOfClass("Tool") then
            hasTool = true
        end
        
        -- Create highlight
        local highlight = Instance.new("Highlight")
        highlight.Name = "ZoTargetHighlight"
        highlight.FillColor = hasTool and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 255, 255)
        highlight.OutlineColor = Color3.fromRGB(0, 0, 0)
        highlight.FillTransparency = 0.6
        highlight.OutlineTransparency = 0
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Parent = character
        
        currentHighlight = highlight
        
        -- Update label with player name
        PlayerNameLabel.Text = player.DisplayName .. " / " .. player.Name
    end
    
    -- Click handler for the disable button
    DisableButton.MouseButton1Click:Connect(function()
        if currentTargetPlayer then
            disablePlayerTool(currentTargetPlayer)
        end
    end)
    
    -- Target detection loop
    getgenv().TargetDetector = RunService.RenderStepped:Connect(function()
        if not getgenv().Settings.ShowSelectGUI then return end
        
        local camera = workspace.CurrentCamera
        local mouseRay = camera:ScreenPointToRay(Mouse.X, Mouse.Y)
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
        
        local result = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        local closestPlayer = nil
        local closestDistance = math.huge
        
        -- If nothing hit by raycast, use closest player to screen center
        if not result then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
                    local screenPos, onScreen = camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
                    if onScreen then
                        local distance = ((Mouse.X - screenPos.X)^2 + (Mouse.Y - screenPos.Y)^2)^0.5
                        if distance < closestDistance then
                            closestDistance = distance
                            closestPlayer = player
                        end
                    end
                end
            end
        else
            -- Check if we hit a player or part of a player
            local hitPart = result.Instance
            local hitModel = hitPart:FindFirstAncestorOfClass("Model")
            
            if hitModel then
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character == hitModel then
                        closestPlayer = player
                        break
                    end
                end
            end
            
            -- If no player hit, find closest player to hitpoint
            if not closestPlayer then
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
                        local distance = (player.Character.HumanoidRootPart.Position - result.Position).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestPlayer = player
                        end
                    end
                end
            end
        end
        
        -- Update the highlight
        updateHighlight(closestPlayer)
    end)
    
    return SelectGUI
end

-- Loop Disable for specific players
function setupLoopDisable()
    if getgenv().LoopDisabler then
        getgenv().LoopDisabler:Disconnect()
        getgenv().LoopDisabler = nil
    end
    
    if next(getgenv().Settings.LoopDisabledPlayers) == nil then return end
    
    getgenv().LoopDisabler = RunService.Stepped:Connect(function()
        for userId, player in pairs(getgenv().Settings.LoopDisabledPlayers) do
            if typeof(player) == "Instance" and player:IsA("Player") and player ~= LocalPlayer then
                disablePlayerTool(player)
            end
        end
        RunService.RenderStepped:Wait()
    end)
end

-- Function to update the loop disabled players header
function updateLoopDisabledPlayersHeader()
    if not ByNameTab then return end
    
    local headerText = "Currently Loop Disabled:"
    local count = 0
    
    for userId, player in pairs(getgenv().Settings.LoopDisabledPlayers) do
        if typeof(player) == "Instance" and player:IsA("Player") then
            headerText = headerText .. "\n" .. player.DisplayName .. " / " .. player.Name
            count = count + 1
        end
    end
    
    if count == 0 then
        headerText = headerText .. "\nNone"
    end
    
    LoopDisabledPlayersHeader:Set(headerText)
end

-- Create and add player to loop disabled list
function addToLoopDisabled(player)
    if not player or player == LocalPlayer then return end
    
    getgenv().Settings.LoopDisabledPlayers[player.UserId] = player
    updateLoopDisabledPlayersHeader()
    setupLoopDisable()
end

-- Remove player from loop disabled list
function removeFromLoopDisabled(player)
    if not player then return end
    
    getgenv().Settings.LoopDisabledPlayers[player.UserId] = nil
    updateLoopDisabledPlayersHeader()
    setupLoopDisable()
end

-- Protection visualization and system functions
function setupProtectionAuras()
    -- Clean up existing protection visualizations if needed
    for _, existingAura in pairs(workspace:GetChildren()) do
        if existingAura.Name:match("^ZoProtectionAura_") then
            existingAura:Destroy()
        end
    end
    
    if not getgenv().Settings.ShowProtectionVisualization then return end
    
    -- Create visualization for each protected player
    for userId, player in pairs(getgenv().Settings.ProtectedPlayers) do
        if typeof(player) == "Instance" and player:IsA("Player") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local auraVis = Instance.new("Part")
            auraVis.Name = "ZoProtectionAura_" .. userId
            auraVis.Shape = Enum.PartType.Ball
            auraVis.Size = Vector3.new(getgenv().Settings.ProtectionRadius * 2, getgenv().Settings.ProtectionRadius * 2, getgenv().Settings.ProtectionRadius * 2)
            auraVis.Material = Enum.Material.ForceField
            auraVis.Color = Color3.fromRGB(0, 255, 0) -- Green
            auraVis.Transparency = 0.8
            auraVis.CanCollide = false
            auraVis.Anchored = true
            auraVis.Parent = workspace
            
            -- Position at player's HRP
            auraVis.Position = player.Character.HumanoidRootPart.Position
        end
    end
    
    -- Set up monitoring for protection auras
    if getgenv().ProtectionVisualization then
        getgenv().ProtectionVisualization:Disconnect()
        getgenv().ProtectionVisualization = nil
    end
    
    getgenv().ProtectionVisualization = RunService.Stepped:Connect(function()
        for userId, player in pairs(getgenv().Settings.ProtectedPlayers) do
            if typeof(player) == "Instance" and player:IsA("Player") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local auraVis = workspace:FindFirstChild("ZoProtectionAura_" .. userId)
                
                if auraVis then
                    -- Update size if radius changed
                    auraVis.Size = Vector3.new(getgenv().Settings.ProtectionRadius * 2, getgenv().Settings.ProtectionRadius * 2, getgenv().Settings.ProtectionRadius * 2)
                    
                    -- Update position
                    auraVis.Position = player.Character.HumanoidRootPart.Position
                else
                    -- Recreate if missing
                    local newAuraVis = Instance.new("Part")
                    newAuraVis.Name = "ZoProtectionAura_" .. userId
                    newAuraVis.Shape = Enum.PartType.Ball
                    newAuraVis.Size = Vector3.new(getgenv().Settings.ProtectionRadius * 2, getgenv().Settings.ProtectionRadius * 2, getgenv().Settings.ProtectionRadius * 2)
                    newAuraVis.Material = Enum.Material.ForceField
                    newAuraVis.Color = Color3.fromRGB(0, 255, 0) -- Green
                    newAuraVis.Transparency = 0.8
                    newAuraVis.CanCollide = false
                    newAuraVis.Anchored = true
                    newAuraVis.Parent = workspace
                    
                    -- Position at player's HRP
                    newAuraVis.Position = player.Character.HumanoidRootPart.Position
                end
            end
        end
        
        RunService.RenderStepped:Wait()
    end)
end

function setupProtectionSystem()
    if getgenv().ProtectionSystem then
        getgenv().ProtectionSystem:Disconnect()
        getgenv().ProtectionSystem = nil
    end
    
    if next(getgenv().Settings.ProtectedPlayers) == nil then return end
    
    getgenv().ProtectionSystem = RunService.Stepped:Connect(function()
        -- For each protected player
        for protectedUserId, protectedPlayer in pairs(getgenv().Settings.ProtectedPlayers) do
            if typeof(protectedPlayer) ~= "Instance" or not protectedPlayer:IsA("Player") or not protectedPlayer.Character or not protectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
                continue
            end
            
            local protectedHRP = protectedPlayer.Character.HumanoidRootPart
            
            -- Check all other players
            for _, otherPlayer in pairs(Players:GetPlayers()) do
                -- Skip LocalPlayer and the protected player
                if otherPlayer == LocalPlayer or otherPlayer == protectedPlayer then
                    continue
                end
                
                -- Skip other protected players
                if getgenv().Settings.ProtectedPlayers[otherPlayer.UserId] then
                    continue
                end
                
                -- Check if player is in range
                if otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local otherHRP = otherPlayer.Character.HumanoidRootPart
                    local distance = (protectedHRP.Position - otherHRP.Position).Magnitude
                    
                    -- If in protection radius, disable their tool
                    if distance <= getgenv().Settings.ProtectionRadius then
                        disablePlayerTool(otherPlayer)
                    end
                end
            end
        end
        
        RunService.RenderStepped:Wait()
    end)
end

-- SETUP GUI TABS

-- Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://11601472498",
    PremiumOnly = false
})

MainTab:AddToggle({
    Name = "Disable everyone's weapons",
    Default = getgenv().Settings.DisableAllWeapons,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        getgenv().Settings.DisableAllWeapons = Value
        setupAllWeaponsDisabler()
    end
})

local AuraSection = MainTab:AddSection({
    Name = "Aura Settings"
})

MainTab:AddToggle({
    Name = "Enable/Disable aura tool disabler",
    Default = getgenv().Settings.AuraDisabler,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        getgenv().Settings.AuraDisabler = Value
        setupAuraDisabler()
        setupAuraVisualization()
    end
})

MainTab:AddToggle({
    Name = "Aura visualization",
    Default = getgenv().Settings.ShowAuraVisualization,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        getgenv().Settings.ShowAuraVisualization = Value
        setupAuraVisualization()
    end
})

MainTab:AddSlider({
    Name = "Aura Radius (studs)",
    Min = 1,
    Max = 100,
    Default = getgenv().Settings.AuraRadius,
    Color = Color3.fromRGB(255, 0, 255),
    Increment = 1,
    Callback = function(Value)
        getgenv().Settings.AuraRadius = Value
        setupAuraVisualization()
    end    
})

local SelectSection = MainTab:AddSection({
    Name = "Click to Remove Tool"
})

MainTab:AddToggle({
    Name = "Show Select GUI",
    Default = getgenv().Settings.ShowSelectGUI,
    Color = Color3.fromRGB(0, 0, 255),
    Callback = function(Value)
        getgenv().Settings.ShowSelectGUI = Value
        
        if Value then
            if not game:GetService("CoreGui"):FindFirstChild("ZoSelectGUI") then
                createSelectGUI()
            else
                game:GetService("CoreGui").ZoSelectGUI.Enabled = true
            end
        else
            if game:GetService("CoreGui"):FindFirstChild("ZoSelectGUI") then
                game:GetService("CoreGui").ZoSelectGUI.Enabled = false
            end
            
            -- Remove highlight if it exists
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("ZoTargetHighlight") then
                    player.Character.ZoTargetHighlight:Destroy()
                end
            end
        end
    end
})

-- By Name Tab
local ByNameTab = Window:MakeTab({
    Name = "By Name",
    Icon = "rbxassetid://18557173114",
    PremiumOnly = false
})

ByNameTab:AddTextbox({
    Name = "Name disable tool",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        if Value == "" then return end
        
        local player = findPlayerByName(Value)
        if player then
            disablePlayerTool(player)
        end
    end    
})

ByNameTab:AddTextbox({
    Name = "Loop disable tool",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        if Value == "" then return end
        
        local playersToDisable = processSpecialCommand(Value)
        
        for _, player in pairs(playersToDisable) do
            addToLoopDisabled(player)
        end
    end    
})

ByNameTab:AddTextbox({
    Name = "Unloop disable",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        if Value == "" then return end
        
        if Value:lower() == "all" then
            getgenv().Settings.LoopDisabledPlayers = {}
            updateLoopDisabledPlayersHeader()
            setupLoopDisable()
            return
        end
        
        local player = findPlayerByName(Value)
        if player then
            removeFromLoopDisabled(player)
        end
    end    
})

-- Header for currently loop disabled players
local LoopDisabledPlayersHeader = ByNameTab:AddLabel("Currently Loop Disabled:\nNone")

-- Player Protection Section
local ProtectionSection = ByNameTab:AddSection({
    Name = "Player Protection"
})

ByNameTab:AddTextbox({
    Name = "To Protect",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        if Value == "" then return end
        
        local playersToProtect = processSpecialCommand(Value)
        
        for _, player in pairs(playersToProtect) do
            addToProtected(player)
        end
    end    
})

ByNameTab:AddTextbox({
    Name = "Remove Protection",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        if Value == "" then return end
        
        if Value:lower() == "all" then
            for userId, player in pairs(getgenv().Settings.ProtectedPlayers) do
                if workspace:FindFirstChild("ZoProtectionAura_" .. userId) then
                    workspace["ZoProtectionAura_" .. userId]:Destroy()
                end
            end
            getgenv().Settings.ProtectedPlayers = {}
            updateProtectedPlayersHeader()
            setupProtectionSystem()
            return
        end
        
        local player = findPlayerByName(Value)
        if player then
            removeFromProtected(player)
        end
    end    
})

ByNameTab:AddSlider({
    Name = "Protection Radius (studs)",
    Min = 1,
    Max = 200,
    Default = getgenv().Settings.ProtectionRadius,
    Color = Color3.fromRGB(0, 255, 0),
    Increment = 1,
    Callback = function(Value)
        getgenv().Settings.ProtectionRadius = Value
        setupProtectionAuras()
    end    
})

ByNameTab:AddToggle({
    Name = "Aura Visualization for protected",
    Default = getgenv().Settings.ShowProtectionVisualization,
    Color = Color3.fromRGB(255, 255, 0),
    Callback = function(Value)
        getgenv().Settings.ShowProtectionVisualization = Value
        setupProtectionAuras()
    end
})

-- Header for currently protected players
local ProtectedPlayersHeader = ByNameTab:AddLabel("Currently Protected:\nNone")

-- Others Tab
local OthersTab = Window:MakeTab({
    Name = "Others",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

OthersTab:AddButton({
    Name = "New Chatspy",
    Callback = function()
        local ChatSpy = {
    Enabled = true
}

local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to display spy message in chat
local function displaySpyMessage(playerName, message, isPrivate)
    if not ChatSpy.Enabled then return end
    
    -- Format the spy message
    local spyText = string.format(
        "👁️ [ChatSpy] %s%s: %s",
        isPrivate and "🔒 " or "",
        playerName,
        message
    )
    
    -- Display in TextChatService
    local channel = TextChatService.TextChannels.RBXGeneral
    channel:DisplaySystemMessage(spyText)
end

-- Hook Chat Messages (Including Private Messages)
local function hookPlayer(player)
    player.Chatted:Connect(function(msg)
        if player == LocalPlayer then return end -- Don't spy on own messages
        
        -- Check for private messages
        local isPrivate = string.sub(msg, 1, 3) == "/w " or 
                         string.sub(msg, 1, 3) == "/pm " or
                         string.sub(msg, 1, 5) == "/tell " or
                         string.sub(msg, 1, 9) == "/whisper "
        
        displaySpyMessage(player.Name, msg, isPrivate)
    end)
end

-- Initialize
local function init()
    -- Hook existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            hookPlayer(player)
        end
    end
    
    -- Hook new players
    Players.PlayerAdded:Connect(function(player)
        if player ~= LocalPlayer then
            hookPlayer(player)
        end
    end)
    
    -- Show enabled message
    TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage("👁️ [ChatSpy] Chat spy has been enabled! Monitoring all messages...")
end

init()

return ChatSpy
    end
})

-- Initialize systems
local selectGUI = createSelectGUI()
setupAllWeaponsDisabler()
setupAuraDisabler()
setupAuraVisualization()
setupLoopDisable()
setupProtectionAuras()
setupProtectionSystem()

-- Set up player join/leave handlers
Players.PlayerAdded:Connect(function(player)
    -- Nothing special needed, our loops will handle this
end)

Players.PlayerRemoving:Connect(function(player)
    -- Remove from loop disabled if they leave
    if getgenv().Settings.LoopDisabledPlayers[player.UserId] then
        getgenv().Settings.LoopDisabledPlayers[player.UserId] = nil
        updateLoopDisabledPlayersHeader()
    end
end)

-- Handle LocalPlayer respawn
LocalPlayer.CharacterAdded:Connect(function(character)
    -- Restart visualization if needed
    if getgenv().Settings.ShowAuraVisualization then
        setupAuraVisualization()
    end
end)

-- Initial cleanup
if workspace:FindFirstChild("ZoAuraVisualization") then
    workspace.ZoAuraVisualization:Destroy()
end

-- Cleanup on script end
game:GetService("CoreGui").ChildRemoved:Connect(function(child)
    if child.Name == "Orion" then
        -- Clean up connections
        if getgenv().ToolDisabler then
            getgenv().ToolDisabler:Disconnect()
            getgenv().ToolDisabler = nil
        end
        
        if getgenv().AuraDisabler then
            getgenv().AuraDisabler:Disconnect()
            getgenv().AuraDisabler = nil
        end
        
        if getgenv().AuraVisualization then
            getgenv().AuraVisualization:Disconnect()
            getgenv().AuraVisualization = nil
        end
        
        if getgenv().TargetDetector then
            getgenv().TargetDetector:Disconnect()
            getgenv().TargetDetector = nil
        end
        
        if getgenv().LoopDisabler then
            getgenv().LoopDisabler:Disconnect()
            getgenv().LoopDisabler = nil
        end
        
        if getgenv().ProtectionVisualization then
            getgenv().ProtectionVisualization:Disconnect()
            getgenv().ProtectionVisualization = nil
        end
        
        if getgenv().ProtectionSystem then
            getgenv().ProtectionSystem:Disconnect()
            getgenv().ProtectionSystem = nil
        end
        
        -- Remove visualization
        if workspace:FindFirstChild("ZoAuraVisualization") then
            workspace.ZoAuraVisualization:Destroy()
        end
        
        -- Remove protection aura visualizations
        for _, existingAura in pairs(workspace:GetChildren()) do
            if existingAura.Name:match("^ZoProtectionAura_") then
                existingAura:Destroy()
            end
        end
        
        -- Remove select GUI
        if game:GetService("CoreGui"):FindFirstChild("ZoSelectGUI") then
            game:GetService("CoreGui").ZoSelectGUI:Destroy()
        end
    end
end)
end)

addcmd('zocontrolsset',{'zocontrols'},function(args, speaker)
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create the ScreenGUI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create the Frame (Draggable)
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 150, 0, 50) -- Compact size
frame.Position = UDim2.new(0.5, -75, 0.5, -25)
frame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
frame.BorderSizePixel = 2
frame.BorderColor3 = Color3.fromRGB(70, 130, 180)
frame.Active = true
frame.Draggable = true -- Makes the frame draggable
frame.Parent = screenGui

-- Create the Button
local button = Instance.new("TextButton")
button.Size = UDim2.new(1, -4, 1, -4) -- Slight padding inside the frame
button.Position = UDim2.new(0, 2, 0, 2)
button.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
button.Text = "Update Settings"
button.TextScaled = true
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Parent = frame

-- Button click event
button.MouseButton1Click:Connect(function()
    -- Define the settings to update
    local settings = {
        AllowFeinting = false,
        BlockNonFriendTrades = true,
        CameraShake = false,
        DisablePopupNotifications = true,
        HeadLooking = false,
        HealthBarLocation = 2,
        HighLightingDetail = true,
        ProgressBarState = 1,
        ToggleNewMobileControls = false,
        MobileButtonSetup = {
            ["Taunt"] = {["Size"] = 45, ["Position"] = {1, -458, 0, -232}},
            ["Emote"] = {["Size"] = 45, ["Position"] = {1, -522, 0, -224}},
            ["Run"] = {["Size"] = 80, ["Position"] = {1, -75, 0, -21}},
            ["Shiftlock"] = {["Size"] = 45, ["Position"] = {0.75, 0, 1, 0}},
            ["Hotbar"] = {["Size"] = 1, ["Origin"] = {0.5, 0, 1, -25}, ["Position"] = {0.5, 0, 1, -25}},
            ["Dash"] = {["Size"] = 80, ["Position"] = {1, -193, 0, -22}},
            ["Block"] = {["Size"] = 100, ["Position"] = {1, -113, 0, -122}},
            ["Kick"] = {["Size"] = 80, ["Position"] = {1, -76, 0, -22}},
            ["Feint"] = {["Size"] = 45, ["Position"] = {1, -197, 0, -169}}
        }
    }

    -- Access and update the settings
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats and leaderstats:FindFirstChild("Settings") then
        local playerSettings = leaderstats.Settings

        -- Apply each setting
        for key, value in pairs(settings) do
            local setting = playerSettings:FindFirstChild(key)
            if setting then
                if typeof(value) == "table" then
                    setting.Value = game.HttpService:JSONEncode(value)
                else
                    setting.Value = value
                end
            else
                warn(key .. " setting not found!")
            end
        end
        print("All settings updated successfully!")
    else
        warn("Settings or leaderstats not found!")
    end
end)
end)

addcmd('CamPlace script',{'multicam'},function(args, speaker)
-- Mobile Camera Placement System (Fixed, Cuter, Functional)
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local mouse = player:GetMouse()
local Camera = workspace.CurrentCamera
local UIS = game:GetService("UserInputService")

local cams = {}
local maxCameras = 10
local currentCamIndex = nil
local zoomStep = 5

local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "CameraSystemMobile"
screenGui.ResetOnSpawn = false

local function createButton(parent, text, size, pos, color)
	local btn = Instance.new("TextButton")
	btn.Size = size
	btn.Position = pos
	btn.Text = text
	btn.Parent = parent
	btn.BackgroundColor3 = color
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Font = Enum.Font.SourceSansBold
	btn.TextScaled = true
	btn.AutoButtonColor = true
	btn.BorderSizePixel = 0
	btn.BackgroundTransparency = 0.1
	return btn
end

-- Toggle Camera List
local tabletButton = createButton(screenGui, "Open Cameras", UDim2.new(0, 140, 0, 50), UDim2.new(0, 10, 1, -60), Color3.fromRGB(50,50,50))

local cameraList = Instance.new("Frame", screenGui)
cameraList.Size = UDim2.new(0, 240, 0, 350)
cameraList.Position = UDim2.new(0, 10, 1, -420)
cameraList.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
cameraList.Visible = false

local cameraListLayout = Instance.new("UIListLayout", cameraList)
cameraListLayout.SortOrder = Enum.SortOrder.LayoutOrder
cameraListLayout.Padding = UDim.new(0, 5)

local closeList = createButton(cameraList, "Close", UDim2.new(1, -10, 0, 30), UDim2.new(), Color3.fromRGB(100, 0, 0))
closeList.LayoutOrder = -1
closeList.MouseButton1Click:Connect(function()
	cameraList.Visible = false
end)

-- Control Frame
local controlFrame = Instance.new("Frame", screenGui)
controlFrame.Size = UDim2.new(0, 200, 0, 240)
controlFrame.Position = UDim2.new(1, -210, 1, -250)
controlFrame.BackgroundColor3 = Color3.fromRGB(30,30,30)
controlFrame.Visible = false

local held = {}

local function createControl(name, text, pos, onHold)
	local btn = createButton(controlFrame, text, UDim2.new(0, 60, 0, 60), pos, Color3.fromRGB(70, 70, 70))
	btn.Name = name
	btn.MouseButton1Down:Connect(function()
		held[name] = true
		while held[name] do
			onHold()
			task.wait(0.05)
		end
	end)
	btn.MouseButton1Up:Connect(function()
		held[name] = false
	end)
end

-- Fixed axis: Up = Tilt up (pitch -), Down = Tilt down (pitch +)
-- Right = Yaw +, Left = Yaw -
createControl("Up", "↑", UDim2.new(0.33, 0, 0, 0), function()
	if currentCamIndex and cams[currentCamIndex] then
		local cam = cams[currentCamIndex]
		cam.CFrame *= CFrame.Angles(-math.rad(2), 0, 0)
		Camera.CFrame = cam.CFrame + cam.CFrame.LookVector
	end
end)

createControl("Down", "↓", UDim2.new(0.33, 0, 1, -60), function()
	if currentCamIndex and cams[currentCamIndex] then
		local cam = cams[currentCamIndex]
		cam.CFrame *= CFrame.Angles(math.rad(2), 0, 0)
		Camera.CFrame = cam.CFrame + cam.CFrame.LookVector
	end
end)

createControl("Left", "←", UDim2.new(0, 0, 0.5, -30), function()
	if currentCamIndex and cams[currentCamIndex] then
		local cam = cams[currentCamIndex]
		cam.CFrame *= CFrame.Angles(0, -math.rad(2), 0)
		Camera.CFrame = cam.CFrame + cam.CFrame.LookVector
	end
end)

createControl("Right", "→", UDim2.new(1, -60, 0.5, -30), function()
	if currentCamIndex and cams[currentCamIndex] then
		local cam = cams[currentCamIndex]
		cam.CFrame *= CFrame.Angles(0, math.rad(2), 0)
		Camera.CFrame = cam.CFrame + cam.CFrame.LookVector
	end
end)

-- Zoom Buttons
createControl("ZoomIn", "+", UDim2.new(0.66, 0, 0, 0), function()
	if currentCamIndex and cams[currentCamIndex] then
		Camera.CFrame = Camera.CFrame + Camera.CFrame.LookVector * zoomStep
	end
end)

createControl("ZoomOut", "-", UDim2.new(0.66, 0, 1, -60), function()
	if currentCamIndex and cams[currentCamIndex] then
		Camera.CFrame = Camera.CFrame - Camera.CFrame.LookVector * zoomStep
	end
end)

-- Toggle camera list
tabletButton.MouseButton1Click:Connect(function()
	cameraList.Visible = not cameraList.Visible
end)

-- Camera placement tool
local placeTool = player.Backpack:FindFirstChild("PlaceCamera") or Instance.new("Tool")
placeTool.Name = "PlaceCamera"
placeTool.RequiresHandle = false
placeTool.Parent = player.Backpack

placeTool.Activated:Connect(function()
	if mouse.Target then
		if #cams >= maxCameras then
			cams[1]:Destroy()
			table.remove(cams, 1)
			cameraList:GetChildren()[2]:Destroy() -- skip the Close button
		end

		local part = Instance.new("Part", workspace)
		part.Size = Vector3.new(1.5, 1.5, 1.5)
		part.Anchored = true
		part.CanCollide = false
		part.BrickColor = BrickColor.new("Lime green")
		part.Material = Enum.Material.Neon
		part.Name = "CameraPart"
		part.CFrame = CFrame.new(mouse.Hit.Position)

		local index = #cams + 1
		cams[index] = part

		local frame = Instance.new("Frame", cameraList)
		frame.Size = UDim2.new(1, -10, 0, 30)
		frame.BackgroundTransparency = 1

		local btn = createButton(frame, "Camera " .. index, UDim2.new(0.8, 0, 1, 0), UDim2.new(0, 0, 0, 0), Color3.fromRGB(80, 80, 80))
		btn.MouseButton1Click:Connect(function()
			if cams[index] then
				currentCamIndex = index
				Camera.CameraType = Enum.CameraType.Scriptable
				Camera.CFrame = cams[index].CFrame + cams[index].CFrame.LookVector
				controlFrame.Visible = true
				cameraList.Visible = false
			end
		end)

		local del = createButton(frame, "X", UDim2.new(0.2, 0, 1, 0), UDim2.new(0.8, 0, 0, 0), Color3.fromRGB(120, 0, 0))
		del.MouseButton1Click:Connect(function()
			if cams[index] then
				cams[index]:Destroy()
				cams[index] = nil
				frame:Destroy()
				if currentCamIndex == index then
					Camera.CameraType = Enum.CameraType.Custom
					currentCamIndex = nil
					controlFrame.Visible = false
				end
			end
		end)
	end
end)

-- Reset Button
local resetButton = createButton(controlFrame, "Exit", UDim2.new(1, 0, 0, 30), UDim2.new(0, 0, 1, -30), Color3.fromRGB(120, 0, 0))
resetButton.MouseButton1Click:Connect(function()
	currentCamIndex = nil
	Camera.CameraType = Enum.CameraType.Custom
	controlFrame.Visible = false
end)
end)

addcmd('jerkoff',{'fap'},function(args, speaker)
local speaker = game.Players.LocalPlayer
if not speaker then return end


local tool = Instance.new("Tool")
tool.Name = "Whip it out 🤑🤑"
tool.ToolTip = "Will you take the risk..? the risk of exposing your tiny dick into the air."
tool.RequiresHandle = false
local toolClone = tool:Clone()
tool.Parent = speaker:WaitForChild("Backpack")

local jorkin = false
local track = nil
local nameGui = nil
local lastPosition = nil

-- Cập nhật humanoid khi nhân vật thay đổi
local humanoid = speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid")
local function updateHumanoid()
    if speaker.Character then
        humanoid = speaker.Character:WaitForChild("Humanoid")
    end
end
if not humanoid then updateHumanoid() end
if not humanoid then return end


local function stopTomfoolery()
    jorkin = false
    if track then
        track:Stop()
        track = nil
    end
    if nameGui then
        nameGui:Destroy()
        nameGui = nil
    end
    lastPosition = nil
end

local function isR15(character)
    return character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R15
end

local function playAnimation()
    if not jorkin then return end
    
    local isR15Model = isR15(speaker.Character)
    if not track then
        local anim = Instance.new("Animation")
        anim.AnimationId = isR15Model and "rbxassetid://698251653" or "rbxassetid://72042024"
        
        local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:FindFirstChildWhichIsA("AnimationController")
        if not animator then
            animator = Instance.new("Animator")
            animator.Parent = humanoid
        end
        
        track = animator:LoadAnimation(anim)
    end

    if track then
        track:Play()
        track:AdjustSpeed(isR15Model and 0.7 or 0.65)
        track.TimePosition = 0.6
        
        while track and track.IsPlaying and track.TimePosition < (isR15Model and 0.65 or 0.7) do
            task.wait(0.1)
        end
        
        track:Stop()
        track = nil
    end
end



-- Hiển thị tên tool với font
local function showToolName()
    if not speaker.Character then return end
    local head = speaker.Character:FindFirstChild("Head")
    if not head then return end

    nameGui = Instance.new("BillboardGui")
    nameGui.Parent = head
    nameGui.Size = UDim2.new(4, 0, 1, 0)
    nameGui.StudsOffset = Vector3.new(0, 3, 0)
    nameGui.AlwaysOnTop = true

    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = nameGui
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "Join https://discord.gg/efjfU87z."
    textLabel.TextColor3 = Color3.new(1, 2, 1)
    textLabel.TextScaled = true
    textLabel.Font = Enum.Font.GothamBlack
end

speaker.CharacterAdded:Connect(function(character)
    updateHumanoid()
    local backpack = speaker:WaitForChild("Backpack")
    task.wait(0.1)
    if not backpack:FindFirstChild("jerk off") then
        local newTool = toolClone:Clone()
        newTool.Parent = backpack
        newTool.Equipped:Connect(function()
            jorkin = true
            showToolName()
        end)
        newTool.Unequipped:Connect(stopTomfoolery)
        newTool.Activated:Connect(function()
            if jorkin then
                playAnimation()
            end
        end)
    end
end)

tool.Equipped:Connect(function()
    jorkin = true
    showToolName() 
end)

tool.Unequipped:Connect(stopTomfoolery)
humanoid.Died:Connect(stopTomfoolery)

tool.Activated:Connect(function()
    if jorkin then
        playAnimation()
    end
end)
end)

addcmd('audiologger',{'alogger'},function(args, speaker)
	notify("Loading",'Hold on a sec')
	loadstring(game:HttpGet(('https://raw.githubusercontent.com/infyiff/backup/main/audiologger.lua'),true))()
end)

local loopgoto = nil
addcmd('loopgoto',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		loopgoto = nil
		if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
			speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
			wait(.1)
		end
		loopgoto = Players[v]
		local distance = 3
		if args[2] and isNumber(args[2]) then
			distance = args[2]
		end
		local lDelay = 0
		if args[3] and isNumber(args[3]) then
			lDelay = args[3]
		end
		repeat
			if Players:FindFirstChild(v) then
				if Players[v].Character ~= nil then
					getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(distance,1,0)
				end
				wait(lDelay)
			else
				loopgoto = nil
			end
		until loopgoto ~= Players[v]
	end
end)

addcmd('unloopgoto',{'noloopgoto'},function(args, speaker)
	loopgoto = nil
end)

addcmd('headsit',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	if headSit then headSit:Disconnect() end
	for i,v in pairs(players)do
		speaker.Character:FindFirstChildOfClass('Humanoid').Sit = true
		headSit = RunService.Heartbeat:Connect(function()
			if Players:FindFirstChild(Players[v].Name) and Players[v].Character ~= nil and getRoot(Players[v].Character) and getRoot(speaker.Character) and speaker.Character:FindFirstChildOfClass('Humanoid').Sit == true then
				getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame * CFrame.Angles(0,math.rad(0),0)* CFrame.new(0,1.6,0.4)
			else
				headSit:Disconnect()
			end
		end)
	end
end)

addcmd('chat',{'say'},function(args, speaker)
	local cString = getstring(1)
	chatMessage(cString)
end)


spamming = false
spamspeed = 1
addcmd('spam',{},function(args, speaker)
	spamming = true
	local spamstring = getstring(1)
	repeat wait(spamspeed)
		chatMessage(spamstring)
	until spamming == false
end)

addcmd('nospam',{'unspam'},function(args, speaker)
	spamming = false
end)

addcmd('whisper',{'pm'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			local plrName = Players[v].Name
			local pmstring = getstring(2)
			chatMessage("/w "..plrName.." "..pmstring)
		end)
	end
end)

pmspamming = {}
addcmd('pmspam',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			local plrName = Players[v].Name
			if FindInTable(pmspamming, plrName) then return end
			table.insert(pmspamming, plrName)
			local pmspamstring = getstring(2)
			repeat
				if Players:FindFirstChild(v) then
					wait(spamspeed)
					chatMessage("/w "..plrName.." "..pmspamstring)
				else
					for a,b in pairs(pmspamming) do if b == plrName then table.remove(pmspamming, a) end end
				end
			until not FindInTable(pmspamming, plrName)
		end)
	end
end)

addcmd('nopmspam',{'unpmspam'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			for a,b in pairs(pmspamming) do
				if b == Players[v].Name then
					table.remove(pmspamming, a)
				end
			end
		end)
	end
end)

addcmd('spamspeed',{},function(args, speaker)
	local speed = args[1] or 1
	if isNumber(speed) then
		spamspeed = speed
	end
end)

addcmd('bubblechat',{},function(args, speaker)
	if isLegacyChat then
		ChatService.BubbleChatEnabled = true
	else
		TextChatService.BubbleChatConfiguration.Enabled = true
	end
end)

addcmd('unbubblechat',{'nobubblechat'},function(args, speaker)
	if isLegacyChat then
		ChatService.BubbleChatEnabled = false
	else
		TextChatService.BubbleChatConfiguration.Enabled = false
	end
end)

addcmd('blockhead',{},function(args, speaker)
	speaker.Character.Head:FindFirstChildOfClass("SpecialMesh"):Destroy()
end)

addcmd('blockhats',{},function(args, speaker)
	for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
		for i,c in pairs(v:GetDescendants()) do
			if c:IsA("SpecialMesh") then
				c:Destroy()
			end
		end
	end
end)

addcmd('blocktool',{},function(args, speaker)
	for _,v in pairs(speaker.Character:GetChildren()) do
		if v:IsA("Tool") or v:IsA("HopperBin") then
			for i,c in pairs(v:GetDescendants()) do
				if c:IsA("SpecialMesh") then
					c:Destroy()
				end
			end
		end
	end
end)

addcmd('creeper',{},function(args, speaker)
	if r15(speaker) then
		speaker.Character.Head:FindFirstChildOfClass("SpecialMesh"):Destroy()
		speaker.Character.LeftUpperArm:Destroy()
		speaker.Character.RightUpperArm:Destroy()
		speaker.Character:FindFirstChildOfClass("Humanoid"):RemoveAccessories()
	else
		speaker.Character.Head:FindFirstChildOfClass("SpecialMesh"):Destroy()
		speaker.Character["Left Arm"]:Destroy()
		speaker.Character["Right Arm"]:Destroy()
		speaker.Character:FindFirstChildOfClass("Humanoid"):RemoveAccessories()
	end
end)

function getTorso(x)
	x = x or Players.LocalPlayer.Character
	return x:FindFirstChild("Torso") or x:FindFirstChild("UpperTorso") or x:FindFirstChild("LowerTorso") or x:FindFirstChild("HumanoidRootPart")
end

addcmd("bang", {"rape"}, function(args, speaker)
	execCmd("unbang")
	wait()
	local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
	bangAnim = Instance.new("Animation")
	bangAnim.AnimationId = not r15(speaker) and "rbxassetid://148840371" or "rbxassetid://5918726674"
	bang = humanoid:LoadAnimation(bangAnim)
	bang:Play(0.1, 1, 1)
	bang:AdjustSpeed(args[2] or 3)
	bangDied = humanoid.Died:Connect(function()
		bang:Stop()
		bangAnim:Destroy()
		bangDied:Disconnect()
		bangLoop:Disconnect()
	end)
	if args[1] then
		local players = getPlayer(args[1], speaker)
		for _, v in pairs(players) do
			local bangplr = Players[v].Name
			local bangOffet = CFrame.new(0, 0, 1.1)
			bangLoop = RunService.Stepped:Connect(function()
				pcall(function()
					local otherRoot = getTorso(Players[bangplr].Character)
					getRoot(speaker.Character).CFrame = otherRoot.CFrame * bangOffet
				end)
			end)
		end
	end
end)

addcmd("unbang", {"unrape"}, function(args, speaker)
	if bangDied then
		bangDied:Disconnect()
		bang:Stop()
		bangAnim:Destroy()
		bangLoop:Disconnect()
	end
end)

addcmd('carpet',{},function(args, speaker)
	if not r15(speaker) then
		execCmd('uncarpet')
		wait()
		local players = getPlayer(args[1], speaker)
		for i,v in pairs(players)do
			carpetAnim = Instance.new("Animation")
			carpetAnim.AnimationId = "rbxassetid://282574440"
			carpet = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(carpetAnim)
			carpet:Play(.1, 1, 1)
			local carpetplr = Players[v].Name
			carpetDied = speaker.Character:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
				carpetLoop:Disconnect()
				carpet:Stop()
				carpetAnim:Destroy()
				carpetDied:Disconnect()
			end)
			carpetLoop = RunService.Heartbeat:Connect(function()
				pcall(function()
					getRoot(Players.LocalPlayer.Character).CFrame = getRoot(Players[carpetplr].Character).CFrame
				end)
			end)
		end
	else
		notify('R6 Required','This command requires the r6 rig type')
	end
end)

addcmd('uncarpet',{'nocarpet'},function(args, speaker)
	if carpetLoop then
		carpetLoop:Disconnect()
		carpetDied:Disconnect()
		carpet:Stop()
		carpetAnim:Destroy()
	end
end)

addcmd('friend',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		speaker:RequestFriendship(Players[v])
	end
end)

addcmd('unfriend',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		speaker:RevokeFriendship(Players[v])
	end
end)

addcmd('bringpart',{},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA("BasePart") then
			v.CFrame = getRoot(speaker.Character).CFrame
		end
	end
end)

addcmd('bringpartclass',{'bpc'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() and v:IsA("BasePart") then
			v.CFrame = getRoot(speaker.Character).CFrame
		end
	end
end)

gotopartDelay = 0.1
addcmd('gotopart',{'topart'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA("BasePart") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			getRoot(speaker.Character).CFrame = v.CFrame
		end
	end
end)

addcmd('tweengotopart',{'tgotopart','ttopart'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA("BasePart") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v.CFrame}):Play()
		end
	end
end)

addcmd('gotopartclass',{'gpc'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() and v:IsA("BasePart") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			getRoot(speaker.Character).CFrame = v.CFrame
		end
	end
end)

addcmd('tweengotopartclass',{'tgpc'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.ClassName:lower() == getstring(1):lower() and v:IsA("BasePart") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v.CFrame}):Play()
		end
	end
end)

addcmd('gotomodel',{'tomodel'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA("Model") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			getRoot(speaker.Character).CFrame = v:GetModelCFrame()
		end
	end
end)

addcmd('tweengotomodel',{'tgotomodel','ttomodel'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v.Name:lower() == getstring(1):lower() and v:IsA("Model") then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			wait(gotopartDelay)
			TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v:GetModelCFrame()}):Play()
		end
	end
end)

addcmd('gotopartdelay',{},function(args, speaker)
	local gtpDelay = args[1] or 0.1
	if isNumber(gtpDelay) then
		gotopartDelay = gtpDelay
	end
end)

addcmd('noclickdetectorlimits',{'nocdlimits','removecdlimits'},function(args, speaker)
	for i,v in ipairs(workspace:GetDescendants()) do
		if v:IsA("ClickDetector") then
			v.MaxActivationDistance = math.huge
		end
	end
end)

addcmd('fireclickdetectors',{'firecd','firecds'}, function(args, speaker)
	if fireclickdetector then
		if args[1] then
			local name = getstring(1)
			for _, descendant in ipairs(workspace:GetDescendants()) do
				if descendant:IsA("ClickDetector") and descendant.Name == name or descendant.Parent.Name == name then
					fireclickdetector(descendant)
				end
			end
		else
			for _, descendant in ipairs(workspace:GetDescendants()) do
				if descendant:IsA("ClickDetector") then
					fireclickdetector(descendant)
				end
			end
		end
	else
		notify("Incompatible Exploit", "Your exploit does not support this command (missing fireclickdetector)")
	end
end)

addcmd('noproximitypromptlimits',{'nopplimits','removepplimits'},function(args, speaker)
	for i,v in pairs(workspace:GetDescendants()) do
		if v:IsA("ProximityPrompt") then
			v.MaxActivationDistance = math.huge
		end
	end
end)

addcmd('fireproximityprompts',{'firepp'},function(args, speaker)
	if fireproximityprompt then
		if args[1] then
			local name = getstring(1)
			for _, descendant in ipairs(workspace:GetDescendants()) do
				if descendant:IsA("ProximityPrompt") and descendant.Name == name or descendant.Parent.Name == name then
					fireproximityprompt(descendant)
				end
			end
		else
			for _, descendant in ipairs(workspace:GetDescendants()) do
				if descendant:IsA("ProximityPrompt") then
					fireproximityprompt(descendant)
				end
			end
		end
	else
		notify("Incompatible Exploit", "Your exploit does not support this command (missing fireproximityprompt)")
	end
end)

local PromptButtonHoldBegan = nil
addcmd('instantproximityprompts',{'instantpp'},function(args, speaker)
	if fireproximityprompt then
		execCmd("uninstantproximityprompts")
		wait(0.1)
		PromptButtonHoldBegan = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
			fireproximityprompt(prompt)
		end)
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing fireproximityprompt)')
	end
end)

addcmd('uninstantproximityprompts',{'uninstantpp'},function(args, speaker)
	if PromptButtonHoldBegan ~= nil then
		PromptButtonHoldBegan:Disconnect()
		PromptButtonHoldBegan = nil
	end
end)

addcmd('notifyping',{'ping'},function(args, speaker)
	notify("Ping", math.round(speaker:GetNetworkPing() * 1000) .. "ms")
end)

addcmd('grabtools', {}, function(args, speaker)
	local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
	for _, child in ipairs(workspace:GetChildren()) do
		if speaker.Character and child:IsA("BackpackItem") and child:FindFirstChild("Handle") then
			humanoid:EquipTool(child)
		end
	end

	if grabtoolsFunc then 
		grabtoolsFunc:Disconnect() 
	end

	grabtoolsFunc = workspace.ChildAdded:Connect(function(child)
		if speaker.Character and child:IsA("BackpackItem") and child:FindFirstChild("Handle") then
			humanoid:EquipTool(child)
		end
	end)

	notify("Grabtools", "Picking up any dropped tools")
end)

addcmd('nograbtools',{'ungrabtools'},function(args, speaker)
	if grabtoolsFunc then 
		grabtoolsFunc:Disconnect() 
	end

	notify("Grabtools", "Grabtools has been disabled")
end)

local specifictoolremoval = {}
addcmd('removespecifictool',{},function(args, speaker)
	if args[1] and speaker:FindFirstChildOfClass("Backpack") then
		local tool = string.lower(getstring(1))
		local RST = RunService.RenderStepped:Connect(function()
			if speaker:FindFirstChildOfClass("Backpack") then
				for i,v in pairs(speaker:FindFirstChildOfClass("Backpack"):GetChildren()) do
					if v.Name:lower() == tool then
						v:Remove()
					end
				end
			end
		end)
		specifictoolremoval[tool] = RST
	end
end)

addcmd('unremovespecifictool',{},function(args, speaker)
	if args[1] then
		local tool = string.lower(getstring(1))
		if specifictoolremoval[tool] ~= nil then
			specifictoolremoval[tool]:Disconnect()
			specifictoolremoval[tool] = nil
		end
	end
end)

addcmd('clearremovespecifictool',{},function(args, speaker)
	for obj in pairs(specifictoolremoval) do
		specifictoolremoval[obj]:Disconnect()
		specifictoolremoval[obj] = nil
	end
end)

addcmd('light',{},function(args, speaker)
	local light = Instance.new("PointLight")
	light.Parent = getRoot(speaker.Character)
	light.Range = 30
	if args[1] then
		light.Brightness = args[2]
		light.Range = args[1]
	else
		light.Brightness = 5
	end
end)

addcmd('unlight',{'nolight'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v.ClassName == "PointLight" then
			v:Destroy()
		end
	end
end)

addcmd('copytools',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players)do
		task.spawn(function()
			for i,v in pairs(Players[v]:FindFirstChildOfClass("Backpack"):GetChildren()) do
				if v:IsA('Tool') or v:IsA('HopperBin') then
					v:Clone().Parent = speaker:FindFirstChildOfClass("Backpack")
				end
			end
		end)
	end
end)

addcmd('naked',{},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA("Clothing") or v:IsA("ShirtGraphic") then
			v:Destroy()
		end
	end
end)

addcmd('noface',{'removeface'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA("Decal") and v.Name == 'face' then
			v:Destroy()
		end
	end
end)

addcmd('spawnpoint',{'spawn'},function(args, speaker)
	spawnpos = getRoot(speaker.Character).CFrame
	spawnpoint = true
	spDelay = tonumber(args[1]) or 0.1
	notify('Spawn Point','Spawn point created at '..tostring(spawnpos))
end)

addcmd('nospawnpoint',{'nospawn','removespawnpoint'},function(args, speaker)
	spawnpoint = false
	notify('Spawn Point','Removed spawn point')
end)

addcmd('flashback',{'diedtp'},function(args, speaker)
	if lastDeath ~= nil then
		if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
			speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
			wait(.1)
		end
		getRoot(speaker.Character).CFrame = lastDeath
	end
end)

addcmd('hatspin',{'spinhats'},function(args, speaker)
	execCmd('unhatspin')
	wait(.5)
	for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
		local keep = Instance.new("BodyPosition") keep.Name = randomString() keep.Parent = v.Handle
		local spin = Instance.new("BodyAngularVelocity") spin.Name = randomString() spin.Parent = v.Handle
		v.Handle:FindFirstChildOfClass("Weld"):Destroy()
		if args[1] then
			spin.AngularVelocity = Vector3.new(0, args[1], 0)
			spin.MaxTorque = Vector3.new(0, args[1] * 2, 0)
		else
			spin.AngularVelocity = Vector3.new(0, 100, 0)
			spin.MaxTorque = Vector3.new(0, 200, 0)
		end
		keep.P = 30000
		keep.D = 50
		spinhats = RunService.Stepped:Connect(function()
			pcall(function()
				keep.Position = Players.LocalPlayer.Character.Head.Position
			end)
		end)
	end
end)

addcmd('unhatspin',{'unspinhats'},function(args, speaker)
	if spinhats then
		spinhats:Disconnect()
	end
	for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
		v.Parent = workspace
		for i,c in pairs(v.Handle) do
			if c:IsA("BodyPosition") or c:IsA("BodyAngularVelocity") then
				c:Destroy()
			end
		end
		wait()
		v.Parent = speaker.Character
	end
end)

addcmd('clearhats',{'cleanhats'},function(args, speaker)
	if firetouchinterest then
		local Player = Players.LocalPlayer
		local Character = Player.Character
		local Old = Character:FindFirstChild("HumanoidRootPart").CFrame
		local Hats = {}

		for _, child in ipairs(workspace:GetChildren()) do
			if child:IsA("Accessory") then
				table.insert(Hats, child)
			end
		end

		for _, accessory in ipairs(Character:FindFirstChildOfClass("Humanoid"):GetAccessories()) do
			accessory:Destroy()
		end

		for i = 1, #Hats do
			repeat RunService.Heartbeat:wait() until Hats[i]
			firetouchinterest(Hats[i].Handle,Character:FindFirstChild("HumanoidRootPart"),0)
			repeat RunService.Heartbeat:wait() until Character:FindFirstChildOfClass("Accessory")
			Character:FindFirstChildOfClass("Accessory"):Destroy()
			repeat RunService.Heartbeat:wait() until not Character:FindFirstChildOfClass("Accessory")
		end

		execCmd("reset")

		Player.CharacterAdded:Wait()

		for i = 1,20 do 
			RunService.Heartbeat:Wait()
			if Player.Character:FindFirstChild("HumanoidRootPart") then
				Player.Character:FindFirstChild("HumanoidRootPart").CFrame = Old
			end
		end
	else
		notify("Incompatible Exploit","Your exploit does not support this command (missing firetouchinterest)")
	end
end)

addcmd('split',{},function(args, speaker)
	if r15(speaker) then
		speaker.Character.UpperTorso.Waist:Destroy()
	else
		notify('R15 Required','This command requires the r15 rig type')
	end
end)

addcmd('nilchar',{},function(args, speaker)
	if speaker.Character ~= nil then
		speaker.Character.Parent = nil
	end
end)

addcmd('unnilchar',{'nonilchar'},function(args, speaker)
	if speaker.Character ~= nil then
		speaker.Character.Parent = workspace
	end
end)

addcmd('noroot',{'removeroot','rroot'},function(args, speaker)
	if speaker.Character ~= nil then
		local char = Players.LocalPlayer.Character
		char.Parent = nil
		char.HumanoidRootPart:Destroy()
		char.Parent = workspace
	end
end)

addcmd('replaceroot',{'replacerootpart'},function(args, speaker)
	if speaker.Character ~= nil and speaker.Character:FindFirstChild("HumanoidRootPart") then
		local Char = speaker.Character
		local OldParent = Char.Parent
		local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
		local OldPos = HRP.CFrame
		Char.Parent = game
		local HRP1 = HRP:Clone()
		HRP1.Parent = Char
		HRP = HRP:Destroy()
		HRP1.CFrame = OldPos
		Char.Parent = OldParent
	end
end)

addcmd('clearcharappearance',{'clearchar','clrchar'},function(args, speaker)
	speaker:ClearCharacterAppearance()
end)

addcmd('equiptools',{},function(args, speaker)
	for i,v in pairs(speaker:FindFirstChildOfClass("Backpack"):GetChildren()) do
		if v:IsA("Tool") or v:IsA("HopperBin") then
			v.Parent = speaker.Character
		end
	end
end)

addcmd('unequiptools',{},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
end)

local function GetHandleTools(p)
	p = p or Players.LocalPlayer
	local r = {}
	for _, v in ipairs(p.Character and p.Character:GetChildren() or {}) do
		if v.IsA(v, "BackpackItem") and v.FindFirstChild(v, "Handle") then
			r[#r + 1] = v
		end
	end
	for _, v in ipairs(p.Backpack:GetChildren()) do
		if v.IsA(v, "BackpackItem") and v.FindFirstChild(v, "Handle") then
			r[#r + 1] = v
		end
	end
	return r
end
addcmd('dupetools', {'clonetools'}, function(args, speaker)
	local LOOP_NUM = tonumber(args[1]) or 1
	local OrigPos = speaker.Character.HumanoidRootPart.Position
	local Tools, TempPos = {}, Vector3.new(math.random(-2e5, 2e5), 2e5, math.random(-2e5, 2e5))
	for i = 1, LOOP_NUM do
		local Human = speaker.Character:WaitForChild("Humanoid")
		wait(.1, Human.Parent:MoveTo(TempPos))
		Human.RootPart.Anchored = speaker:ClearCharacterAppearance(wait(.1)) or true
		local t = GetHandleTools(speaker)
		while #t > 0 do
			for _, v in ipairs(t) do
				task.spawn(function()
					for _ = 1, 25 do
						v.Parent = speaker.Character
						v.Handle.Anchored = true
					end
					for _ = 1, 5 do
						v.Parent = workspace
					end
					table.insert(Tools, v.Handle)
				end)
			end
			t = GetHandleTools(speaker)
		end
		wait(.1)
		speaker.Character = speaker.Character:Destroy()
		speaker.CharacterAdded:Wait():WaitForChild("Humanoid").Parent:MoveTo(LOOP_NUM == i and OrigPos or TempPos, wait(.1))
		if i == LOOP_NUM or i % 5 == 0 then
			local HRP = speaker.Character.HumanoidRootPart
			if type(firetouchinterest) == "function" then
				for _, v in ipairs(Tools) do
					v.Anchored = not firetouchinterest(v, HRP, 1, firetouchinterest(v, HRP, 0)) and false or false
				end
			else
				for _, v in ipairs(Tools) do
					task.spawn(function()
						local x = v.CanCollide
						v.CanCollide = false
						v.Anchored = false
						for _ = 1, 10 do
							v.CFrame = HRP.CFrame
							wait()
						end
						v.CanCollide = x
					end)
				end
			end
			wait(.1)
			Tools = {}
		end
		TempPos = TempPos + Vector3.new(10, math.random(-5, 5), 0)
	end
end)

local RS = RunService.RenderStepped
addcmd('givetool', {'givetools'}, function(args, speaker)
	local v = Players[getPlayer(args[1], speaker)[1]].Character
	workspace.CurrentCamera.CameraSubject = v
	local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
	local hum = Char and Char:FindFirstChildWhichIsA('Humanoid')
	local hrp = hum and hum.RootPart
	local hrppos = hrp.CFrame
	hum = hum:Destroy() or hum:Clone()
	hum.Parent = Char
	hum:ClearAllChildren()
	speaker:ClearCharacterAppearance()
	task.spawn(function()
		speaker.CharacterAdded:Wait():WaitForChild('Humanoid').RootPart.CFrame = wait() and hrppos
	end)
	local vHRP = getRoot(v)
	while Char and Char.Parent and vHRP and vHRP.Parent do
		local Tools = false
		for _, v in ipairs(Char:GetChildren()) do
			if v:IsA('BackpackItem') and v:FindFirstChild('Handle') then
				Tools = true
				firetouchinterest(v.Handle, vHRP, 0)
				firetouchinterest(v.Handle, vHRP, 1)
			end
		end
		if not Tools then
			break
		end
		hrp.CFrame = vHRP.CFrame
		RS:Wait()
	end
	execCmd('re')
end)

addcmd('touchinterests', {'touchinterest', 'firetouchinterests', 'firetouchinterest'}, function(args, speaker)
	if not firetouchinterest then
		notify("Incompatible Exploit", "Your exploit does not support this command (missing firetouchinterest)")
		return
	end

	local root = getRoot(speaker.Character) or speaker.Character:FindFirstChildWhichIsA("BasePart")

	local function touch(x)
		x = x:FindFirstAncestorWhichIsA("Part")
		if x then
			if firetouchinterest then
				task.spawn(function()
					firetouchinterest(x, root, 1)
					wait()
					firetouchinterest(x, root, 0)
				end)
			end
			x.CFrame = root.CFrame
		end
	end

	if args[1] then
		local name = getstring(1)
		for _, descendant in ipairs(workspace:GetDescendants()) do
			if descendant:IsA("TouchTransmitter") and descendant.Name == name or descendant.Parent.Name == name then
				touch(descendant)
			end
		end
	else
		for _, descendant in ipairs(workspace:GetDescendants()) do
			if descendant:IsA("TouchTransmitter") then
				touch(descendant)
			end
		end
	end
end)

addcmd('fullbright',{'fb','fullbrightness'},function(args, speaker)
	Lighting.Brightness = 2
	Lighting.ClockTime = 14
	Lighting.FogEnd = 100000
	Lighting.GlobalShadows = false
	Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
end)

addcmd('loopfullbright',{'loopfb'},function(args, speaker)
	if brightLoop then
		brightLoop:Disconnect()
	end
	local function brightFunc()
		Lighting.Brightness = 2
		Lighting.ClockTime = 14
		Lighting.FogEnd = 100000
		Lighting.GlobalShadows = false
		Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
	end

	brightLoop = RunService.RenderStepped:Connect(brightFunc)
end)

addcmd('unloopfullbright',{'unloopfb'},function(args, speaker)
	if brightLoop then
		brightLoop:Disconnect()
	end
end)

addcmd('ambient',{},function(args, speaker)
	Lighting.Ambient = Color3.new(args[1],args[2],args[3])
	Lighting.OutdoorAmbient = Color3.new(args[1],args[2],args[3])
end)

addcmd('day',{},function(args, speaker)
	Lighting.ClockTime = 14
end)

addcmd('night',{},function(args, speaker)
	Lighting.ClockTime = 0
end)

addcmd('nofog',{},function(args, speaker)
	Lighting.FogEnd = 100000
	for i,v in pairs(Lighting:GetDescendants()) do
		if v:IsA("Atmosphere") then
			v:Destroy()
		end
	end
end)

addcmd('brightness',{},function(args, speaker)
	Lighting.Brightness = args[1]
end)

addcmd('globalshadows',{'gshadows'},function(args, speaker)
	Lighting.GlobalShadows = true
end)

addcmd('unglobalshadows',{'nogshadows','ungshadows','noglobalshadows'},function(args, speaker)
	Lighting.GlobalShadows = false
end)

origsettings = {abt = Lighting.Ambient, oabt = Lighting.OutdoorAmbient, brt = Lighting.Brightness, time = Lighting.ClockTime, fe = Lighting.FogEnd, fs = Lighting.FogStart, gs = Lighting.GlobalShadows}

addcmd('restorelighting',{'rlighting'},function(args, speaker)
	Lighting.Ambient = origsettings.abt
	Lighting.OutdoorAmbient = origsettings.oabt
	Lighting.Brightness = origsettings.brt
	Lighting.ClockTime = origsettings.time
	Lighting.FogEnd = origsettings.fe
	Lighting.FogStart = origsettings.fs
	Lighting.GlobalShadows = origsettings.gs
end)

addcmd('stun',{'platformstand'},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
end)

addcmd('unstun',{'nostun','unplatformstand','noplatformstand'},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
end)

addcmd('norotate',{'noautorotate'},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid').AutoRotate  = false
end)

addcmd('unnorotate',{'autorotate'},function(args, speaker)
	speaker.Character:FindFirstChildOfClass('Humanoid').AutoRotate  = true
end)

addcmd('enablestate',{},function(args, speaker)
	local x = args[1]
	if not tonumber(x) then
		local x = Enum.HumanoidStateType[args[1]]
	end
	speaker.Character:FindFirstChildOfClass("Humanoid"):SetStateEnabled(x, true)
end)

addcmd('disablestate',{},function(args, speaker)
	local x = args[1]
	if not tonumber(x) then
		local x = Enum.HumanoidStateType[args[1]]
	end
	speaker.Character:FindFirstChildOfClass("Humanoid"):SetStateEnabled(x, false)
end)

addcmd('drophats',{'drophat'},function(args, speaker)
	if speaker.Character then
		for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
			v.Parent = workspace
		end
	end
end)

addcmd('deletehats',{'nohats','rhats'},function(args, speaker)
	for i,v in next, speaker.Character:GetDescendants() do
		if v:IsA("Accessory") then
			for i,p in next, v:GetDescendants() do
				if p:IsA("Weld") then
					p:Destroy()
				end
			end
		end
	end
end)

addcmd('droptools',{'droptool'},function(args, speaker)
	for i,v in pairs(Players.LocalPlayer.Backpack:GetChildren()) do
		if v:IsA("Tool") then
			v.Parent = Players.LocalPlayer.Character
		end
	end
	wait()
	for i,v in pairs(Players.LocalPlayer.Character:GetChildren()) do
		if v:IsA("Tool") then
			v.Parent = workspace
		end
	end
end)

addcmd('droppabletools',{},function(args, speaker)
	if speaker.Character then
		for _,obj in pairs(speaker.Character:GetChildren()) do
			if obj:IsA("Tool") then
				obj.CanBeDropped = true
			end
		end
	end
	if speaker:FindFirstChildOfClass("Backpack") then
		for _,obj in pairs(speaker:FindFirstChildOfClass("Backpack"):GetChildren()) do
			if obj:IsA("Tool") then
				obj.CanBeDropped = true
			end
		end
	end
end)

local currentToolSize = ""
local currentGripPos = ""
addcmd('reach',{},function(args, speaker)
	execCmd('unreach')
	wait()
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA("Tool") then
			if args[1] then
				currentToolSize = v.Handle.Size
				currentGripPos = v.GripPos
				local a = Instance.new("SelectionBox")
				a.Name = "SelectionBoxCreated"
				a.Parent = v.Handle
				a.Adornee = v.Handle
				v.Handle.Massless = true
				v.Handle.Size = Vector3.new(0.5,0.5,args[1])
				v.GripPos = Vector3.new(0,0,0)
				speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
			else
				currentToolSize = v.Handle.Size
				currentGripPos = v.GripPos
				local a = Instance.new("SelectionBox")
				a.Name = "SelectionBoxCreated"
				a.Parent = v.Handle
				a.Adornee = v.Handle
				v.Handle.Massless = true
				v.Handle.Size = Vector3.new(0.5,0.5,60)
				v.GripPos = Vector3.new(0,0,0)
				speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
			end
		end
	end
end)

addcmd("boxreach", {}, function(args, speaker)
    execCmd("unreach")
    wait()
    for i, v in pairs(speaker.Character:GetDescendants()) do
        if v:IsA("Tool") then
            local size = tonumber(args[1]) or 60
            currentToolSize = v.Handle.Size
            currentGripPos = v.GripPos
            local a = Instance.new("SelectionBox")
            a.Name = "SelectionBoxCreated"
            a.Parent = v.Handle
            a.Adornee = v.Handle
            v.Handle.Massless = true
            v.Handle.Size = Vector3.new(size, size, size)
            v.GripPos = Vector3.new(0, 0, 0)
            speaker.Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
        end
    end
end)

addcmd('unreach',{'noreach','unboxreach'},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA("Tool") then
			v.Handle.Size = currentToolSize
			v.GripPos = currentGripPos
			v.Handle.SelectionBoxCreated:Destroy()
		end
	end
end)

addcmd('grippos',{},function(args, speaker)
	for i,v in pairs(speaker.Character:GetDescendants()) do
		if v:IsA("Tool") then
			v.Parent = speaker:FindFirstChildOfClass("Backpack")
			v.GripPos = Vector3.new(args[1],args[2],args[3])
			v.Parent = speaker.Character
		end
	end
end)

addcmd('usetools', {}, function(args, speaker)
	local Backpack = speaker:FindFirstChildOfClass("Backpack")
	local amount = tonumber(args[1]) or 1
	local delay_ = tonumber(args[2]) or false
	for _, v in ipairs(Backpack:GetChildren()) do
		v.Parent = speaker.Character
		task.spawn(function()
			for _ = 1, amount do
				v:Activate()
				if delay_ then
					wait(delay_)
				end
			end
			v.Parent = Backpack
		end)
	end
end)

addcmd('logs',{},function(args, speaker)
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), "InOut", "Quart", 0.3, true, nil)
end)

addcmd('chatlogs',{'clogs'},function(args, speaker)
	join.Visible = false
	chat.Visible = true
	table.remove(shade3,table.find(shade3,selectChat))
	table.remove(shade2,table.find(shade2,selectJoin))
	table.insert(shade2,selectChat)
	table.insert(shade3,selectJoin)
	selectJoin.BackgroundColor3 = currentShade3
	selectChat.BackgroundColor3 = currentShade2
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), "InOut", "Quart", 0.3, true, nil)
end)

addcmd('joinlogs',{'jlogs'},function(args, speaker)
	chat.Visible = false
	join.Visible = true	
	table.remove(shade3,table.find(shade3,selectJoin))
	table.remove(shade2,table.find(shade2,selectChat))
	table.insert(shade2,selectJoin)
	table.insert(shade3,selectChat)
	selectChat.BackgroundColor3 = currentShade3
	selectJoin.BackgroundColor3 = currentShade2
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), "InOut", "Quart", 0.3, true, nil)
end)

addcmd("chatlogswebhook", {"logswebhook"}, function(args, speaker)
    if httprequest then
        logsWebhook = args[1] or nil
        updatesaves()
    else
        notify("Incompatible Exploit", "Your exploit does not support this command (missing request)")
    end
end)

addcmd("antichatlogs", {"antichatlogger"}, function(args, speaker)
    if not isLegacyChat then
        return notify("antichatlogs", "Game needs the legacy chat")
    end
    local MessagePosted, _ = pcall(function()
        rawset(require(speaker:FindFirstChild("PlayerScripts"):FindFirstChild("ChatScript").ChatMain), "MessagePosted", {
            ["fire"] = function(msg)
                return msg
            end,
            ["wait"] = function()
                return
            end,
            ["connect"] = function()
                return
            end
        })
    end)
    notify("antichatlogs", MessagePosted and "Enabled" or "Failed to enable antichatlogs")
end)

flinging = false
addcmd('fling',{},function(args, speaker)
	flinging = false
	for _, child in pairs(speaker.Character:GetDescendants()) do
		if child:IsA("BasePart") then
			child.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
		end
	end
	execCmd('noclip')
	wait(.1)
	local bambam = Instance.new("BodyAngularVelocity")
	bambam.Name = randomString()
	bambam.Parent = getRoot(speaker.Character)
	bambam.AngularVelocity = Vector3.new(0,99999,0)
	bambam.MaxTorque = Vector3.new(0,math.huge,0)
	bambam.P = math.huge
	local Char = speaker.Character:GetChildren()
	for i, v in next, Char do
		if v:IsA("BasePart") then
			v.CanCollide = false
			v.Massless = true
			v.Velocity = Vector3.new(0, 0, 0)
		end
	end
	flinging = true
	local function flingDiedF()
		execCmd('unfling')
	end
	flingDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(flingDiedF)
	repeat
		bambam.AngularVelocity = Vector3.new(0,99999,0)
		wait(.2)
		bambam.AngularVelocity = Vector3.new(0,0,0)
		wait(.1)
	until flinging == false
end)

addcmd('unfling',{'nofling'},function(args, speaker)
	execCmd('clip')
	if flingDied then
		flingDied:Disconnect()
	end
	flinging = false
	wait(.1)
	local speakerChar = speaker.Character
	if not speakerChar or not getRoot(speakerChar) then return end
	for i,v in pairs(getRoot(speakerChar):GetChildren()) do
		if v.ClassName == 'BodyAngularVelocity' then
			v:Destroy()
		end
	end
	for _, child in pairs(speakerChar:GetDescendants()) do
		if child.ClassName == "Part" or child.ClassName == "MeshPart" then
			child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
		end
	end
end)

addcmd('togglefling',{},function(args, speaker)
	if flinging then
		execCmd('unfling')
	else
		execCmd('fling')
	end
end)

addcmd("flyfling", {}, function(args, speaker)
    execCmd("unvehiclefly\\unwalkfling")
    wait()
    if args[1] and isNumber(args[1]) then
        vehicleflyspeed = args[1]
    end
    execCmd("vehiclefly\\walkfling")
end)

addcmd("unflyfling", {}, function(args, speaker)
    execCmd("unvehiclefly\\unwalkfling\\breakvelocity")
end)

addcmd("toggleflyfling", {}, function(args, speaker)
    execCmd(flinging and "unflyfling" or "flyfling")
end)

walkflinging = false
addcmd("walkfling", {}, function(args, speaker)
    execCmd("unwalkfling")
    local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
    if humanoid then
        humanoid.Died:Connect(function()
            execCmd("unwalkfling")
        end)
    end

    execCmd("noclip nonotify")
    walkflinging = true
    repeat RunService.Heartbeat:Wait()
        local character = speaker.Character
        local root = getRoot(character)
        local vel, movel = nil, 0.1

        while not (character and character.Parent and root and root.Parent) do
            RunService.Heartbeat:Wait()
            character = speaker.Character
            root = getRoot(character)
        end

        vel = root.Velocity
        root.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)

        RunService.RenderStepped:Wait()
        if character and character.Parent and root and root.Parent then
            root.Velocity = vel
        end

        RunService.Stepped:Wait()
        if character and character.Parent and root and root.Parent then
            root.Velocity = vel + Vector3.new(0, movel, 0)
            movel = movel * -1
        end
    until walkflinging == false
end)

addcmd("unwalkfling", {"nowalkfling"}, function(args, speaker)
    walkflinging = false
    execCmd("unnoclip nonotify")
end)

addcmd("togglewalkfling", {}, function(args, speaker)
    execCmd(walkflinging and "unwalkfling" or "walkfling")
end)

addcmd('invisfling',{},function(args, speaker)
	permadeath(speaker)
	local ch = speaker.Character
	local prt=Instance.new("Model")
	prt.Parent = speaker.Character
	local z1 = Instance.new("Part")
	z1.Name="Torso"
	z1.CanCollide = false
	z1.Anchored = true
	local z2 = Instance.new("Part")
	z2.Name="Head"
	z2.Parent = prt
	z2.Anchored = true
	z2.CanCollide = false
	local z3 =Instance.new("Humanoid")
	z3.Name="Humanoid"
	z3.Parent = prt
	z1.Position = Vector3.new(0,9999,0)
	speaker.Character=prt
	wait(3)
	speaker.Character=ch
	wait(3)
	local Hum = Instance.new("Humanoid")
	z2:Clone()
	Hum.Parent = speaker.Character
	local root =  getRoot(speaker.Character)
	for i,v in pairs(speaker.Character:GetChildren()) do
		if v ~= root and  v.Name ~= "Humanoid" then
			v:Destroy()
		end
	end
	root.Transparency = 0
	root.Color = Color3.new(1, 1, 1)
	local invisflingStepped
	invisflingStepped = RunService.Stepped:Connect(function()
		if speaker.Character and getRoot(speaker.Character) then
			getRoot(speaker.Character).CanCollide = false
		else
			invisflingStepped:Disconnect()
		end
	end)
	sFLY()
	workspace.CurrentCamera.CameraSubject = root
	local bambam = Instance.new("BodyThrust")
	bambam.Parent = getRoot(speaker.Character)
	bambam.Force = Vector3.new(99999,99999*10,99999)
	bambam.Location = getRoot(speaker.Character).Position
end)

addcmd("antifling", {}, function(args, speaker)
    if antifling then
        antifling:Disconnect()
        antifling = nil
    end
    antifling = RunService.Stepped:Connect(function()
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= speaker and player.Character then
                for _, v in pairs(player.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
        end
    end)
end)

addcmd("unantifling", {}, function(args, speaker)
    if antifling then
        antifling:Disconnect()
        antifling = nil
    end
end)

addcmd("toggleantifling", {}, function(args, speaker)
    execCmd(antifling and "unantifling" or "antifling")
end)

function attach(speaker,target)
	if tools(speaker) then
		local char = speaker.Character
		local tchar = target.Character
		local hum = speaker.Character:FindFirstChildOfClass("Humanoid")
		local hrp = getRoot(speaker.Character)
		local hrp2 = getRoot(target.Character)
		hum.Name = "1"
		local newHum = hum:Clone()
		newHum.Parent = char
		newHum.Name = "Humanoid"
		wait()
		hum:Destroy()
		workspace.CurrentCamera.CameraSubject = char
		newHum.DisplayDistanceType = "None"
		local tool = speaker:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass("Tool") or speaker.Character:FindFirstChildOfClass("Tool")
		tool.Parent = char
		hrp.CFrame = hrp2.CFrame * CFrame.new(0, 0, 0) * CFrame.new(math.random(-100, 100)/200,math.random(-100, 100)/200,math.random(-100, 100)/200)
		local n = 0
		repeat
			wait(.1)
			n = n + 1
			hrp.CFrame = hrp2.CFrame
		until (tool.Parent ~= char or not hrp or not hrp2 or not hrp.Parent or not hrp2.Parent or n > 250) and n > 2
	else
		notify('Tool Required','You need to have an item in your inventory to use this command')
	end
end

addcmd('attach',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		attach(speaker,Players[v])
	end
end)

function kill(speaker,target,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = CFrame.new(999999, workspace.FallenPartsDestroyHeight + 5,999999)
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
		end
	else
		notify('Tool Required','You need to have an item in your inventory to use this command')
	end
end

addcmd('kill',{'fekill'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		kill(speaker,Players[v])
	end
end)

addcmd('handlekill', {'hkill'}, function(args, speaker)
	if not firetouchinterest then
		return notify('Incompatible Exploit', 'Your exploit does not support this command (missing firetouchinterest)')
	end
	local RS = RunService.RenderStepped
	local Tool = speaker.Character.FindFirstChildWhichIsA(speaker.Character, "Tool")
	local Handle = Tool and Tool.FindFirstChild(Tool, "Handle")
	if not Tool or not Handle then
		return notify("Handle Kill", "You need to hold a \"Tool\" that does damage on touch. For example the default \"Sword\" tool.")
	end
	for _, v in ipairs(getPlayer(args[1], speaker)) do
		v = Players[v]
		task.spawn(function()
			while Tool and speaker.Character and v.Character and Tool.Parent == speaker.Character do
				local Human = v.Character.FindFirstChildWhichIsA(v.Character, "Humanoid")
				if not Human or Human.Health <= 0 then
					break
				end
				for _, v1 in ipairs(v.Character.GetChildren(v.Character)) do
					v1 = ((v1.IsA(v1, "BasePart") and firetouchinterest(Handle, v1, 1, (RS.Wait(RS) and nil) or firetouchinterest(Handle, v1, 0)) and nil) or v1) or v1
				end
			end
			notify("Handle Kill Stopped!", v.Name .. " died/left or you unequipped the tool!")
		end)
	end
end)

local hb = RunService.Heartbeat
addcmd('tpwalk', {'teleportwalk'}, function(args, speaker)
	tpwalking = true
	local chr = speaker.Character
	local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
	while tpwalking and chr and hum and hum.Parent do
		local delta = hb:Wait()
		if hum.MoveDirection.Magnitude > 0 then
			if args[1] and isNumber(args[1]) then
				chr:TranslateBy(hum.MoveDirection * tonumber(args[1]) * delta * 10)
			else
				chr:TranslateBy(hum.MoveDirection * delta * 10)
			end
		end
	end
end)
addcmd('untpwalk', {'unteleportwalk'}, function(args, speaker)
	tpwalking = false
end)

addcmd('fastkill',{'fastfekill'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		kill(speaker,Players[v],true)
	end
end)

function bring(speaker,target,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = NormPos
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
		end
	else
		notify('Tool Required','You need to have an item in your inventory to use this command')
	end
end

addcmd('bring',{'febring'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		bring(speaker,Players[v])
	end
end)

addcmd('fastbring',{'fastfebring'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		bring(speaker,Players[v],true)
	end
end)

function teleport(speaker,target,target2,fast)
	if tools(speaker) then
		if target ~= nil then
			local NormPos = getRoot(speaker.Character).CFrame
			if not fast then
				refresh(speaker)
				wait()
				repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
				wait(0.3)
			end
			local hrp = getRoot(speaker.Character)
			local hrp2 = getRoot(target2.Character)
			attach(speaker,target)
			repeat
				wait()
				hrp.CFrame = hrp2.CFrame
			until not getRoot(target.Character) or not getRoot(speaker.Character)
			wait(1)
			speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
		end
	else
		notify('Tool Required','You need to have an item in your inventory to use this command')
	end
end

addcmd('tp',{'teleport'},function(args, speaker)
	local players1=getPlayer(args[1], speaker)
	local players2=getPlayer(args[2], speaker)
	for i,v in pairs(players1)do
		if getRoot(Players[v].Character) and getRoot(Players[players2[1]].Character) then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			teleport(speaker,Players[v],Players[players2[1]])
		end
	end
end)

addcmd('fasttp',{'fastteleport'},function(args, speaker)
	local players1=getPlayer(args[1], speaker)
	local players2=getPlayer(args[2], speaker)
	for i,v in pairs(players1)do
		if getRoot(Players[v].Character) and getRoot(Players[players2[1]].Character) then
			if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
				speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
				wait(.1)
			end
			teleport(speaker,Players[v],Players[players2[1]],true)
		end
	end
end)

addcmd('spin',{},function(args, speaker)
	local spinSpeed = 20
	if args[1] and isNumber(args[1]) then
		spinSpeed = args[1]
	end
	for i,v in pairs(getRoot(speaker.Character):GetChildren()) do
		if v.Name == "Spinning" then
			v:Destroy()
		end
	end
	local Spin = Instance.new("BodyAngularVelocity")
	Spin.Name = "Spinning"
	Spin.Parent = getRoot(speaker.Character)
	Spin.MaxTorque = Vector3.new(0, math.huge, 0)
	Spin.AngularVelocity = Vector3.new(0,spinSpeed,0)
end)

addcmd('unspin',{},function(args, speaker)
	for i,v in pairs(getRoot(speaker.Character):GetChildren()) do
		if v.Name == "Spinning" then
			v:Destroy()
		end
	end
end)

xrayEnabled = false
xray = function()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

addcmd("xray", {}, function(args, speaker)
    xrayEnabled = true
    xray()
end)

addcmd("unxray", {"noxray"}, function(args, speaker)
    xrayEnabled = false
    xray()
end)

addcmd("togglexray", {}, function(args, speaker)
    xrayEnabled = not xrayEnabled
    xray()
end)

addcmd("loopxray", {}, function(args, speaker)
    if xrayLoop then
        xrayLoop:Disconnect()
    end
    xrayLoop = RunService.RenderStepped:Connect(function()
        xrayEnabled = true
        xray()
    end)
end)

addcmd("unloopxray", {}, function(args, speaker)
    if xrayLoop then
        xrayLoop:Disconnect()
    end
end)

local walltpTouch = nil
addcmd('walltp',{},function(args, speaker)
	local torso
	if r15(speaker) then
		torso = speaker.Character.UpperTorso
	else
		torso = speaker.Character.Torso
	end
	local function touchedFunc(hit)
		local Root = getRoot(speaker.Character)
		if hit:IsA("BasePart") and hit.Position.Y > Root.Position.Y - speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight then
			local hitP = getRoot(hit.Parent)
			if hitP ~= nil then
				Root.CFrame = hit.CFrame * CFrame.new(Root.CFrame.lookVector.X,hitP.Size.Z/2 + speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight,Root.CFrame.lookVector.Z)
			elseif hitP == nil then
				Root.CFrame = hit.CFrame * CFrame.new(Root.CFrame.lookVector.X,hit.Size.Y/2 + speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight,Root.CFrame.lookVector.Z)
			end
		end
	end
	walltpTouch = torso.Touched:Connect(touchedFunc)
end)

addcmd('unwalltp',{'nowalltp'},function(args, speaker)
	if walltpTouch then
		walltpTouch:Disconnect()
	end
end)

autoclicking = false
addcmd('autoclick',{},function(args, speaker)
	if mouse1press and mouse1release then
		execCmd('unautoclick')
		wait()
		local clickDelay = 0.1
		local releaseDelay = 0.1
		if args[1] and isNumber(args[1]) then clickDelay = args[1] end
		if args[2] and isNumber(args[2]) then releaseDelay = args[2] end
		autoclicking = true
		cancelAutoClick = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
			if not gameProcessedEvent then
				if (input.KeyCode == Enum.KeyCode.Backspace and UserInputService:IsKeyDown(Enum.KeyCode.Equals)) or (input.KeyCode == Enum.KeyCode.Equals and UserInputService:IsKeyDown(Enum.KeyCode.Backspace)) then
					autoclicking = false
					cancelAutoClick:Disconnect()
				end
			end
		end)
		notify('Auto Clicker',"Press [backspace] and [=] at the same time to stop")
		repeat wait(clickDelay)
			mouse1press()
			wait(releaseDelay)
			mouse1release()
		until autoclicking == false
	else
		notify('Auto Clicker',"Your exploit doesn't have the ability to use the autoclick")
	end
end)

addcmd('unautoclick',{'noautoclick'},function(args, speaker)
	autoclicking = false
	if cancelAutoClick then cancelAutoClick:Disconnect() end
end)

addcmd('mousesensitivity',{'ms'},function(args, speaker)
	UserInputService.MouseDeltaSensitivity = args[1]
end)

local nameBox = nil
local nbSelection = nil
addcmd('hovername',{},function(args, speaker)
	execCmd('unhovername')
	wait()
	nameBox = Instance.new("TextLabel")
	nameBox.Name = randomString()
	nameBox.Parent = ScaledHolder
	nameBox.BackgroundTransparency = 1
	nameBox.Size = UDim2.new(0,200,0,30)
	nameBox.Font = Enum.Font.Code
	nameBox.TextSize = 16
	nameBox.Text = ""
	nameBox.TextColor3 = Color3.new(1, 1, 1)
	nameBox.TextStrokeTransparency = 0
	nameBox.TextXAlignment = Enum.TextXAlignment.Left
	nameBox.ZIndex = 10
	nbSelection = Instance.new('SelectionBox')
	nbSelection.Name = randomString()
	nbSelection.LineThickness = 0.03
	nbSelection.Color3 = Color3.new(1, 1, 1)
	local function updateNameBox()
		local t
		local target = IYMouse.Target

		if target then
			local humanoid = target.Parent:FindFirstChildOfClass("Humanoid") or target.Parent.Parent:FindFirstChildOfClass("Humanoid")
			if humanoid then
				t = humanoid.Parent
			end
		end

		if t ~= nil then
			local x = IYMouse.X
			local y = IYMouse.Y
			local xP
			local yP
			if IYMouse.X > 200 then
				xP = x - 205
				nameBox.TextXAlignment = Enum.TextXAlignment.Right
			else
				xP = x + 25
				nameBox.TextXAlignment = Enum.TextXAlignment.Left
			end
			nameBox.Position = UDim2.new(0, xP, 0, y)
			nameBox.Text = t.Name
			nameBox.Visible = true
			nbSelection.Parent = t
			nbSelection.Adornee = t
		else
			nameBox.Visible = false
			nbSelection.Parent = nil
			nbSelection.Adornee = nil
		end
	end
	nbUpdateFunc = IYMouse.Move:Connect(updateNameBox)
end)

addcmd('unhovername',{'nohovername'},function(args, speaker)
	if nbUpdateFunc then
		nbUpdateFunc:Disconnect()
		nameBox:Destroy()
		nbSelection:Destroy()
	end
end)

addcmd('headsize',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		if Players[v] ~= speaker and Players[v].Character:FindFirstChild('Head') then
			local sizeArg = tonumber(args[2])
			local Size = Vector3.new(sizeArg,sizeArg,sizeArg)
			local Head = Players[v].Character:FindFirstChild('Head')
			if Head:IsA("BasePart") then
				if not args[2] or sizeArg == 1 then
					Head.Size = Vector3.new(2,1,1)
				else
					Head.Size = Size
				end
			end
		end
	end
end)

addcmd('hitbox',{},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	local transparency = args[3] and tonumber(args[3]) or 0.4
	for i,v in pairs(players) do
		if Players[v] ~= speaker and Players[v].Character:FindFirstChild('HumanoidRootPart') then
			local sizeArg = tonumber(args[2])
			local Size = Vector3.new(sizeArg,sizeArg,sizeArg)
			local Root = Players[v].Character:FindFirstChild('HumanoidRootPart')
			if Root:IsA("BasePart") then
				if not args[2] or sizeArg == 1 then
					Root.Size = Vector3.new(2,1,1)
					Root.Transparency = transparency
				else
					Root.Size = Size
					Root.Transparency = transparency
				end
			end
		end
	end
end)

addcmd('stareat',{'stare'},function(args, speaker)
	local players = getPlayer(args[1], speaker)
	for i,v in pairs(players) do
		if stareLoop then
			stareLoop:Disconnect()
		end
		if not Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and Players[v].Character:FindFirstChild("HumanoidRootPart") then return end
		local function stareFunc()
			if Players.LocalPlayer.Character.PrimaryPart and Players:FindFirstChild(v) and Players[v].Character ~= nil and Players[v].Character:FindFirstChild("HumanoidRootPart") then
				local chrPos=Players.LocalPlayer.Character.PrimaryPart.Position
				local tPos=Players[v].Character:FindFirstChild("HumanoidRootPart").Position
				local modTPos=Vector3.new(tPos.X,chrPos.Y,tPos.Z)
				local newCF=CFrame.new(chrPos,modTPos)
				Players.LocalPlayer.Character:SetPrimaryPartCFrame(newCF)
			elseif not Players:FindFirstChild(v) then
				stareLoop:Disconnect()
			end
		end

		stareLoop = RunService.RenderStepped:Connect(stareFunc)
	end
end)

addcmd('unstareat',{'unstare','nostare','nostareat'},function(args, speaker)
	if stareLoop then
		stareLoop:Disconnect()
	end
end)

RolewatchData = {Group = 0, Role = "", Leave = false}
RolewatchConnection = Players.PlayerAdded:Connect(function(player)
	if RolewatchData.Group == 0 then return end
	if player:IsInGroup(RolewatchData.Group) then
		if tostring(player:GetRoleInGroup(RolewatchData.Group)):lower() == RolewatchData.Role:lower() then
			if RolewatchData.Leave == true then
				Players.LocalPlayer:Kick("\n\nRolewatch\nPlayer \"" .. tostring(player.Name) .. "\" has joined with the Role \"" .. RolewatchData.Role .. "\"\n")
			else
				notify("Rolewatch", "Player \"" .. tostring(player.Name) .. "\" has joined with the Role \"" .. RolewatchData.Role .. "\"")
			end
		end
	end
end)

addcmd("rolewatch", {}, function(args, speaker)
    local groupId = tonumber(args[1] or 0)
    local roleName = args[2] and tostring(getstring(2))
    if groupId and roleName then
        RolewatchData.Group = groupId
        RolewatchData.Role = roleName
        notify("Rolewatch", "Watching Group ID \"" .. tostring(groupId) .. "\" for Role \"" .. roleName .. "\"")
    end
end)

addcmd("rolewatchstop", {}, function(args, speaker)
    RolewatchData.Group = 0
    RolewatchData.Role = ""
    RolewatchData.Leave = false
    notify("Rolewatch", "Disabled")
end)

addcmd("rolewatchleave", {"unrolewatch"}, function(args, speaker)
    RolewatchData.Leave = not RolewatchData.Leave
    notify("Rolewatch", RolewatchData.Leave and "Leave has been Enabled" or "Leave has been Disabled")
end)

staffRoles = {"mod", "admin", "staff", "dev", "founder", "owner", "supervis", "manager", "management", "executive", "president", "chairman", "chairwoman", "chairperson", "director"}

getStaffRole = function(player)
    local playerRole = player:GetRoleInGroup(game.CreatorId)
    local result = {Role = playerRole, Staff = false}
    if player:IsInGroup(1200769) then
        result.Role = "Roblox Employee"
        result.Staff = true
    end
    for _, role in pairs(staffRoles) do
        if string.find(string.lower(playerRole), role) then
            result.Staff = true
        end
    end
    return result
end

addcmd("staffwatch", {}, function(args, speaker)
    if staffwatchjoin then
        staffwatchjoin:Disconnect()
    end
    if game.CreatorType == Enum.CreatorType.Group then
        local found = {}
        staffwatchjoin = Players.PlayerAdded:Connect(function(player)
            local result = getStaffRole(player)
            if result.Staff then
                notify("Staffwatch", formatUsername(player) .. " is a " .. result.Role)
            end
        end)
        for _, player in pairs(Players:GetPlayers()) do
            local result = getStaffRole(player)
            if result.Staff then
                table.insert(found, formatUsername(player) .. " is a " .. result.Role)
            end
        end
        if #found > 0 then
            notify("Staffwatch", table.concat(found, ",\n"))
        else
            notify("Staffwatch", "Enabled")
        end
    else
        notify("Staffwatch", "Game is not owned by a Group")
    end
end)

addcmd("unstaffwatch", {}, function(args, speaker)
    if staffwatchjoin then
        staffwatchjoin:Disconnect()
    end
    notify("Staffwatch", "Disabled")
end)

addcmd('removeterrain',{'rterrain','noterrain'},function(args, speaker)
	workspace:FindFirstChildOfClass('Terrain'):Clear()
end)

addcmd('clearnilinstances',{'nonilinstances','cni'},function(args, speaker)
	if getnilinstances then
		for i,v in pairs(getnilinstances()) do
			v:Destroy()
		end
	else
		notify('Incompatible Exploit','Your exploit does not support this command (missing getnilinstances)')
	end
end)

addcmd('destroyheight',{'dh'},function(args, speaker)
	local dh = args[1] or -500
	if isNumber(dh) then
		workspace.FallenPartsDestroyHeight = dh
	end
end)

OrgDestroyHeight = workspace.FallenPartsDestroyHeight
addcmd("fakeout", {}, function(args, speaker)
    local root = getRoot(speaker.Character)
    local oldpos = root.CFrame
    workspace.FallenPartsDestroyHeight = 0/1/0
    root.CFrame = CFrame.new(Vector3.new(0, OrgDestroyHeight - 25, 0))
    wait(1)
    root.CFrame = oldpos
    workspace.FallenPartsDestroyHeight = OrgDestroyHeight
end)

antivoidloop = false
addcmd("antivoid", {}, function(args, speaker)
    execCmd("unantivoid nonotify")
    wait()
    antivoidloop = RunService.Stepped:Connect(function()
        local root = getRoot(speaker.Character)
        if root and root.Position.Y <= OrgDestroyHeight + 25 then
            root.Velocity = root.Velocity + Vector3.new(0, 250, 0)
        end
    end)
    notify("antivoid", "Enabled")
end)

addcmd("unantivoid", {"noantivoid"}, function(args, speaker)
    antivoidloop:Disconnect()
    antivoidloop = nil
    if args[1] ~= "nonotify" then notify("antivoid", "Disabled") end
end)

addcmd('trip',{},function(args, speaker)
	if speaker and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") and getRoot(speaker.Character) then
		local hum = speaker.Character:FindFirstChildOfClass("Humanoid")
		local root = getRoot(speaker.Character)
		hum:ChangeState(0)
		root.Velocity = root.CFrame.LookVector * 30
	end
end)

addcmd("removeads", {"adblock"}, function(args, speaker)
    while wait() do
        pcall(function()
            for i, v in pairs(workspace:GetDescendants()) do
                if v:IsA("PackageLink") then
                    if v.Parent:FindFirstChild("ADpart") then
                        v.Parent:Destroy()
                    end
                    if v.Parent:FindFirstChild("AdGuiAdornee") then
                        v.Parent.Parent:Destroy()
                    end
                end
            end
        end)
    end
end)

addcmd("scare", {"spook"}, function(args, speaker)
    local players = getPlayer(args[1], speaker)
    local oldpos = nil

    for _, v in pairs(players) do
        local root = speaker.Character and getRoot(speaker.Character)
        local target = Players[v]
        local targetRoot = target and target.Character and getRoot(target.Character)

        if root and targetRoot and target ~= speaker then
            oldpos = root.CFrame
            root.CFrame = targetRoot.CFrame + targetRoot.CFrame.lookVector * 2
            root.CFrame = CFrame.new(root.Position, targetRoot.Position)
            task.wait(0.5)
            root.CFrame = oldpos
        end
    end
end)

addcmd("alignmentkeys", {}, function(args, speaker)
    alignmentKeys = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.Comma then workspace.CurrentCamera:PanUnits(-1) end
        if input.KeyCode == Enum.KeyCode.Period then workspace.CurrentCamera:PanUnits(1) end
    end)
    alignmentKeysEmotes = StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu)
    StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, false)
end)

addcmd("unalignmentkeys", {"noalignmentkeys"}, function(args, speaker)
    if type(alignmentKeysEmotes) == "boolean" then
        StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, alignmentKeysEmotes)
    end
    alignmentKeys:Disconnect()
end)

addcmd("ctrllock", {}, function(args, speaker)
    local mouseLockController = speaker.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("CameraModule"):WaitForChild("MouseLockController")
    local boundKeys = mouseLockController:FindFirstChild("BoundKeys")

    if boundKeys then
        boundKeys.Value = "LeftControl"
    else
        boundKeys = Instance.new("StringValue")
        boundKeys.Name = "BoundKeys"
        boundKeys.Value = "LeftControl"
        boundKeys.Parent = mouseLockController
    end
end)

addcmd("unctrllock", {}, function(args, speaker)
    local mouseLockController = speaker.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("CameraModule"):WaitForChild("MouseLockController")
    local boundKeys = mouseLockController:FindFirstChild("BoundKeys")

    if boundKeys then
        boundKeys.Value = "LeftShift"
    else
        boundKeys = Instance.new("StringValue")
        boundKeys.Name = "BoundKeys"
        boundKeys.Value = "LeftShift"
        boundKeys.Parent = mouseLockController
    end
end)

addcmd("listento", {}, function(args, speaker)
    execCmd("unlistento")
    if not args[1] then return end

    local player = Players:FindFirstChild(getPlayer(args[1], speaker)[1])
    local root = player and player.Character and getRoot(player.Character)

    if root then
        SoundService:SetListener(Enum.ListenerType.ObjectPosition, root)
        listentoChar = player.CharacterAdded:Connect(function()
            repeat task.wait() until Players[player.Name].Character ~= nil and getRoot(Players[player.Name].Character)
            SoundService:SetListener(Enum.ListenerType.ObjectPosition, getRoot(Players[player.Name].Character))
        end)
    end
end)

addcmd("unlistento", {}, function(args, speaker)
    SoundService:SetListener(Enum.ListenerType.Camera)
    listentoChar:Disconnect()
end)

addcmd("jerk", {}, function(args, speaker)
    local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
    local backpack = speaker:FindFirstChildWhichIsA("Backpack")
    if not humanoid or not backpack then return end

    local tool = Instance.new("Tool")
    tool.Name = "Jerk Off"
    tool.ToolTip = "in the stripped club. straight up \"jorking it\" . and by \"it\" , haha, well. let's justr say. My peanits."
    tool.RequiresHandle = false
    tool.Parent = backpack

    local jorkin = false
    local track = nil

    local function stopTomfoolery()
        jorkin = false
        if track then
            track:Stop()
            track = nil
        end
    end

    tool.Equipped:Connect(function() jorkin = true end)
    tool.Unequipped:Connect(stopTomfoolery)
    humanoid.Died:Connect(stopTomfoolery)

    while task.wait() do
        if not jorkin then continue end

        local isR15 = r15(speaker)
        if not track then
            local anim = Instance.new("Animation")
            anim.AnimationId = not isR15 and "rbxassetid://72042024" or "rbxassetid://698251653"
            track = humanoid:LoadAnimation(anim)
        end

        track:Play()
        track:AdjustSpeed(isR15 and 0.7 or 0.65)
        track.TimePosition = 0.6
        task.wait(0.1)
        while track and track.TimePosition < (not isR15 and 0.65 or 0.7) do task.wait(0.1) end
        if track then
            track:Stop()
            track = nil
        end
    end
end)

addcmd("guiscale", {}, function(args, speaker)
    if args[1] and isNumber(args[1]) then
        local scale = tonumber(args[1])
        if scale % 1 == 0 then scale = scale / 100 end
        -- me when i divide and it explodes
        if scale == 0.01 then scale = 1 end
        if scale == 0.02 then scale = 2 end

        if scale >= 0.4 and scale <= 2 then
            guiScale = scale
        end
    else
        guiScale = defaultGuiScale
    end

    Scale.Scale = math.max(Holder.AbsoluteSize.X / 1920, guiScale)
    updatesaves()
end)

addcmd("unsuspendvc", {}, function(args, speaker)
    VoiceChatService:joinVoice()

    if typeof(onVoiceModerated) ~= "RBXScriptConnection" then
        onVoiceModerated = cloneref(game:GetService("VoiceChatInternal")).LocalPlayerModerated:Connect(function()
            task.wait(1)
            VoiceChatService:joinVoice()
        end)
    end
end)

addcmd("permadeath", {}, function(args, speaker)
    if replicatesignal then
        permadeath(speaker)
        notify("Permadeath", "Enabled")
    else
        notify("Incompatible Exploit", "Your exploit does not support this command (missing replicatesignal)")
    end
end)

local freezingua = nil
frozenParts = {}
addcmd('freezeunanchored',{'freezeua'},function(args, speaker)
    local badnames = {
        "Head",
        "UpperTorso",
        "LowerTorso",
        "RightUpperArm",
        "LeftUpperArm",
        "RightLowerArm",
        "LeftLowerArm",
        "RightHand",
        "LeftHand",
        "RightUpperLeg",
        "LeftUpperLeg",
        "RightLowerLeg",
        "LeftLowerLeg",
        "RightFoot",
        "LeftFoot",
        "Torso",
        "Right Arm",
        "Left Arm",
        "Right Leg",
        "Left Leg",
        "HumanoidRootPart"
    }
    local function FREEZENOOB(v)
        if v:IsA("BasePart" or "UnionOperation") and v.Anchored == false then
            local BADD = false
            for i = 1,#badnames do
                if v.Name == badnames[i] then
                    BADD = true
                end
            end
            if speaker.Character and v:IsDescendantOf(speaker.Character) then
                BADD = true
            end
            if BADD == false then
                for i,c in pairs(v:GetChildren()) do
                    if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
                        c:Destroy()
                    end
                end
                local bodypos = Instance.new("BodyPosition")
                bodypos.Parent = v
                bodypos.Position = v.Position
                bodypos.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
                local bodygyro = Instance.new("BodyGyro")
                bodygyro.Parent = v
                bodygyro.CFrame = v.CFrame
                bodygyro.MaxTorque = Vector3.new(math.huge,math.huge,math.huge)
                if not table.find(frozenParts,v) then
                    table.insert(frozenParts,v)
                end
            end
        end
    end
    for i,v in pairs(workspace:GetDescendants()) do
        FREEZENOOB(v)
    end
    freezingua = workspace.DescendantAdded:Connect(FREEZENOOB)
end)

addcmd('thawunanchored',{'thawua','unfreezeunanchored','unfreezeua'},function(args, speaker)
    if freezingua then
        freezingua:Disconnect()
    end
    for i,v in pairs(frozenParts) do
        for i,c in pairs(v:GetChildren()) do
            if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
                c:Destroy()
            end
        end
    end
    frozenParts = {}
end)

addcmd('tpunanchored',{'tpua'},function(args, speaker)
    local players = getPlayer(args[1], speaker)
    for i,v in pairs(players) do
        local Forces = {}
        for _,part in pairs(workspace:GetDescendants()) do
            if Players[v].Character:FindFirstChild('Head') and part:IsA("BasePart" or "UnionOperation" or "Model") and part.Anchored == false and not part:IsDescendantOf(speaker.Character) and part.Name == "Torso" == false and part.Name == "Head" == false and part.Name == "Right Arm" == false and part.Name == "Left Arm" == false and part.Name == "Right Leg" == false and part.Name == "Left Leg" == false and part.Name == "HumanoidRootPart" == false then
                for i,c in pairs(part:GetChildren()) do
                    if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
                        c:Destroy()
                    end
                end
                local ForceInstance = Instance.new("BodyPosition")
                ForceInstance.Parent = part
                ForceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                table.insert(Forces, ForceInstance)
                if not table.find(frozenParts,part) then
                    table.insert(frozenParts,part)
                end
            end
        end
        for i,c in pairs(Forces) do
            c.Position = Players[v].Character.Head.Position
        end
    end
end)

keycodeMap = {
	["0"] = 0x30,
	["1"] = 0x31,
	["2"] = 0x32,
	["3"] = 0x33,
	["4"] = 0x34,
	["5"] = 0x35,
	["6"] = 0x36,
	["7"] = 0x37,
	["8"] = 0x38,
	["9"] = 0x39,
	["a"] = 0x41,
	["b"] = 0x42,
	["c"] = 0x43,
	["d"] = 0x44,
	["e"] = 0x45,
	["f"] = 0x46,
	["g"] = 0x47,
	["h"] = 0x48,
	["i"] = 0x49,
	["j"] = 0x4A,
	["k"] = 0x4B,
	["l"] = 0x4C,
	["m"] = 0x4D,
	["n"] = 0x4E,
	["o"] = 0x4F,
	["p"] = 0x50,
	["q"] = 0x51,
	["r"] = 0x52,
	["s"] = 0x53,
	["t"] = 0x54,
	["u"] = 0x55,
	["v"] = 0x56,
	["w"] = 0x57,
	["x"] = 0x58,
	["y"] = 0x59,
	["z"] = 0x5A,
	["enter"] = 0x0D,
	["shift"] = 0x10,
	["ctrl"] = 0x11,
	["alt"] = 0x12,
	["pause"] = 0x13,
	["capslock"] = 0x14,
	["spacebar"] = 0x20,
	["space"] = 0x20,
	["pageup"] = 0x21,
	["pagedown"] = 0x22,
	["end"] = 0x23,
	["home"] = 0x24,
	["left"] = 0x25,
	["up"] = 0x26,
	["right"] = 0x27,
	["down"] = 0x28,
	["insert"] = 0x2D,
	["delete"] = 0x2E,
	["f1"] = 0x70,
	["f2"] = 0x71,
	["f3"] = 0x72,
	["f4"] = 0x73,
	["f5"] = 0x74,
	["f6"] = 0x75,
	["f7"] = 0x76,
	["f8"] = 0x77,
	["f9"] = 0x78,
	["f10"] = 0x79,
	["f11"] = 0x7A,
	["f12"] = 0x7B,
}
autoKeyPressing = false
cancelAutoKeyPress = nil

addcmd('autokeypress',{'keypress'},function(args, speaker)
	if keypress and keyrelease and args[1] then
		local code = keycodeMap[args[1]:lower()]
		if not code then notify('Auto Key Press',"Invalid key") return end
		execCmd('unautokeypress')
		wait()
		local clickDelay = 0.1
		local releaseDelay = 0.1
		if args[2] and isNumber(args[2]) then clickDelay = args[2] end
		if args[3] and isNumber(args[3]) then releaseDelay = args[3] end
		autoKeyPressing = true
		cancelAutoKeyPress = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
			if not gameProcessedEvent then
				if (input.KeyCode == Enum.KeyCode.Backspace and UserInputService:IsKeyDown(Enum.KeyCode.Equals)) or (input.KeyCode == Enum.KeyCode.Equals and UserInputService:IsKeyDown(Enum.KeyCode.Backspace)) then
					autoKeyPressing = false
					cancelAutoKeyPress:Disconnect()
				end
			end
		end)
		notify('Auto Key Press',"Press [backspace] and [=] at the same time to stop")
		repeat wait(clickDelay)
			keypress(code)
			wait(releaseDelay)
			keyrelease(code)
		until autoKeyPressing == false
		if cancelAutoKeyPress then cancelAutoKeyPress:Disconnect() keyrelease(code) end
	else
		notify('Auto Key Press',"Your exploit doesn't have the ability to use auto key press")
	end
end)

addcmd('unautokeypress',{'noautokeypress','unkeypress','nokeypress'},function(args, speaker)
	autoKeyPressing = false
	if cancelAutoKeyPress then cancelAutoKeyPress:Disconnect() end
end)

addcmd('addplugin',{'plugin'},function(args, speaker)
	addPlugin(getstring(1))
end)

addcmd('removeplugin',{'deleteplugin'},function(args, speaker)
	deletePlugin(getstring(1))
end)

addcmd('reloadplugin',{},function(args, speaker)
	local pluginName = getstring(1)
	deletePlugin(pluginName)
	wait(1)
	addPlugin(pluginName)
end)

addcmd("addallplugins", {"loadallplugins"}, function(args, speaker)
    if not listfiles or not isfolder then
        notify("Incompatible Exploit", "Your exploit does not support this command (missing listfiles/isfolder)")
        return
    end

    for _, filePath in ipairs(listfiles("")) do
        local fileName = filePath:match("([^/\\]+%.iy)$")

        if fileName and
            fileName:lower() ~= "iy_fe.iy" and
            not isfolder(fileName) and
            not table.find(PluginsTable, fileName)
        then
            addPlugin(fileName)
        end
    end
end)

addcmd('removecmd',{'deletecmd'},function(args, speaker)
	removecmd(args[1])
end)

if IsOnMobile then
	local QuickCapture = Instance.new("TextButton")
	local UICorner = Instance.new("UICorner")
	QuickCapture.Name = randomString()
	QuickCapture.Parent = PARENT
	QuickCapture.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
	QuickCapture.BackgroundTransparency = 0.14
	QuickCapture.Position = UDim2.new(0.489, 0, 0, 0)
	QuickCapture.Size = UDim2.new(0, 32, 0, 33)
	QuickCapture.Font = Enum.Font.SourceSansBold
	QuickCapture.Text = "IY"
	QuickCapture.TextColor3 = Color3.fromRGB(255, 255, 255)
	QuickCapture.TextSize = 20
	QuickCapture.TextWrapped = true
	QuickCapture.ZIndex = 10
	QuickCapture.Draggable = true
	UICorner.Name = randomString()
	UICorner.CornerRadius = UDim.new(0.5, 0)
	UICorner.Parent = QuickCapture
	QuickCapture.MouseButton1Click:Connect(function()
		Cmdbar:CaptureFocus()
		maximizeHolder()
	end)
	table.insert(shade1, QuickCapture)
	table.insert(text1, QuickCapture)
end

Scale.Scale = math.max(Holder.AbsoluteSize.X / 1920, guiScale)
Scale.Parent = ScaledHolder
ScaledHolder.Size = UDim2.fromScale(1 / Scale.Scale, 1 / Scale.Scale)
Scale:GetPropertyChangedSignal("Scale"):Connect(function()
    ScaledHolder.Size = UDim2.fromScale(1 / Scale.Scale, 1 / Scale.Scale)
    for _, v in ScaledHolder:GetDescendants() do
        if v:IsA("GuiObject") and v.Visible then
            v.Visible = false
            v.Visible = true
        end
    end
end)

updateColors(currentShade1,shade1)
updateColors(currentShade2,shade2)
updateColors(currentShade3,shade3)
updateColors(currentText1,text1)
updateColors(currentText2,text2)
updateColors(currentScroll,scroll)

if PluginsTable ~= nil or PluginsTable ~= {} then
	FindPlugins(PluginsTable)
end

-- Events
eventEditor.RegisterEvent("OnExecute")
eventEditor.RegisterEvent("OnSpawn",{
	{Type="Player",Name="Player Filter ($1)"}
})
eventEditor.RegisterEvent("OnDied",{
	{Type="Player",Name="Player Filter ($1)"}
})
eventEditor.RegisterEvent("OnDamage",{
	{Type="Player",Name="Player Filter ($1)"},
	{Type="Number",Name="Below Health ($2)"}
})
eventEditor.RegisterEvent("OnKilled",{
	{Type="Player",Name="Victim Player ($1)"},
	{Type="Player",Name="Killer Player ($2)",Default = 1}
})
eventEditor.RegisterEvent("OnJoin",{
	{Type="Player",Name="Player Filter ($1)",Default = 1}
})
eventEditor.RegisterEvent("OnLeave",{
	{Type="Player",Name="Player Filter ($1)",Default = 1}
})
eventEditor.RegisterEvent("OnChatted",{
	{Type="Player",Name="Player Filter ($1)",Default = 1},
	{Type="String",Name="Message Filter ($2)"}
})

function hookCharEvents(plr,instant)
	task.spawn(function()
		local char = plr.Character
		if not char then return end

		local humanoid = char:WaitForChild("Humanoid",10)
		if not humanoid then return end

		local oldHealth = humanoid.Health
		humanoid.HealthChanged:Connect(function(health)
			local change = math.abs(oldHealth - health)
			if oldHealth > health then
				eventEditor.FireEvent("OnDamage",plr.Name,tonumber(health))
			end
			oldHealth = health
		end)

		humanoid.Died:Connect(function()
			eventEditor.FireEvent("OnDied",plr.Name)

			local killedBy = humanoid:FindFirstChild("creator")
			if killedBy and killedBy.Value and killedBy.Value.Parent then
				eventEditor.FireEvent("OnKilled",plr.Name,killedBy.Name)
			end
		end)
	end)
end

Players.PlayerAdded:Connect(function(plr)
	eventEditor.FireEvent("OnJoin",plr.Name)
	if isLegacyChat then plr.Chatted:Connect(function(msg) eventEditor.FireEvent("OnChatted",tostring(plr),msg) end) end
	plr.CharacterAdded:Connect(function() eventEditor.FireEvent("OnSpawn",tostring(plr)) hookCharEvents(plr) end)
	JoinLog(plr)
	if isLegacyChat then ChatLog(plr) end
	if ESPenabled then
		repeat wait(1) until plr.Character and getRoot(plr.Character)
		ESP(plr)
	end
	if CHMSenabled then
		repeat wait(1) until plr.Character and getRoot(plr.Character)
		CHMS(plr)
	end
end)

if not isLegacyChat then
    TextChatService.MessageReceived:Connect(function(message)
        if message.TextSource then
            local player = Players:GetPlayerByUserId(message.TextSource.UserId)
            if not player then return end

            if logsEnabled == true then
                CreateLabel(player.Name, message.Text)
            end
            if player.UserId == Players.LocalPlayer.UserId then
                do_exec(message.Text, Players.LocalPlayer)
            end
            eventEditor.FireEvent("OnChatted", player.Name, message.Text)
            sendChatWebhook(player, message.Text)
        end
    end)
end

for _,plr in pairs(Players:GetPlayers()) do
	pcall(function()
		plr.CharacterAdded:Connect(function() eventEditor.FireEvent("OnSpawn",tostring(plr)) hookCharEvents(plr) end)
		hookCharEvents(plr)
	end)
end

if spawnCmds and #spawnCmds > 0 then
	for i,v in pairs(spawnCmds) do
		eventEditor.AddCmd("OnSpawn",{v.COMMAND or "",{0},v.DELAY or 0})
	end
	updatesaves()
end

if loadedEventData then eventEditor.LoadData(loadedEventData) end
eventEditor.Refresh()

eventEditor.FireEvent("OnExecute")

if aliases and #aliases > 0 then
	local cmdMap = {}
	for i,v in pairs(cmds) do
		cmdMap[v.NAME:lower()] = v
		for _,alias in pairs(v.ALIAS) do
			cmdMap[alias:lower()] = v
		end
	end
	for i = 1, #aliases do
		local cmd = string.lower(aliases[i].CMD)
		local alias = string.lower(aliases[i].ALIAS)
		if cmdMap[cmd] then
			customAlias[alias] = cmdMap[cmd]
		end
	end
	refreshaliases()
end

IYMouse.Move:Connect(checkTT)

CaptureService.CaptureBegan:Connect(function()
    Holder.Visible = false
end)

CaptureService.CaptureEnded:Connect(function()
    task.delay(0.1, function()
        Holder.Visible = true
    end)
end)

task.spawn(function()
	local success, latestVersionInfo = pcall(function() 
		local versionJson = game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/version')
		return HttpService:JSONDecode(versionJson)
	end)

	if success then
		if currentVersion ~= latestVersionInfo.Version then
			notify('Outdated','Get the new version at infyiff.github.io')
		end

		if latestVersionInfo.Announcement and latestVersionInfo.Announcement ~= '' then
			local AnnGUI = Instance.new("Frame")
			local background = Instance.new("Frame")
			local TextBox = Instance.new("TextLabel")
			local shadow = Instance.new("Frame")
			local PopupText = Instance.new("TextLabel")
			local Exit = Instance.new("TextButton")
			local ExitImage = Instance.new("ImageLabel")

			AnnGUI.Name = randomString()
			AnnGUI.Parent = ScaledHolder
			AnnGUI.Active = true
			AnnGUI.BackgroundTransparency = 1
			AnnGUI.Position = UDim2.new(0.5, -180, 0, -500)
			AnnGUI.Size = UDim2.new(0, 360, 0, 20)
			AnnGUI.ZIndex = 10

			background.Name = "background"
			background.Parent = AnnGUI
			background.Active = true
			background.BackgroundColor3 = currentShade1
			background.BorderSizePixel = 0
			background.Position = UDim2.new(0, 0, 0, 20)
			background.Size = UDim2.new(0, 360, 0, 150)
			background.ZIndex = 10

			TextBox.Parent = background
			TextBox.BackgroundTransparency = 1
			TextBox.Position = UDim2.new(0, 5, 0, 5)
			TextBox.Size = UDim2.new(0, 350, 0, 140)
			TextBox.Font = Enum.Font.SourceSans
			TextBox.TextSize = 18
			TextBox.TextWrapped = true
			TextBox.Text = latestVersionInfo.Announcement
			TextBox.TextColor3 = currentText1
			TextBox.TextXAlignment = Enum.TextXAlignment.Left
			TextBox.TextYAlignment = Enum.TextYAlignment.Top
			TextBox.ZIndex = 10

			shadow.Name = "shadow"
			shadow.Parent = AnnGUI
			shadow.BackgroundColor3 = currentShade2
			shadow.BorderSizePixel = 0
			shadow.Size = UDim2.new(0, 360, 0, 20)
			shadow.ZIndex = 10

			PopupText.Name = "PopupText"
			PopupText.Parent = shadow
			PopupText.BackgroundTransparency = 1
			PopupText.Size = UDim2.new(1, 0, 0.95, 0)
			PopupText.ZIndex = 10
			PopupText.Font = Enum.Font.SourceSans
			PopupText.TextSize = 14
			PopupText.Text = "Server Announcement"
			PopupText.TextColor3 = currentText1
			PopupText.TextWrapped = true

			Exit.Name = "Exit"
			Exit.Parent = shadow
			Exit.BackgroundTransparency = 1
			Exit.Position = UDim2.new(1, -20, 0, 0)
			Exit.Size = UDim2.new(0, 20, 0, 20)
			Exit.Text = ""
			Exit.ZIndex = 10

			ExitImage.Parent = Exit
			ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
			ExitImage.BackgroundTransparency = 1
			ExitImage.Position = UDim2.new(0, 5, 0, 5)
			ExitImage.Size = UDim2.new(0, 10, 0, 10)
			ExitImage.Image = "rbxassetid://5054663650"
			ExitImage.ZIndex = 10

			wait(1)
			AnnGUI:TweenPosition(UDim2.new(0.5, -180, 0, 150), "InOut", "Quart", 0.5, true, nil)

			Exit.MouseButton1Click:Connect(function()
				AnnGUI:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
				wait(0.6)
				AnnGUI:Destroy()
			end)
		end
	end
end)

task.spawn(function()
	wait()
	Credits:TweenPosition(UDim2.new(0, 0, 0.9, 0), "Out", "Quart", 0.2)
	Logo:TweenSizeAndPosition(UDim2.new(0, 175, 0, 175), UDim2.new(0, 37, 0, 45), "Out", "Quart", 0.3)
	wait(1)
	local OutInfo = TweenInfo.new(1.6809, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0)
	TweenService:Create(Logo, OutInfo, {ImageTransparency = 1}):Play()
	TweenService:Create(IntroBackground, OutInfo, {BackgroundTransparency = 1}):Play()
	Credits:TweenPosition(UDim2.new(0, 0, 0.9, 30), "Out", "Quart", 0.2)
	wait(0.2)
	Logo:Destroy()
	Credits:Destroy()
	IntroBackground:Destroy()
	minimizeHolder()
	if IsOnMobile then notify("Unstable Device", "On mobile, Infinite Yield may have issues or features that are not functioning correctly.") end
end)
